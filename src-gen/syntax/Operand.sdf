
module Operand
imports Common

exports
  context-free syntax
                                                                                                                                                                                                                                                                                                        -> Boolean                {cons("True")}
                                                                                                                                                                                                                                                                                                        -> Boolean                {cons("False")}
    "<NAryOp" "operator=\"and\">" "<operands>" "<UnaryOp" "operator=\"not\">" "<operand>" Operand "</operand>" "</UnaryOp>" Operand "</operands>" "</NAryOp>"                                                                                                                                           -> Event                  {cons("Event")}
    Event                                                                                                                                                                                                                                                                                               -> Operand                {cons("EventOp")}
    "<NAryOp" "operator=\"and\">" "<operands>" Event Operand "</operands>" "</NAryOp>"                                                                                                                                                                                                                  -> Operand                {cons("AndEvent"), prefer}
    "<NAryOp" "operator=\"or\">" "<operands>" Event Operand "</operands>" "</NAryOp>"                                                                                                                                                                                                                   -> Operand                {cons("OrEvent"), prefer}
    "<NAryOp" "operator=\"and\">" "<operands>" "<UnaryOp" "operator=\"not\">" "<operand>" "<UnaryOp" "operator=\"not\">" "<operand>" Operand "</operand>" "</UnaryOp>" "</operand>" "</UnaryOp>" "<UnaryOp" "operator=\"not\">" "<operand>" Operand "</operand>" "</UnaryOp>" "</operands>" "</NAryOp>" -> Operand                {cons("Event3"), prefer}
    "<NAryOp" "operator=\"and\">" "<operands>" Operand* "</operands>" "</NAryOp>"                                                                                                                                                                                                                       -> Operand                {cons("And"), avoid}
    "<NAryOp" "operator=\"or\">" "<operands>" Operand* "</operands>" "</NAryOp>"                                                                                                                                                                                                                        -> Operand                {cons("Or"), avoid}
    "<NAryOp" "operator=\"or\">" "<operands>" "<UnaryOp" "operator=\"not\">" "<operand>" Operand "</operand>" "</UnaryOp>" Operand "</operands>" "</NAryOp>"                                                                                                                                            -> Operand                {cons("Imply"), prefer}
    "<UnaryOp" "operator=\"-\">" "<operand>" Operand "</operand>" "</UnaryOp>"                                                                                                                                                                                                                          -> Operand                {cons("Negative")}
    "<UnaryOp" "operator=\"not\">" "<operand>" "<NAryOp" "operator=\"xor\">" "<operands>" Operand Operand "</operands>" "</NAryOp>" "</operand>" "</UnaryOp>"                                                                                                                                           -> Operand                {cons("Xor")}
    "<UnaryOp" "operator=\"not\">" "<operand>" Operand "</operand>" "</UnaryOp>"                                                                                                                                                                                                                        -> Operand                {cons("NotOperand"), avoid}
    "<BinaryOp" "operator=\"&gt;\">" "<operands>" Operand Operand "</operands>" "</BinaryOp>"                                                                                                                                                                                                           -> Operand                {cons("GreaterThan")}
    "<BinaryOp" "operator=\"&gt;=\">" "<operands>" Operand Operand "</operands>" "</BinaryOp>"                                                                                                                                                                                                          -> Operand                {cons("GreaterThanOrEqual")}
    "<BinaryOp" "operator=\"&lt;\">" "<operands>" Operand Operand "</operands>" "</BinaryOp>"                                                                                                                                                                                                           -> Operand                {cons("LessThan")}
    "<BinaryOp" "operator=\"&lt;=\">" "<operands>" Operand Operand "</operands>" "</BinaryOp>"                                                                                                                                                                                                          -> Operand                {cons("LessThanOrEqual")}
    "<NAryOp" "operator=\"+\">" "<operands>" Operand Operand "</operands>" "</NAryOp>"                                                                                                                                                                                                                  -> Operand                {cons("Addiction")}
    "<BinaryOp" "operator=\"-\">" "<operands>" Operand Operand "</operands>" "</BinaryOp>"                                                                                                                                                                                                              -> Operand                {cons("Subtraction")}
    "<BinaryOp" "operator=\"=\">" "<operands>" Operand Operand "</operands>" "</BinaryOp>"                                                                                                                                                                                                              -> Operand                {cons("Equal")}
    "<BinaryOp" "operator=\"&lt;&gt;\">" "<operands>" Operand Operand "</operands>" "</BinaryOp>"                                                                                                                                                                                                       -> Operand                {cons("Different")}
    IdExpression                                                                                                                                                                                                                                                                                        -> Operand                {cons("IdExpressionOp")}
    "<Last>" "<variable>" "<ConstVarRef" "name=\"" PragmaId "\"/>" "</variable>" "</Last>"                                                                                                                                                                                                              -> Operand                {cons("LastVariable")}
    "<ConstValue" "value=\"" Value "\"/>"                                                                                                                                                                                                                                                               -> Operand                {cons("ConstValue")}
    "<CallExpression>" CallExpressionOperator CallParameters "</CallExpression>"                                                                                                                                                                                                                        -> Operand                {cons("CallExpression")}
    "<CaseOp" "name=\"" PragmaId "\">" Switch Cases "</CaseOp>"                                                                                                                                                                                                                                         -> Operand                {cons("CaseOp")}
    "<IfThenElseOp" "name=\"" PragmaId "\">" If Then Else "</IfThenElseOp>"                                                                                                                                                                                                                             -> Operand                {cons("IfThenElseOp")}
    "<operator>" "<OpCall" "name=\"" INT "\">" "<operator>" "<OperatorRef" "name=\"" PragmaId "\"/>" "</operator>" "</OpCall>" "</operator>"                                                                                                                                                            -> CallExpressionOperator {cons("CallExpressionOperator")}
    "<callParameters>" IdExpression* "</callParameters>"                                                                                                                                                                                                                                                -> CallParameters         {cons("CallParameters")}
    "<switch>" IdExpression "</switch>"                                                                                                                                                                                                                                                                 -> Switch                 {cons("Switch")}
    "<cases>" Case* "</cases>"                                                                                                                                                                                                                                                                          -> Cases                  {cons("Cases")}
    "<Case" "pattern=\"" PragmaId "\">" "<flow>" IdExpression "</flow>" "</Case>"                                                                                                                                                                                                                       -> Case                   {cons("Case")}
    "<IdExpression>" "<path>" "<ConstVarRef" "name=\"" PragmaId "\"/>" "</path>" "</IdExpression>"                                                                                                                                                                                                      -> IdExpression           {cons("IdExpression")}
    "<if>" IdExpression "</if>"                                                                                                                                                                                                                                                                         -> If                     {cons("If")}
    "<then>" ListExpression "</then>"                                                                                                                                                                                                                                                                   -> Then                   {cons("Then")}
    "<else>" ListExpression "</else>"                                                                                                                                                                                                                                                                   -> Else                   {cons("Else")}
    "<ListExpression>" "<items>" IdExpression "</items>" "</ListExpression>"                                                                                                                                                                                                                            -> ListExpression         {cons("ListExpression")}

  context-free syntax
    CONTENTCOMPLETE -> Boolean                {cons("COMPLETION-Boolean")}
    CONTENTCOMPLETE -> Event                  {cons("COMPLETION-Event")}
    CONTENTCOMPLETE -> Operand                {cons("COMPLETION-Operand")}
    CONTENTCOMPLETE -> CallExpressionOperator {cons("COMPLETION-CallExpressionOperator")}
    CONTENTCOMPLETE -> CallParameters         {cons("COMPLETION-CallParameters")}
    CONTENTCOMPLETE -> Switch                 {cons("COMPLETION-Switch")}
    CONTENTCOMPLETE -> Cases                  {cons("COMPLETION-Cases")}
    CONTENTCOMPLETE -> Case                   {cons("COMPLETION-Case")}
    CONTENTCOMPLETE -> IdExpression           {cons("COMPLETION-IdExpression")}
    CONTENTCOMPLETE -> If                     {cons("COMPLETION-If")}
    CONTENTCOMPLETE -> Then                   {cons("COMPLETION-Then")}
    CONTENTCOMPLETE -> Else                   {cons("COMPLETION-Else")}
    CONTENTCOMPLETE -> ListExpression         {cons("COMPLETION-ListExpression")}