module src-gen/pp/Assumption-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/Assumption-sig


imports
  src-gen/signatures/Common-sig
  src-gen/signatures/Operand-sig


imports
  src-gen/pp/Common-pp
  src-gen/pp/Operand-pp


strategies
  prettyprint-example =
    prettyprint-Assumption

  prettyprint-example =
    prettyprint-Pragmas

  prettyprint-Assumption :
    Assumption(t1__, t2__, t3__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ S("<Assertion kind=\"assume\" name=\"A_")
                                        , t1__'
                                        , S("\">")
                                        ]
                                      )
                                    , t4__'
                                    , t2__'
                                    , t5__'
                                    , t3__'
                                    , H(
                                        [SOpt(HS(), "0")]
                                      , [S("</Assertion>")]
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-PragmaId)> t1__
    with t4__' := <pp-indent(|"2")> [S("<definition>")]
    with t2__' := <pp-indent(|"4")> [<pp-one-Z(prettyprint-Operand)> t2__]
    with t5__' := <pp-indent(|"2")> [S("</definition>")]
    with t3__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Pragmas)> t3__]

  is-Assumption =
    ?Assumption(_, _, _)

  prettyprint-Pragmas :
    pragma(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("<pragmas>")]
                      )
                    , t1__'
                    , H(
                        [SOpt(HS(), "0")]
                      , [S("</pragmas>")]
                      )
                    ]
    with t1__' := <pp-indent(|"2")> [ S("<ed:Assertion oid=\"!ed/assume/")
                                    , <pp-one-Z(prettyprint-PragmaId)> t1__
                                    , S("\"/>")
                                    ]

  is-Pragmas =
    ?pragma(_)

  is-Assumption =
    fail

  is-Pragmas =
    fail