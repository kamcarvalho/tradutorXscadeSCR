
regular tree grammar
  start Start
  productions
    ListStarOfProperty0              -> ListPlusOfProperty0
    ListStarOfProperty0              -> <nil>()
    ListStarOfProperty0              -> <conc>(ListStarOfProperty0,ListStarOfProperty0)
    ListPlusOfProperty0              -> <conc>(ListStarOfProperty0,ListPlusOfProperty0)
    ListPlusOfProperty0              -> <conc>(ListPlusOfProperty0,ListStarOfProperty0)
    ListPlusOfProperty0              -> <conc>(ListPlusOfProperty0,ListPlusOfProperty0)
    ListPlusOfProperty0              -> <cons>(Property,ListStarOfProperty0)
    ListStarOfDefinition0            -> ListPlusOfDefinition0
    ListStarOfDefinition0            -> <nil>()
    ListStarOfDefinition0            -> <conc>(ListStarOfDefinition0,ListStarOfDefinition0)
    ListPlusOfDefinition0            -> <conc>(ListStarOfDefinition0,ListPlusOfDefinition0)
    ListPlusOfDefinition0            -> <conc>(ListPlusOfDefinition0,ListStarOfDefinition0)
    ListPlusOfDefinition0            -> <conc>(ListPlusOfDefinition0,ListPlusOfDefinition0)
    ListPlusOfDefinition0            -> <cons>(Definition,ListStarOfDefinition0)
    ListStarOfOperator0              -> ListPlusOfOperator0
    ListStarOfOperator0              -> <nil>()
    ListStarOfOperator0              -> <conc>(ListStarOfOperator0,ListStarOfOperator0)
    ListPlusOfOperator0              -> <conc>(ListStarOfOperator0,ListPlusOfOperator0)
    ListPlusOfOperator0              -> <conc>(ListPlusOfOperator0,ListStarOfOperator0)
    ListPlusOfOperator0              -> <conc>(ListPlusOfOperator0,ListPlusOfOperator0)
    ListPlusOfOperator0              -> <cons>(Operator,ListStarOfOperator0)
    ListStarOfConstant0              -> ListPlusOfConstant0
    ListStarOfConstant0              -> <nil>()
    ListStarOfConstant0              -> <conc>(ListStarOfConstant0,ListStarOfConstant0)
    ListPlusOfConstant0              -> <conc>(ListStarOfConstant0,ListPlusOfConstant0)
    ListPlusOfConstant0              -> <conc>(ListPlusOfConstant0,ListStarOfConstant0)
    ListPlusOfConstant0              -> <conc>(ListPlusOfConstant0,ListPlusOfConstant0)
    ListPlusOfConstant0              -> <cons>(Constant,ListStarOfConstant0)
    ListStarOfType0                  -> ListPlusOfType0
    ListStarOfType0                  -> <nil>()
    ListStarOfType0                  -> <conc>(ListStarOfType0,ListStarOfType0)
    ListPlusOfType0                  -> <conc>(ListStarOfType0,ListPlusOfType0)
    ListPlusOfType0                  -> <conc>(ListPlusOfType0,ListStarOfType0)
    ListPlusOfType0                  -> <conc>(ListPlusOfType0,ListPlusOfType0)
    ListPlusOfType0                  -> <cons>(Type,ListStarOfType0)
    ListStarOfFlowTE0                -> ListPlusOfFlowTE0
    ListStarOfFlowTE0                -> <nil>()
    ListStarOfFlowTE0                -> <conc>(ListStarOfFlowTE0,ListStarOfFlowTE0)
    ListPlusOfFlowTE0                -> <conc>(ListStarOfFlowTE0,ListPlusOfFlowTE0)
    ListPlusOfFlowTE0                -> <conc>(ListPlusOfFlowTE0,ListStarOfFlowTE0)
    ListPlusOfFlowTE0                -> <conc>(ListPlusOfFlowTE0,ListPlusOfFlowTE0)
    ListPlusOfFlowTE0                -> <cons>(FlowTE,ListStarOfFlowTE0)
    ListStarOfAssumptionOrAssertion0 -> ListPlusOfAssumptionOrAssertion0
    ListStarOfAssumptionOrAssertion0 -> <nil>()
    ListStarOfAssumptionOrAssertion0 -> <conc>(ListStarOfAssumptionOrAssertion0,ListStarOfAssumptionOrAssertion0)
    ListPlusOfAssumptionOrAssertion0 -> <conc>(ListStarOfAssumptionOrAssertion0,ListPlusOfAssumptionOrAssertion0)
    ListPlusOfAssumptionOrAssertion0 -> <conc>(ListPlusOfAssumptionOrAssertion0,ListStarOfAssumptionOrAssertion0)
    ListPlusOfAssumptionOrAssertion0 -> <conc>(ListPlusOfAssumptionOrAssertion0,ListPlusOfAssumptionOrAssertion0)
    ListPlusOfAssumptionOrAssertion0 -> <cons>(AssumptionOrAssertion,ListStarOfAssumptionOrAssertion0)
    ListStarOfEquation0              -> ListPlusOfEquation0
    ListStarOfEquation0              -> <nil>()
    ListStarOfEquation0              -> <conc>(ListStarOfEquation0,ListStarOfEquation0)
    ListPlusOfEquation0              -> <conc>(ListStarOfEquation0,ListPlusOfEquation0)
    ListPlusOfEquation0              -> <conc>(ListPlusOfEquation0,ListStarOfEquation0)
    ListPlusOfEquation0              -> <conc>(ListPlusOfEquation0,ListPlusOfEquation0)
    ListPlusOfEquation0              -> <cons>(Equation,ListStarOfEquation0)
    ListStarOfVariable0              -> ListPlusOfVariable0
    ListStarOfVariable0              -> <nil>()
    ListStarOfVariable0              -> <conc>(ListStarOfVariable0,ListStarOfVariable0)
    ListPlusOfVariable0              -> <conc>(ListStarOfVariable0,ListPlusOfVariable0)
    ListPlusOfVariable0              -> <conc>(ListPlusOfVariable0,ListStarOfVariable0)
    ListPlusOfVariable0              -> <conc>(ListPlusOfVariable0,ListPlusOfVariable0)
    ListPlusOfVariable0              -> <cons>(Variable,ListStarOfVariable0)
    ListStarOfCase0                  -> ListPlusOfCase0
    ListStarOfCase0                  -> <nil>()
    ListStarOfCase0                  -> <conc>(ListStarOfCase0,ListStarOfCase0)
    ListPlusOfCase0                  -> <conc>(ListStarOfCase0,ListPlusOfCase0)
    ListPlusOfCase0                  -> <conc>(ListPlusOfCase0,ListStarOfCase0)
    ListPlusOfCase0                  -> <conc>(ListPlusOfCase0,ListPlusOfCase0)
    ListPlusOfCase0                  -> <cons>(Case,ListStarOfCase0)
    ListStarOfIdExpression0          -> ListPlusOfIdExpression0
    ListStarOfIdExpression0          -> <nil>()
    ListStarOfIdExpression0          -> <conc>(ListStarOfIdExpression0,ListStarOfIdExpression0)
    ListPlusOfIdExpression0          -> <conc>(ListStarOfIdExpression0,ListPlusOfIdExpression0)
    ListPlusOfIdExpression0          -> <conc>(ListPlusOfIdExpression0,ListStarOfIdExpression0)
    ListPlusOfIdExpression0          -> <conc>(ListPlusOfIdExpression0,ListPlusOfIdExpression0)
    ListPlusOfIdExpression0          -> <cons>(IdExpression,ListStarOfIdExpression0)
    ListStarOfOperand0               -> ListPlusOfOperand0
    ListStarOfOperand0               -> <nil>()
    ListStarOfOperand0               -> <conc>(ListStarOfOperand0,ListStarOfOperand0)
    ListPlusOfOperand0               -> <conc>(ListStarOfOperand0,ListPlusOfOperand0)
    ListPlusOfOperand0               -> <conc>(ListPlusOfOperand0,ListStarOfOperand0)
    ListPlusOfOperand0               -> <conc>(ListPlusOfOperand0,ListPlusOfOperand0)
    ListPlusOfOperand0               -> <cons>(Operand,ListStarOfOperand0)
    ListStarOfLast0                  -> ListPlusOfLast0
    ListStarOfLast0                  -> <nil>()
    ListStarOfLast0                  -> <conc>(ListStarOfLast0,ListStarOfLast0)
    ListPlusOfLast0                  -> <conc>(ListStarOfLast0,ListPlusOfLast0)
    ListPlusOfLast0                  -> <conc>(ListPlusOfLast0,ListStarOfLast0)
    ListPlusOfLast0                  -> <conc>(ListPlusOfLast0,ListPlusOfLast0)
    ListPlusOfLast0                  -> <cons>(Last,ListStarOfLast0)
    ListStarOfEnumValue0             -> ListPlusOfEnumValue0
    ListStarOfEnumValue0             -> <nil>()
    ListStarOfEnumValue0             -> <conc>(ListStarOfEnumValue0,ListStarOfEnumValue0)
    ListPlusOfEnumValue0             -> <conc>(ListStarOfEnumValue0,ListPlusOfEnumValue0)
    ListPlusOfEnumValue0             -> <conc>(ListPlusOfEnumValue0,ListStarOfEnumValue0)
    ListPlusOfEnumValue0             -> <conc>(ListPlusOfEnumValue0,ListPlusOfEnumValue0)
    ListPlusOfEnumValue0             -> <cons>(EnumValue,ListStarOfEnumValue0)
    INT_STRING_Booleano_Float0       -> <string>
    ListStarOfInsideComment0         -> <string>
    ListPlusOfInsideComment0         -> <string>
    INT_Booleano0                    -> <string>
    Lit_Lit0                         -> <string>
    OptLit0                          -> <string>
    Lit_Lit_Lit0                     -> <string>
    MVAR_CVAR_MCVAR_TVAR_Time_DUR0   -> <string>
    Start                            -> Main(Package)
    Start                            -> COMPLETION-Start(CONTENTCOMPLETE)
    Property                         -> COMPLETION-Property(CONTENTCOMPLETE)
    Definition                       -> COMPLETION-Definition(CONTENTCOMPLETE)
    Start                            -> Declare(ID,Type)
    Type                             -> Type(ID)
    Property                         -> Property(ID,Type)
    Definition                       -> Entity(ID,ListStarOfProperty0)
    Start                            -> Module(ID,ListStarOfDefinition0)
    Declarations                     -> COMPLETION-Declarations(CONTENTCOMPLETE)
    Package                          -> COMPLETION-Package(CONTENTCOMPLETE)
    Pragmas                          -> Pragmas(PragmaId,PragmaId,PragmaId,PragmaId)
    Declarations                     -> Declarations(ListStarOfType0,ListStarOfConstant0,ListStarOfOperator0)
    Package                          -> Package(PragmaId,Declarations,Pragmas)
    FlowTE                           -> COMPLETION-FlowTE(CONTENTCOMPLETE)
    PresentationElements             -> COMPLETION-PresentationElements(CONTENTCOMPLETE)
    TextDiagram                      -> COMPLETION-TextDiagram(CONTENTCOMPLETE)
    Diagrams                         -> COMPLETION-Diagrams(CONTENTCOMPLETE)
    EdOperator                       -> COMPLETION-EdOperator(CONTENTCOMPLETE)
    AssumptionOrAssertion            -> COMPLETION-AssumptionOrAssertion(CONTENTCOMPLETE)
    Data                             -> COMPLETION-Data(CONTENTCOMPLETE)
    Locals                           -> COMPLETION-Locals(CONTENTCOMPLETE)
    Outputs                          -> COMPLETION-Outputs(CONTENTCOMPLETE)
    Inputs                           -> COMPLETION-Inputs(CONTENTCOMPLETE)
    Operator                         -> COMPLETION-Operator(CONTENTCOMPLETE)
    FlowTE                           -> FlowTE2(PresentableId)
    FlowTE                           -> FlowTE(PresentableId)
    PresentationElements             -> PresentationElements(ListStarOfFlowTE0)
    TextDiagram                      -> TextDiagram2(PragmaId,PragmaId,PresentationElements)
    TextDiagram                      -> TextDiagram(PragmaId,PragmaId,PresentationElements)
    Diagrams                         -> Diagrams(TextDiagram)
    EdOperator                       -> EdOperator2(PragmaId,Diagrams)
    EdOperator                       -> EdOperator(PragmaId,Diagrams)
    Pragmas                          -> Pragmas(EdOperator)
    AssumptionOrAssertion            -> AssertionOperator(Assertion)
    AssumptionOrAssertion            -> AssumptionOperator(Assumption)
    Data                             -> Data(ListStarOfEquation0,ListStarOfAssumptionOrAssertion0)
    Locals                           -> Locals(ListStarOfVariable0)
    Outputs                          -> Outputs(ListStarOfVariable0)
    Inputs                           -> Inputs(ListStarOfVariable0)
    Operator                         -> MainOperator(OPKIND,PragmaId,Inputs,Outputs,Locals,Data,Pragmas)
    Operator                         -> ModeClass(OPKIND,MCVAR,Inputs,Outputs,Locals,Data,Pragmas)
    Operator                         -> Term2(OPKIND,DUR,Inputs,Outputs,Locals,Data,Pragmas)
    Operator                         -> Term(OPKIND,TVAR,Inputs,Outputs,Locals,Data,Pragmas)
    Operator                         -> Controlled(OPKIND,CVAR,Inputs,Outputs,Locals,Data,Pragmas)
    Operator                         -> Monitored(OPKIND,MVAR,Inputs,Outputs,Locals,Data,Pragmas)
    Assertion                        -> COMPLETION-Assertion(CONTENTCOMPLETE)
    Pragmas                          -> pragma2(PragmaId)
    Pragmas                          -> pragma1(PragmaId,PragmaId)
    Pragmas                          -> pragma(PragmaId,PragmaId)
    Assertion                        -> Assertion11(Operand,Pragmas)
    Assertion                        -> Assertion10(Operand,Pragmas)
    Assertion                        -> Assertion9(Operand,Pragmas)
    Assertion                        -> Assertion8(Operand,Pragmas)
    Assertion                        -> Assertion7(Operand,Pragmas)
    Assertion                        -> Assertion6(Operand,Pragmas)
    Assertion                        -> Assertion5(Operand,Pragmas)
    Assertion                        -> Assertion4(Operand,Pragmas)
    Assertion                        -> Assertion3(Operand,Pragmas)
    Assertion                        -> Assertion2(Operand,Pragmas)
    Assertion                        -> Assertion(PragmaId,Operand,Pragmas)
    Pragmas                          -> COMPLETION-Pragmas(CONTENTCOMPLETE)
    Assumption                       -> COMPLETION-Assumption(CONTENTCOMPLETE)
    Pragmas                          -> pragma(PragmaId)
    Assumption                       -> Assumption(PragmaId,Operand,Pragmas)
    Right                            -> COMPLETION-Right(CONTENTCOMPLETE)
    Lefts                            -> COMPLETION-Lefts(CONTENTCOMPLETE)
    Equation                         -> COMPLETION-Equation(CONTENTCOMPLETE)
    Pragma                           -> Pragma3()
    Pragma                           -> Pragma2(PragmaId,PragmaId,PragmaId,INT)
    Pragma                           -> Pragma1(PragmaId,PragmaId)
    Pragma                           -> Pragma(PragmaId,PragmaId)
    Right                            -> Right(Operand)
    Lefts                            -> Lefts(PragmaId)
    Equation                         -> Equation(Lefts,Right,Pragma)
    ListExpression                   -> COMPLETION-ListExpression(CONTENTCOMPLETE)
    Else                             -> COMPLETION-Else(CONTENTCOMPLETE)
    Then                             -> COMPLETION-Then(CONTENTCOMPLETE)
    If                               -> COMPLETION-If(CONTENTCOMPLETE)
    IdExpression                     -> COMPLETION-IdExpression(CONTENTCOMPLETE)
    Case                             -> COMPLETION-Case(CONTENTCOMPLETE)
    Cases                            -> COMPLETION-Cases(CONTENTCOMPLETE)
    Switch                           -> COMPLETION-Switch(CONTENTCOMPLETE)
    CallParameters                   -> COMPLETION-CallParameters(CONTENTCOMPLETE)
    CallExpressionOperator           -> COMPLETION-CallExpressionOperator(CONTENTCOMPLETE)
    Operand                          -> COMPLETION-Operand(CONTENTCOMPLETE)
    Event                            -> COMPLETION-Event(CONTENTCOMPLETE)
    Boolean                          -> COMPLETION-Boolean(CONTENTCOMPLETE)
    ListExpression                   -> ListExpression(IdExpression)
    Else                             -> Else(ListExpression)
    Then                             -> Then(ListExpression)
    If                               -> If(IdExpression)
    IdExpression                     -> IdExpression(PragmaId)
    Case                             -> Case(PragmaId,IdExpression)
    Cases                            -> Cases(ListStarOfCase0)
    Switch                           -> Switch(IdExpression)
    CallParameters                   -> CallParameters(ListStarOfIdExpression0)
    CallExpressionOperator           -> CallExpressionOperator(INT,PragmaId)
    Operand                          -> IfThenElseOp(PragmaId,If,Then,Else)
    Operand                          -> CaseOp(PragmaId,Switch,Cases)
    Operand                          -> CallExpression(CallExpressionOperator,CallParameters)
    Operand                          -> ConstValue(Value)
    Operand                          -> LastVariable(PragmaId)
    Operand                          -> IdExpressionOp(IdExpression)
    Operand                          -> Different(Operand,Operand)
    Operand                          -> Equal(Operand,Operand)
    Operand                          -> Subtraction(Operand,Operand)
    Operand                          -> Addiction(Operand,Operand)
    Operand                          -> LessThanOrEqual(Operand,Operand)
    Operand                          -> LessThan(Operand,Operand)
    Operand                          -> GreaterThanOrEqual(Operand,Operand)
    Operand                          -> GreaterThan(Operand,Operand)
    Operand                          -> NotOperand(Operand)
    Operand                          -> Xor(Operand,Operand)
    Operand                          -> Negative(Operand)
    Operand                          -> Imply(Operand,Operand)
    Operand                          -> Or(ListStarOfOperand0)
    Operand                          -> And(ListStarOfOperand0)
    Operand                          -> Event3(Operand,Operand)
    Operand                          -> OrEvent(Event,Operand)
    Operand                          -> AndEvent(Event,Operand)
    Operand                          -> EventOp(Event)
    Event                            -> Event(Operand,Operand)
    Boolean                          -> True()
    Pragma                           -> COMPLETION-Pragma(CONTENTCOMPLETE)
    Last                             -> COMPLETION-Last(CONTENTCOMPLETE)
    Variable                         -> COMPLETION-Variable(CONTENTCOMPLETE)
    Pragma                           -> Pragma4(PragmaId,PragmaId)
    Pragma                           -> Pragma3(PragmaId,PragmaId,INT)
    Pragma                           -> Pragma2(PragmaId,PragmaId,PragmaId)
    Pragma                           -> Pragma1(PragmaId,PragmaId)
    Last                             -> LastConstruct(Value)
    Last                             -> LastIdExpression(PragmaId)
    Last                             -> LastInt(Value)
    Type                             -> Type(NamedType)
    Variable                         -> GenericVariable(PragmaId,Type,ListStarOfLast0,Pragma)
    Variable                         -> ModeClassVariable(MCVAR,Type,ListStarOfLast0,Pragma)
    Variable                         -> TermVariable2(DUR,Type,ListStarOfLast0,Pragma)
    Variable                         -> TermVariable(TVAR,Type,ListStarOfLast0,Pragma)
    Variable                         -> ControlledVariable(CVAR,Type,ListStarOfLast0,Pragma)
    Variable                         -> MonitoredVariable2(Time,Type,ListStarOfLast0,Pragma)
    Variable                         -> MonitoredVariable(MVAR,Type,ListStarOfLast0,Pragma)
    Constant                         -> COMPLETION-Constant(CONTENTCOMPLETE)
    Constant                         -> Constant2(ID,NamedType,Value,ID)
    Constant                         -> Constant(ID,NamedType,Value,ID)
    Type                             -> COMPLETION-Type(CONTENTCOMPLETE)
    Type                             -> Type(PragmaId,NamedType,PragmaId)
    EnumValue                        -> COMPLETION-EnumValue(CONTENTCOMPLETE)
    NamedType                        -> COMPLETION-NamedType(CONTENTCOMPLETE)
    EnumValue                        -> EnumValue(PragmaId,PragmaId)
    NamedType                        -> Enum(ListStarOfEnumValue0)
    NamedType                        -> CustomType(PragmaId,IgnoreSpace)
    NamedType                        -> Real()
    NamedType                        -> Bool()
    NamedType                        -> Int()
    EOF                              -> <string>
    BinaryName                       -> <string>
    Value                            -> <string>
    PresentableId                    -> <string>
    IgnoreSpace                      -> <string>
    PragmaId                         -> <string>
    NewLineEOF                       -> <string>
    InsideComment                    -> <string>
    CommentChar                      -> <string>
    BackSlashChar                    -> <string>
    StringChar                       -> <string>
    TYPE                             -> <string>
    Float                            -> <string>
    Booleano                         -> <string>
    STRING                           -> <string>
    Number                           -> <string>
    INT                              -> <string>
    OPKIND                           -> <string>
    OPNAME                           -> <string>
    TVAR                             -> <string>
    MCVAR                            -> <string>
    CVAR                             -> <string>
    DUR                              -> <string>
    Time                             -> <string>
    MVAR                             -> <string>
    ID                               -> <string>
