Module("Entity.main.packed",Imports([Import("Entity.main"),Import("Entity-Colorer"),Import("Entity-Completions"),Import("Entity-Folding"),Import("Entity-Menus"),Import("Entity-Refactorings"),Import("Entity-References"),Import("Entity-Syntax"),Import("Entity-Views"),Import("Entity-Colorer.generated"),Import("src-gen/completions/Entity-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Package-esv"),Import("src-gen/completions/Java-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Type-esv"),Import("src-gen/completions/Constant-esv"),Import("src-gen/completions/Operator-esv"),Import("src-gen/completions/Assumption-esv"),Import("src-gen/completions/Assertion-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/NamedType-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/NamedType-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Variable-esv"),Import("src-gen/completions/Equation-esv"),Import("src-gen/completions/Assumption-esv"),Import("src-gen/completions/Assertion-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/NamedType-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Operand-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Operand-esv"),Import("src-gen/completions/Common-esv"),Import("src-gen/completions/Operand-esv"),Import("src-gen/completions/Common-esv"),Import("Entity-Folding.generated"),Import("Entity-Refactorings.generated"),Import("Entity-References.generated"),Import("Entity-Syntax.generated")]),[Language(" General properties",[LanguageName("Entity"),LanguageId("Kamila"),Extends(Values(["Root"])),Description(String("\"Spoofax-generated editor for the Entity language\"")),URL("http://strategoxt.org"),Extensions(Values(["ent","xscade"])),Table("include/Entity.tbl"),StartSymbols([Sort("Start")]),SemanticProvider("include/entity.ctree"),SemanticProvider("include/entity-java.jar"),SemanticObserver(Strategy("editor-analyze"),[MultiFile]),OnSave(Strategy("editor-save"),None),JvmOpts([ServerOpt("-server"),XssOpt("-Xss8m"),XmxOpt("-Xmx1024m")])]),Colorer(" Default, token-based highlighting",[ColorRule(Token(TK_KEYWORD),Attribute(ColorRGB("127","0","85"),NoColor,BOLD)),ColorRule(Token(TK_IDENTIFIER),AttributeRef("default")),ColorRule(Token(TK_STRING),AttributeRef("blue")),ColorRule(Token(TK_NUMBER),AttributeRef("darkgreen")),ColorRule(Token(TK_VAR),Attribute(ColorRGB("255","0","100"),NoColor,ITALIC)),ColorRule(Token(TK_OPERATOR),Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorRule(Token(TK_LAYOUT),Attribute(ColorRGB("63","127","95"),NoColor,ITALIC))]),Colorer(" System colors",[ColorDef("darkred",Attribute(ColorRGB("128","0","0"),NoColor,NORMAL)),ColorDef("red",Attribute(ColorRGB("255","0","0"),NoColor,NORMAL)),ColorDef("darkgreen",Attribute(ColorRGB("0","128","0"),NoColor,NORMAL)),ColorDef("green",Attribute(ColorRGB("0","255","0"),NoColor,NORMAL)),ColorDef("darkblue",Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorDef("blue",Attribute(ColorRGB("0","0","255"),NoColor,NORMAL)),ColorDef("cyan",Attribute(ColorRGB("0","255","255"),NoColor,NORMAL)),ColorDef("magenta",Attribute(ColorRGB("255","0","255"),NoColor,NORMAL)),ColorDef("yellow",Attribute(ColorRGB("255","255","0"),NoColor,NORMAL)),ColorDef("white",Attribute(ColorRGB("255","255","255"),NoColor,NORMAL)),ColorDef("black",Attribute(ColorRGB("0","0","0"),NoColor,NORMAL)),ColorDef("gray",Attribute(ColorRGB("128","128","128"),NoColor,NORMAL)),ColorDef("grey",AttributeRef("gray")),ColorDef("orange",Attribute(ColorRGB("255","165","0"),NoColor,NORMAL)),ColorDef("pink",Attribute(ColorRGB("255","105","180"),NoColor,NORMAL)),ColorDef("brown",Attribute(ColorRGB("139","69","19"),NoColor,NORMAL)),ColorDef("default",Attribute(ColorDefault,NoColor,NORMAL))]),Completions("",[CompletionTemplateEx([Sort("Start")],NoCompletionPrefix,[String("\"module \""),Placeholder("<m>")],[Blank]),CompletionTemplateEx([Sort("Definition")],NoCompletionPrefix,[String("\"entity \""),Placeholder("<e>"),String("\" {\""),Cursor,String("\"}\"")],[Blank]),CompletionTemplateEx([Sort("Property")],CompletionPrefix(String("\"property : Type\"")),[Placeholder("<x>"),String("\" : \""),Placeholder("<T>")],[Blank])]),Completions("",[CompletionProposer([],Strategy("editor-complete")),CompletionTrigger(String("\":\""),None)]),Completions("",[CompletionTemplateEx([Sort("Package")],CompletionPrefix(String("\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <File xmlns=\\\"http://www.esterel-technologies.com/ns/scade/3\\\" xmlns:ed=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\" xmlns:kcg=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/codegen/1\\\"> <declarations> <Package name=\\\"PragmaId\\\"> Declarations Pragmas </Package> </declarations> </File>\"")),[String("\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\\t\\t<File xmlns=\\\"http://www.esterel-technologies.com/ns/scade/3\\\" xmlns:ed=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\" xmlns:kcg=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/codegen/1\\\">\\n\\t\\t\\t<declarations>\\n\\t\\t\\t\\t<Package name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\\t\\t\\t\\t\""),PlaceholderWithSort("<Declarations:","Declarations"),String("\"\\n\\t\\t\\t\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n\\t\\t\\t\\t</Package>\\n\\t\\t\\t</declarations>\\n\\t\\t</File>\"")],[Blank]),CompletionTemplateEx([Sort("Declarations")],CompletionPrefix(String("\"<declarations> </declarations>\"")),[String("\"<declarations>\\n\\t\""),Cursor,String("\"\\n</declarations>\"")],[Blank]),CompletionTemplateEx([Sort("Pragmas")],CompletionPrefix(String("\" <pragmas> <ed:Package oid=\\\"!ed/package/PragmaId\\\" xmlns=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\"> <diagrams> <TreeDiagram landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/package/constants/PragmaId\\\" blockKind=\\\"constants\\\" /> <TreeDiagram landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/package/types/PragmaId\\\" blockKind=\\\"types\\\" /> <TreeDiagram landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/package/sensors/PragmaId\\\" blockKind=\\\"sensors\\\"/> </diagrams> </ed:Package> </pragmas>\"")),[String("\"\\t<pragmas>\\n\\t<ed:Package oid=\\\"!ed/package/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" xmlns=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\">\\n\\t\\t<diagrams>\\n\\t\\t\\t<TreeDiagram landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\"  oid=\\\"!ed/package/constants/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" blockKind=\\\"constants\\\" />\\n\\t\\t\\t<TreeDiagram landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/package/types/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" blockKind=\\\"types\\\" />\\n\\t\\t\\t<TreeDiagram landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/package/sensors/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" blockKind=\\\"sensors\\\"/>\\n\\t\\t</diagrams>\\n\\t</ed:Package>\\n</pragmas>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Type")],CompletionPrefix(String("\"<Type name=\\\"PragmaId\\\"> <definition> NamedType </definition> <pragmas> <ed:Type oid=\\\"!ed/type/PragmaId\\\" /> </pragmas> </Type>\"")),[String("\"<Type name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<NamedType:","NamedType"),String("\"\\n\\t</definition>\\n\\t<pragmas>\\n\\t\\t<ed:Type oid=\\\"!ed/type/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" />\\n\\t</pragmas>\\n</Type>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("NamedType")],CompletionPrefix(String("\"<NamedType> <type> <TypeRef name=\\\"int\\\" /> </type> </NamedType>\"")),[String("\"<NamedType>\\n\\t<type>\\n\\t\\t<TypeRef name=\\\"int\\\" />\\n\\t</type>\\n</NamedType>\"")],[Blank]),CompletionTemplateEx([Sort("NamedType")],CompletionPrefix(String("\"<NamedType> <type> <TypeRef name=\\\"bool\\\" /> </type> </NamedType>\"")),[String("\"<NamedType>\\n\\t<type>\\n\\t\\t<TypeRef name=\\\"bool\\\" />\\n\\t</type>\\n</NamedType>\"")],[Blank]),CompletionTemplateEx([Sort("NamedType")],CompletionPrefix(String("\"<NamedType> <type> <TypeRef name=\\\"real\\\" /> </type> </NamedType>\"")),[String("\"<NamedType>\\n\\t<type>\\n\\t\\t<TypeRef name=\\\"real\\\" />\\n\\t</type>\\n</NamedType>\"")],[Blank]),CompletionTemplateEx([Sort("NamedType")],CompletionPrefix(String("\"<NamedType> <type> <TypeRef name=\\\"PragmaId\\\"IgnoreSpace/> </type> </NamedType> \"")),[String("\"<NamedType>\\n\\t<type>\\n\\t\\t<TypeRef name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"\""),PlaceholderWithSort("<IgnoreSpace:","IgnoreSpace"),String("\"/>\\n\\t</type>\\n</NamedType>\\n\"")],[Blank]),CompletionTemplateEx([Sort("NamedType")],CompletionPrefix(String("\"<Enum> <values> </values> </Enum>\"")),[String("\"<Enum>\\n\\t<values>\\n\\t\""),Cursor,String("\"\\n\\t</values>\\n</Enum>\"")],[Blank]),CompletionTemplateEx([Sort("EnumValue")],CompletionPrefix(String("\"<Value name=\\\"PragmaId\\\"> <pragmas> <ed:Value oid=\\\"!ed/enumValue/PragmaId\\\" /> </pragmas> </Value>\"")),[String("\"<Value name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t<pragmas>\\n\\t\\t<ed:Value oid=\\\"!ed/enumValue/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" />\\n\\t</pragmas>\\n</Value>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Constant")],CompletionPrefix(String("\"<Constant name=\\\"ID\\\"> <type> NamedType </type> <value> <ConstValue value=\\\"Value\\\"/> </value> <pragmas> <ed:Constant oid=\\\"!ed/Constant/ID\\\"/> </pragmas> </Constant>\"")),[String("\"<Constant name=\\\"\""),PlaceholderWithSort("<ID:","ID"),String("\"\\\">\\n\\t<type>\\n\\t\\t\""),PlaceholderWithSort("<NamedType:","NamedType"),String("\"\\n\\t</type>\\n\\t<value>\\n\\t\\t<ConstValue value=\\\"\""),PlaceholderWithSort("<Value:","Value"),String("\"\\\"/>\\n\\t</value>\\n\\t<pragmas>\\n\\t\\t<ed:Constant oid=\\\"!ed/Constant/\""),PlaceholderWithSort("<ID:","ID"),String("\"\\\"/>\\n\\t</pragmas>\\n</Constant>\"")],[Blank]),CompletionTemplateEx([Sort("Constant")],CompletionPrefix(String("\"<Constant name=\\\"ID\\\"> <type> NamedType </type> <value> <UnaryOp operator=\\\"-\\\"> <operand> <ConstValue value=\\\"Value\\\"/> </operand> </UnaryOp> </value> <pragmas> <ed:Constant oid=\\\"!ed/Constant/ID\\\"/> </pragmas> </Constant>\"")),[String("\"<Constant name=\\\"\""),PlaceholderWithSort("<ID:","ID"),String("\"\\\">\\n\\t<type>\\n\\t\\t\""),PlaceholderWithSort("<NamedType:","NamedType"),String("\"\\n\\t</type>\\n\\t<value>\\n\\t\\t<UnaryOp operator=\\\"-\\\">\\n\\t\\t\\t<operand>\\n\\t\\t\\t\\t<ConstValue value=\\\"\""),PlaceholderWithSort("<Value:","Value"),String("\"\\\"/>\\n\\t\\t\\t</operand>\\n\\t\\t</UnaryOp>\\n\\t</value>\\n\\t<pragmas>\\n\\t\\t<ed:Constant oid=\\\"!ed/Constant/\""),PlaceholderWithSort("<ID:","ID"),String("\"\\\"/>\\n\\t</pragmas>\\n</Constant>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Operator")],CompletionPrefix(String("\"<Operator kind=\\\"OPKIND\\\" name=\\\"MVAR\\\"> Inputs Outputs Locals Data Pragmas </Operator>\"")),[String("\"<Operator kind=\\\"\""),PlaceholderWithSort("<OPKIND:","OPKIND"),String("\"\\\" name=\\\"\""),PlaceholderWithSort("<MVAR:","MVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Inputs:","Inputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Outputs:","Outputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Locals:","Locals"),String("\"\\n\\t\""),PlaceholderWithSort("<Data:","Data"),String("\"\\n\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Operator>\"")],[Blank]),CompletionTemplateEx([Sort("Operator")],CompletionPrefix(String("\"<Operator kind=\\\"OPKIND\\\" name=\\\"CVAR\\\"> Inputs Outputs Locals Data Pragmas </Operator>\"")),[String("\"<Operator kind=\\\"\""),PlaceholderWithSort("<OPKIND:","OPKIND"),String("\"\\\" name=\\\"\""),PlaceholderWithSort("<CVAR:","CVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Inputs:","Inputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Outputs:","Outputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Locals:","Locals"),String("\"\\n\\t\""),PlaceholderWithSort("<Data:","Data"),String("\"\\n\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Operator>\"")],[Blank]),CompletionTemplateEx([Sort("Operator")],CompletionPrefix(String("\"<Operator kind=\\\"OPKIND\\\" name=\\\"TVAR\\\"> Inputs Outputs Locals Data Pragmas </Operator>\"")),[String("\"<Operator kind=\\\"\""),PlaceholderWithSort("<OPKIND:","OPKIND"),String("\"\\\" name=\\\"\""),PlaceholderWithSort("<TVAR:","TVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Inputs:","Inputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Outputs:","Outputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Locals:","Locals"),String("\"\\n\\t\""),PlaceholderWithSort("<Data:","Data"),String("\"\\n\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Operator>\"")],[Blank]),CompletionTemplateEx([Sort("Operator")],CompletionPrefix(String("\"<Operator kind=\\\"OPKIND\\\" name=\\\"DUR\\\"> Inputs Outputs Locals Data Pragmas </Operator>\"")),[String("\"<Operator kind=\\\"\""),PlaceholderWithSort("<OPKIND:","OPKIND"),String("\"\\\" name=\\\"\""),PlaceholderWithSort("<DUR:","DUR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Inputs:","Inputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Outputs:","Outputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Locals:","Locals"),String("\"\\n\\t\""),PlaceholderWithSort("<Data:","Data"),String("\"\\n\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Operator>\"")],[Blank]),CompletionTemplateEx([Sort("Operator")],CompletionPrefix(String("\"<Operator kind=\\\"OPKIND\\\" name=\\\"MCVAR\\\"> Inputs Outputs Locals Data Pragmas </Operator>\"")),[String("\"<Operator kind=\\\"\""),PlaceholderWithSort("<OPKIND:","OPKIND"),String("\"\\\" name=\\\"\""),PlaceholderWithSort("<MCVAR:","MCVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Inputs:","Inputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Outputs:","Outputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Locals:","Locals"),String("\"\\n\\t\""),PlaceholderWithSort("<Data:","Data"),String("\"\\n\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Operator>\"")],[Blank]),CompletionTemplateEx([Sort("Operator")],CompletionPrefix(String("\"<Operator kind=\\\"OPKIND\\\" name=\\\"PragmaId\\\"> Inputs Outputs Locals Data Pragmas </Operator>\"")),[String("\"<Operator kind=\\\"\""),PlaceholderWithSort("<OPKIND:","OPKIND"),String("\"\\\" name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Inputs:","Inputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Outputs:","Outputs"),String("\"\\n\\t\""),PlaceholderWithSort("<Locals:","Locals"),String("\"\\n\\t\""),PlaceholderWithSort("<Data:","Data"),String("\"\\n\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Operator>\"")],[Blank]),CompletionTemplateEx([Sort("Inputs")],CompletionPrefix(String("\"<inputs> </inputs>\"")),[String("\"<inputs>\\n\\t\""),Cursor,String("\"\\n</inputs>\"")],[Blank]),CompletionTemplateEx([Sort("Outputs")],CompletionPrefix(String("\"<outputs> </outputs>\"")),[String("\"<outputs>\\n\\t\""),Cursor,String("\"\\n</outputs>\"")],[Blank]),CompletionTemplateEx([Sort("Locals")],CompletionPrefix(String("\"<locals> </locals>\"")),[String("\"<locals>\\n\\t\""),Cursor,String("\"\\n</locals>\"")],[Blank]),CompletionTemplateEx([Sort("Data")],CompletionPrefix(String("\"<data> </data>\"")),[String("\"<data>\\n\\t\""),Cursor,String("\"\\n</data>\"")],[Blank]),CompletionTemplateEx([Sort("Pragmas")],CompletionPrefix(String("\"<pragmas> EdOperator </pragmas>\"")),[String("\"<pragmas>\\n\\t\""),PlaceholderWithSort("<EdOperator:","EdOperator"),String("\"\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("EdOperator")],CompletionPrefix(String("\"<ed:Operator oid=\\\"!ed/MainOper/PragmaId\\\" xmlns=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\"> Diagrams </ed:Operator>\"")),[String("\"<ed:Operator oid=\\\"!ed/MainOper/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" xmlns=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\">\\n\\t\""),PlaceholderWithSort("<Diagrams:","Diagrams"),String("\"\\n</ed:Operator>\"")],[Blank]),CompletionTemplateEx([Sort("EdOperator")],CompletionPrefix(String("\"<ed:Operator oid=\\\"!ed/PragmaId\\\"> Diagrams </ed:Operator>\"")),[String("\"<ed:Operator oid=\\\"!ed/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Diagrams:","Diagrams"),String("\"\\n</ed:Operator>\"")],[Blank]),CompletionTemplateEx([Sort("Diagrams")],CompletionPrefix(String("\"<diagrams> TextDiagram </diagrams>\"")),[String("\"<diagrams>\\n\\t\""),PlaceholderWithSort("<TextDiagram:","TextDiagram"),String("\"\\n</diagrams>\"")],[Blank]),CompletionTemplateEx([Sort("TextDiagram")],CompletionPrefix(String("\"<TextDiagram name=\\\"PragmaId\\\" landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/Pragma/PragmaId\\\"> PresentationElements </TextDiagram>\"")),[String("\"<TextDiagram name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/Pragma/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<PresentationElements:","PresentationElements"),String("\"\\n</TextDiagram>\"")],[Blank]),CompletionTemplateEx([Sort("TextDiagram")],CompletionPrefix(String("\"<TextDiagram name=\\\"PragmaId\\\" landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/TextDiagram/PragmaId\\\"> PresentationElements </TextDiagram>\"")),[String("\"<TextDiagram name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" landscape=\\\"true\\\" format=\\\"A4 (210 297)\\\" oid=\\\"!ed/TextDiagram/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<PresentationElements:","PresentationElements"),String("\"\\n</TextDiagram>\"")],[Blank]),CompletionTemplateEx([Sort("PresentationElements")],CompletionPrefix(String("\"<presentationElements> </presentationElements>\"")),[String("\"<presentationElements>\\n\\t\""),Cursor,String("\"\\n</presentationElements>\"")],[Blank]),CompletionTemplateEx([Sort("FlowTE")],CompletionPrefix(String("\"<FlowTE presentable=\\\"PresentableId\\\"/>\"")),[String("\"<FlowTE presentable=\\\"\""),PlaceholderWithSort("<PresentableId:","PresentableId"),String("\"\\\"/>\"")],[Blank]),CompletionTemplateEx([Sort("FlowTE")],CompletionPrefix(String("\"<FlowTE presentable=\\\"PresentableId\\\" />\"")),[String("\"<FlowTE presentable=\\\"\""),PlaceholderWithSort("<PresentableId:","PresentableId"),String("\"\\\" />\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Variable")],CompletionPrefix(String("\"<Variable name=\\\"MVAR\\\"> Type Pragma </Variable>\"")),[String("\"<Variable name=\\\"\""),PlaceholderWithSort("<MVAR:","MVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Type:","Type"),String("\"\\n\\t\""),Cursor,String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Variable>\"")],[Blank]),CompletionTemplateEx([Sort("Variable")],CompletionPrefix(String("\"<Variable name=\\\"Time\\\"> Type Pragma </Variable>\"")),[String("\"<Variable name=\\\"\""),PlaceholderWithSort("<Time:","Time"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Type:","Type"),String("\"\\n\\t\""),Cursor,String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Variable>\"")],[Blank]),CompletionTemplateEx([Sort("Variable")],CompletionPrefix(String("\"<Variable name=\\\"CVAR\\\"> Type Pragma </Variable>\"")),[String("\"<Variable name=\\\"\""),PlaceholderWithSort("<CVAR:","CVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Type:","Type"),String("\"\\n\\t\""),Cursor,String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Variable>\"")],[Blank]),CompletionTemplateEx([Sort("Variable")],CompletionPrefix(String("\"<Variable name=\\\"TVAR\\\"> Type Pragma </Variable>\"")),[String("\"<Variable name=\\\"\""),PlaceholderWithSort("<TVAR:","TVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Type:","Type"),String("\"\\n\\t\""),Cursor,String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Variable>\"")],[Blank]),CompletionTemplateEx([Sort("Variable")],CompletionPrefix(String("\"<Variable name=\\\"DUR\\\"> Type Pragma </Variable>\"")),[String("\"<Variable name=\\\"\""),PlaceholderWithSort("<DUR:","DUR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Type:","Type"),String("\"\\n\\t\""),Cursor,String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Variable>\"")],[Blank]),CompletionTemplateEx([Sort("Variable")],CompletionPrefix(String("\"<Variable name=\\\"MCVAR\\\"> Type Pragma </Variable>\"")),[String("\"<Variable name=\\\"\""),PlaceholderWithSort("<MCVAR:","MCVAR"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Type:","Type"),String("\"\\n\\t\""),Cursor,String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Variable>\"")],[Blank]),CompletionTemplateEx([Sort("Variable")],CompletionPrefix(String("\"<Variable name=\\\"PragmaId\\\"> Type Pragma </Variable>\"")),[String("\"<Variable name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Type:","Type"),String("\"\\n\\t\""),Cursor,String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Variable>\"")],[Blank]),CompletionTemplateEx([Sort("Type")],CompletionPrefix(String("\"<type> NamedType </type>\"")),[String("\"<type>\\n\\t\""),PlaceholderWithSort("<NamedType:","NamedType"),String("\"\\n</type>\"")],[Blank]),CompletionTemplateEx([Sort("Last")],CompletionPrefix(String("\"<last> <ConstValue value=\\\"Value\\\"/> </last>\"")),[String("\"<last>\\n\\t<ConstValue value=\\\"\""),PlaceholderWithSort("<Value:","Value"),String("\"\\\"/>\\n</last>\"")],[Blank]),CompletionTemplateEx([Sort("Last")],CompletionPrefix(String("\"<last> <IdExpression> <path> <ConstVarRef name=\\\"PragmaId\\\"/> </path> </IdExpression> </last>\"")),[String("\"<last>\\n\\t<IdExpression>\\n\\t\\t<path>\\n\\t\\t\\t<ConstVarRef name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n\\t\\t</path>\\n\\t</IdExpression>\\n</last>\"")],[Blank]),CompletionTemplateEx([Sort("Last")],CompletionPrefix(String("\"<last> <UnaryOp operator=\\\"-\\\"> <operand> <ConstValue value=\\\"Value\\\"/> </operand> </UnaryOp> </last>\"")),[String("\"<last>\\n\\t<UnaryOp operator=\\\"-\\\">\\n\\t\\t\\t<operand>\\n\\t\\t\\t\\t<ConstValue value=\\\"\""),PlaceholderWithSort("<Value:","Value"),String("\"\\\"/>\\n\\t\\t\\t</operand>\\n\\t</UnaryOp>\\n</last>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Variable oid=\\\"!ed/PragmaId/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Variable oid=\\\"!ed/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Variable oid=\\\"!ed/PragmaId/PragmaId/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Variable oid=\\\"!ed/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Variable oid=\\\"!ed/PragmaId/PragmaId/INT\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Variable oid=\\\"!ed/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<INT:","INT"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Variable oid=\\\"!ed/PragmaId/PragmaId\\\" /> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Variable oid=\\\"!ed/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\" />\\n</pragmas>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Equation")],CompletionPrefix(String("\"<Equation> Lefts Right Pragma </Equation>\"")),[String("\"<Equation>\\n\\t\""),PlaceholderWithSort("<Lefts:","Lefts"),String("\"\\n\\t\""),PlaceholderWithSort("<Right:","Right"),String("\"\\n\\t\""),PlaceholderWithSort("<Pragma:","Pragma"),String("\"\\n</Equation>\"")],[Blank]),CompletionTemplateEx([Sort("Lefts")],CompletionPrefix(String("\"<lefts> <VariableRef name=\\\"PragmaId\\\"/> </lefts>\"")),[String("\"<lefts>\\n\\t<VariableRef name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</lefts>\"")],[Blank]),CompletionTemplateEx([Sort("Right")],CompletionPrefix(String("\"<right> Operand </right>\"")),[String("\"<right>\\n\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n</right>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Equation oid=\\\"!ed/Expr/PragmaId/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Equation oid=\\\"!ed/Expr/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Equation oid=\\\"!ed/PragmaId/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Equation oid=\\\"!ed/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Equation oid=\\\"!ed/PragmaId/PragmaId/PragmaId/INT\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Equation oid=\\\"!ed/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<INT:","INT"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragma")],CompletionPrefix(String("\"<pragmas> <ed:Variable oid=\\\"!ed/tOverridden/IF/2\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Variable oid=\\\"!ed/tOverridden/IF/2\\\"/>\\n</pragmas>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Event")],CompletionPrefix(String("\"<NAryOp operator=\\\"and\\\"> <operands> <UnaryOp operator=\\\"not\\\"> <operand> Operand </operand> </UnaryOp> Operand </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"and\\\">\\n\\t<operands>\\n\\t\\t<UnaryOp operator=\\\"not\\\">\\n\\t\\t\\t<operand>\\n\\t\\t\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t</operand>\\n\\t\\t</UnaryOp>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<NAryOp operator=\\\"and\\\"> <operands> Event Operand </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"and\\\">\\n\\t\\t\\t<operands>\\n\\t\\t\\t\\t\""),PlaceholderWithSort("<Event:","Event"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<NAryOp operator=\\\"or\\\"> <operands> Event Operand </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"or\\\">\\n\\t\\t\\t<operands>\\n\\t\\t\\t\\t\""),PlaceholderWithSort("<Event:","Event"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<NAryOp operator=\\\"and\\\"> <operands> <UnaryOp operator=\\\"not\\\"> <operand> <UnaryOp operator=\\\"not\\\"> <operand> Operand </operand> </UnaryOp> </operand> </UnaryOp> <UnaryOp operator=\\\"not\\\"> <operand> Operand </operand> </UnaryOp> </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"and\\\">\\n\\t<operands>\\n\\t\\t<UnaryOp operator=\\\"not\\\">\\n\\t\\t\\t<operand>\\n\\t\\t\\t\\t<UnaryOp operator=\\\"not\\\">\\n\\t\\t\\t\\t\\t<operand>\\n\\t\\t\\t\\t\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t\\t\\t</operand>\\n\\t\\t\\t\\t</UnaryOp>\\n\\t\\t\\t</operand>\\n\\t\\t</UnaryOp>\\n\\t\\t<UnaryOp operator=\\\"not\\\">\\n\\t\\t\\t<operand>\\n\\t\\t\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t</operand>\\n\\t\\t</UnaryOp>\\n\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<NAryOp operator=\\\"and\\\"> <operands> </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"and\\\">\\n\\t<operands>\\n\\t\\t\""),Cursor,String("\"\\n\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<NAryOp operator=\\\"or\\\"> <operands> </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"or\\\">\\n\\t<operands>\\n\\t\\t\""),Cursor,String("\"\\n\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<NAryOp operator=\\\"or\\\"> <operands> <UnaryOp operator=\\\"not\\\"> <operand> Operand </operand> </UnaryOp> Operand </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"or\\\">\\n\\t<operands>\\n\\t\\t<UnaryOp operator=\\\"not\\\">\\n\\t\\t\\t<operand>\\n\\t\\t\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t </operand>\\n\\t\\t</UnaryOp>\\n\\t\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<UnaryOp operator=\\\"-\\\"> <operand> Operand </operand> </UnaryOp>\"")),[String("\"<UnaryOp operator=\\\"-\\\">\\n\\t<operand>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operand>\\n</UnaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<UnaryOp operator=\\\"not\\\"> <operand> <NAryOp operator=\\\"xor\\\"> <operands> Operand Operand </operands> </NAryOp> </operand> </UnaryOp> \"")),[String("\"<UnaryOp operator=\\\"not\\\">\\n\\t<operand>\\n\\t\\t<NAryOp operator=\\\"xor\\\">\\n\\t\\t\\t\\t<operands>\\n\\t\\t\\t\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t\\t</operands>\\n\\t\\t</NAryOp>\\n\\t</operand>\\n</UnaryOp>\\n\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<UnaryOp operator=\\\"not\\\"> <operand> Operand </operand> </UnaryOp>\"")),[String("\"<UnaryOp operator=\\\"not\\\">\\n\\t<operand>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operand>\\n</UnaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<BinaryOp operator=\\\"&gt;\\\"> <operands> Operand Operand </operands> </BinaryOp>\"")),[String("\"<BinaryOp operator=\\\"&gt;\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</BinaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<BinaryOp operator=\\\"&gt;=\\\"> <operands> Operand Operand </operands> </BinaryOp>\"")),[String("\"<BinaryOp operator=\\\"&gt;=\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</BinaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<BinaryOp operator=\\\"&lt;\\\"> <operands> Operand Operand </operands> </BinaryOp>\"")),[String("\"<BinaryOp operator=\\\"&lt;\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</BinaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<BinaryOp operator=\\\"&lt;=\\\"> <operands> Operand Operand </operands> </BinaryOp>\"")),[String("\"<BinaryOp operator=\\\"&lt;=\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</BinaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<NAryOp operator=\\\"+\\\"> <operands> Operand Operand </operands> </NAryOp>\"")),[String("\"<NAryOp operator=\\\"+\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\\t</operands>\\n</NAryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<BinaryOp operator=\\\"-\\\"> <operands> Operand Operand </operands> </BinaryOp>\"")),[String("\"<BinaryOp operator=\\\"-\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</BinaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<BinaryOp operator=\\\"=\\\"> <operands> Operand Operand </operands> </BinaryOp>\"")),[String("\"<BinaryOp operator=\\\"=\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</BinaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<BinaryOp operator=\\\"&lt;&gt;\\\"> <operands> Operand Operand </operands> </BinaryOp>\"")),[String("\"<BinaryOp operator=\\\"&lt;&gt;\\\">\\n\\t<operands>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</operands>\\n</BinaryOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<Last> <variable> <ConstVarRef name=\\\"PragmaId\\\"/> </variable> </Last>\"")),[String("\"<Last>\\n\\t<variable>\\n\\t\\t<ConstVarRef name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n\\t</variable>\\n</Last>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<ConstValue value=\\\"Value\\\"/>\"")),[String("\"<ConstValue value=\\\"\""),PlaceholderWithSort("<Value:","Value"),String("\"\\\"/>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<CallExpression> CallExpressionOperator CallParameters </CallExpression>\"")),[String("\"<CallExpression>\\n\\t\""),PlaceholderWithSort("<CallExpressionOperator:","CallExpressionOperator"),String("\"\\n\\t\""),PlaceholderWithSort("<CallParameters:","CallParameters"),String("\"\\n</CallExpression>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<CaseOp name=\\\"PragmaId\\\"> Switch Cases </CaseOp>\"")),[String("\"<CaseOp name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<Switch:","Switch"),String("\"\\n\\t\""),PlaceholderWithSort("<Cases:","Cases"),String("\"\\n</CaseOp>\"")],[Blank]),CompletionTemplateEx([Sort("Operand")],CompletionPrefix(String("\"<IfThenElseOp name=\\\"PragmaId\\\"> If Then Else </IfThenElseOp>\"")),[String("\"<IfThenElseOp name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\""),PlaceholderWithSort("<If:","If"),String("\"\\n\\t\""),PlaceholderWithSort("<Then:","Then"),String("\"\\n\\t\""),PlaceholderWithSort("<Else:","Else"),String("\"\\n</IfThenElseOp>\"")],[Blank]),CompletionTemplateEx([Sort("CallExpressionOperator")],CompletionPrefix(String("\"<operator> <OpCall name=\\\"INT\\\"> <operator> <OperatorRef name=\\\"PragmaId\\\"/> </operator> </OpCall> </operator>\"")),[String("\"<operator>\\n\\t<OpCall name=\\\"\""),PlaceholderWithSort("<INT:","INT"),String("\"\\\">\\n\\t\\t<operator>\\n\\t\\t\\t<OperatorRef name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n\\t\\t</operator>\\n\\t</OpCall>\\n</operator>\"")],[Blank]),CompletionTemplateEx([Sort("CallParameters")],CompletionPrefix(String("\"<callParameters> </callParameters>\"")),[String("\"<callParameters>\\n\\t\""),Cursor,String("\"\\n</callParameters>\"")],[Blank]),CompletionTemplateEx([Sort("Switch")],CompletionPrefix(String("\"<switch> IdExpression </switch>\"")),[String("\"<switch>\\n\\t\\t\\t\""),PlaceholderWithSort("<IdExpression:","IdExpression"),String("\"\\n\\t\\t</switch>\"")],[Blank]),CompletionTemplateEx([Sort("Cases")],CompletionPrefix(String("\"<cases> </cases>\"")),[String("\"<cases>\\n\\t\""),Cursor,String("\"\\n</cases>\"")],[Blank]),CompletionTemplateEx([Sort("Case")],CompletionPrefix(String("\"<Case pattern=\\\"PragmaId\\\"> <flow> IdExpression </flow> </Case>\"")),[String("\"<Case pattern=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t\\t<flow>\\n\\t\\t\\t\\t\\t\""),PlaceholderWithSort("<IdExpression:","IdExpression"),String("\"\\n\\t\\t\\t </flow>\\n\\t </Case>\"")],[Blank]),CompletionTemplateEx([Sort("IdExpression")],CompletionPrefix(String("\"<IdExpression> <path> <ConstVarRef name=\\\"PragmaId\\\"/> </path> </IdExpression>\"")),[String("\"<IdExpression>\\n\\t<path>\\n\\t\\t<ConstVarRef name=\\\"\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n\\t</path>\\n</IdExpression>\"")],[Blank]),CompletionTemplateEx([Sort("If")],CompletionPrefix(String("\"<if> IdExpression </if>\"")),[String("\"<if>\\n\\t\""),PlaceholderWithSort("<IdExpression:","IdExpression"),String("\"\\n</if>\"")],[Blank]),CompletionTemplateEx([Sort("Then")],CompletionPrefix(String("\"<then> ListExpression </then>\"")),[String("\"<then>\\n\\t\""),PlaceholderWithSort("<ListExpression:","ListExpression"),String("\"\\n</then>\"")],[Blank]),CompletionTemplateEx([Sort("Else")],CompletionPrefix(String("\"<else> ListExpression </else>\"")),[String("\"<else>\\n\\t\""),PlaceholderWithSort("<ListExpression:","ListExpression"),String("\"\\n</else>\"")],[Blank]),CompletionTemplateEx([Sort("ListExpression")],CompletionPrefix(String("\"<ListExpression> <items> IdExpression </items> </ListExpression>\"")),[String("\"<ListExpression>\\n\\t\\t<items>\\n\\t\\t\\t\\t\""),PlaceholderWithSort("<IdExpression:","IdExpression"),String("\"\\n\\t\\t</items>\\n\\t</ListExpression>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Assumption")],CompletionPrefix(String("\"<Assertion kind=\\\"assume\\\" name=\\\"A_PragmaId\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"assume\\\" name=\\\"A_\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Pragmas")],CompletionPrefix(String("\"<pragmas> <ed:Assertion oid=\\\"!ed/assume/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Assertion oid=\\\"!ed/assume/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_PragmaId\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_mSpeed_min\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_mSpeed_min\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_mSpeed_max\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_mSpeed_max\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_tDesiredSpeed_min\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_tDesiredSpeed_min\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_tDesiredSpeed_max\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_tDesiredSpeed_max\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_mSpeed_min\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_mSpeed_min\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_mSpeed_max\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_mSpeed_max\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_last_tDesiredSpeed_min\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_last_tDesiredSpeed_min\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_last_tDesiredSpeed_max\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_last_tDesiredSpeed_max\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_tDesiredSpeed_min\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_tDesiredSpeed_min\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Assertion")],CompletionPrefix(String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_tDesiredSpeed_max\\\"> <definition> Operand </definition> Pragmas </Assertion>\"")),[String("\"<Assertion kind=\\\"guarantee\\\" name=\\\"G_L_in_tDesiredSpeed_max\\\">\\n\\t<definition>\\n\\t\\t\""),PlaceholderWithSort("<Operand:","Operand"),String("\"\\n\\t</definition>\\n\\t\\t\""),PlaceholderWithSort("<Pragmas:","Pragmas"),String("\"\\n</Assertion>\"")],[Blank]),CompletionTemplateEx([Sort("Pragmas")],CompletionPrefix(String("\"<pragmas> <ed:Assertion oid=\\\"!ed/guarantee/min/PragmaId/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Assertion oid=\\\"!ed/guarantee/min/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragmas")],CompletionPrefix(String("\"<pragmas> <ed:Assertion oid=\\\"!ed/guarantee/max/PragmaId/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Assertion oid=\\\"!ed/guarantee/max/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank]),CompletionTemplateEx([Sort("Pragmas")],CompletionPrefix(String("\"<pragmas> <ed:Assertion oid=\\\"!ed/guarantee/PragmaId\\\"/> </pragmas>\"")),[String("\"<pragmas>\\n\\t<ed:Assertion oid=\\\"!ed/guarantee/\""),PlaceholderWithSort("<PragmaId:","PragmaId"),String("\"\\\"/>\\n</pragmas>\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Start")],CompletionPrefix(String("\"module ID \"")),[String("\"module \""),PlaceholderWithSort("<ID:","ID"),String("\"\\n\\n\""),Cursor],[Blank]),CompletionTemplateEx([Sort("Definition")],CompletionPrefix(String("\"entity ID { }\"")),[String("\"entity \""),PlaceholderWithSort("<ID:","ID"),String("\" {\\n\\t\""),Cursor,String("\"\\n}\"")],[Blank]),CompletionTemplateEx([Sort("Property")],CompletionPrefix(String("\"ID : Type\"")),[PlaceholderWithSort("<ID:","ID"),String("\" : \""),PlaceholderWithSort("<Type:","Type")],[]),CompletionTemplateEx([Sort("Start")],CompletionPrefix(String("\"ID : Type\"")),[PlaceholderWithSort("<ID:","ID"),String("\" : \""),PlaceholderWithSort("<Type:","Type")],[])]),Folding(" Default folding definitions",[FoldRule(SortAndConstructor(Sort("Start"),Constructor("Module")),None),FoldRule(SortAndConstructor(Sort("Definition"),Constructor("Entity")),None),FoldRule(SortAndConstructor(Sort("Property"),Constructor("Property")),None),FoldRule(SortAndConstructor(Sort("Type"),Constructor("Type")),None),FoldRule(SortAndConstructor(Sort("NamedType"),Constructor("Enum")),None),FoldRule(SortAndConstructor(Sort("Type"),Constructor("Type")),None),FoldRule(SortAndConstructor(Sort("Start"),Constructor("Declare")),None),FoldRule(SortAndConstructor(Sort("Declarations"),Constructor("Declarations")),None),FoldRule(SortAndConstructor(Sort("Constant"),Constructor("Constant")),None),FoldRule(SortAndConstructor(Sort("Constant"),Constructor("Constant2")),None),FoldRule(SortAndConstructor(Sort("Operator"),Constructor("Monitored")),None),FoldRule(SortAndConstructor(Sort("Inputs"),Constructor("Inputs")),None),FoldRule(SortAndConstructor(Sort("Variable"),Constructor("MonitoredVariable")),None),FoldRule(SortAndConstructor(Sort("Variable"),Constructor("MonitoredVariable2")),None),FoldRule(SortAndConstructor(Sort("Variable"),Constructor("ControlledVariable")),None),FoldRule(SortAndConstructor(Sort("Variable"),Constructor("TermVariable")),None),FoldRule(SortAndConstructor(Sort("Variable"),Constructor("TermVariable2")),None),FoldRule(SortAndConstructor(Sort("Variable"),Constructor("ModeClassVariable")),None),FoldRule(SortAndConstructor(Sort("Variable"),Constructor("GenericVariable")),None),FoldRule(SortAndConstructor(Sort("Outputs"),Constructor("Outputs")),None),FoldRule(SortAndConstructor(Sort("Locals"),Constructor("Locals")),None),FoldRule(SortAndConstructor(Sort("Data"),Constructor("Data")),None),FoldRule(SortAndConstructor(Sort("Equation"),Constructor("Equation")),None),FoldRule(SortAndConstructor(Sort("Right"),Constructor("Right")),None),FoldRule(SortAndConstructor(Sort("Operand"),Constructor("CallExpression")),None),FoldRule(SortAndConstructor(Sort("CallParameters"),Constructor("CallParameters")),None),FoldRule(SortAndConstructor(Sort("Operand"),Constructor("CaseOp")),None),FoldRule(SortAndConstructor(Sort("Cases"),Constructor("Cases")),None),FoldRule(SortAndConstructor(Sort("Assumption"),Constructor("Assumption")),None),FoldRule(SortAndConstructor(Sort("TextDiagram"),Constructor("TextDiagram")),None),FoldRule(SortAndConstructor(Sort("PresentationElements"),Constructor("PresentationElements")),None),FoldRule(SortAndConstructor(Sort("TextDiagram"),Constructor("TextDiagram2")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion2")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion3")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion4")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion5")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion6")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion7")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion8")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion9")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion10")),None),FoldRule(SortAndConstructor(Sort("Assertion"),Constructor("Assertion11")),None),FoldRule(SortAndConstructor(Sort("Operator"),Constructor("Controlled")),None),FoldRule(SortAndConstructor(Sort("Operator"),Constructor("Term")),None),FoldRule(SortAndConstructor(Sort("Operator"),Constructor("Term2")),None),FoldRule(SortAndConstructor(Sort("Operator"),Constructor("ModeClass")),None),FoldRule(SortAndConstructor(Sort("Operator"),Constructor("MainOperator")),None)]),Menus([ToolbarMenu(Label(String("\"Syntax\"")),[OpenEditor],[Action(String("\"Format\""),Strategy("editor-format"),[RealTime,Source]),Action(String("\"Show abstract syntax\""),Strategy("debug-show-aterm"),[RealTime,Meta,Source]),Action(String("\"Show analyzed syntax\""),Strategy("debug-show-analyzed"),[Meta])]),ToolbarMenu(Label(String("\"Analysis\"")),[Meta],[Action(String("\"Reset and reanalyze\""),Strategy("debug-reanalyze"),[]),Submenu(String("\"Show analysis\""),[OpenEditor],[Action(String("\"Project\""),Strategy("debug-project"),[]),Action(String("\"Partition\""),Strategy("debug-partition"),[])]),Submenu(String("\"Show index\""),[OpenEditor],[Action(String("\"Project\""),Strategy("debug-index-project"),[]),Action(String("\"Project (resolved)\""),Strategy("debug-index-project-resolve"),[]),Action(String("\"Partition\""),Strategy("debug-index-partition"),[]),Action(String("\"Partition (resolved)\""),Strategy("debug-index-partition-resolve"),[])]),Submenu(String("\"Show tasks\""),[OpenEditor],[Action(String("\"Project\""),Strategy("debug-task-project"),[]),Action(String("\"Partition\""),Strategy("debug-task-partition"),[]),Action(String("\"Selection\""),Strategy("debug-task-selection"),[])])]),ToolbarMenu(Label(String("\"Generation\"")),[OpenEditor,RealTime],[Action(String("\"Generate Java\""),Strategy("generate-java"),[]),Action(String("\"Generate SCR\""),Strategy("generate-scr"),[])])]),Refactorings("",[TextReconstruction(Strategy("construct-textual-change")),Refactoring([Sort("ID")],String("\"Rename Entity\""),Strategy("rename-refactoring"),[Cursor],[Shortcut(KeyCombination(["Shift","Alt","R"])),UserInput([IdInputField(String("\"new name\""),String("\"\""))])])]),KeyBindings(" Predefined Keybindings",[KeyBinding(KeyCombination(["Shift","Alt","R"]),String("\"org.eclipse.jdt.ui.edit.text.java.rename.element\"")),KeyBinding(KeyCombination(["Shift","Alt","I"]),String("\"org.eclipse.jdt.ui.edit.text.java.inline\"")),KeyBinding(KeyCombination(["Shift","Alt","M"]),String("\"org.eclipse.jdt.ui.edit.text.java.extract.method\"")),KeyBinding(KeyCombination(["Shift","Alt","V"]),String("\"org.eclipse.jdt.ui.move.method\"")),KeyBinding(KeyCombination(["Shift","Alt","C"]),String("\"org.eclipse.jdt.ui.change.method.signature\"")),KeyBinding(KeyCombination(["Shift","Alt","L"]),String("\"org.eclipse.jdt.ui.edit.text.java.extract.local.variable\"")),KeyBinding(KeyCombination(["Shift","Ctrl","F"]),String("\"org.eclipse.jdt.ui.edit.text.java.format\"")),KeyBinding(KeyCombination(["Ctrl","I"]),String("\"org.eclipse.jdt.ui.edit.text.java.indent\"")),KeyBinding(KeyCombination(["Shift","Ctrl","C"]),String("\"org.eclipse.jdt.ui.edit.text.java.toggle.comment\"")),KeyBinding(KeyCombination(["Shift","Ctrl","M"]),String("\"org.eclipse.jdt.ui.edit.text.java.add.import\"")),KeyBinding(KeyCombination(["Shift","Ctrl","O"]),String("\"org.eclipse.jdt.ui.edit.text.java.organize.imports\""))]),References("",[ReferenceRule("_",Strategy("editor-resolve")),HoverRule("_",Strategy("editor-hover"))]),Language(" Syntax properties (static defaults)",[LineCommentPrefix(String("\"//\"")),BlockCommentDefs(BlockCommentDef(String("\"/*\""),"*",String("\"*/\""))),FenceDefs([FenceDef("[","]"),FenceDef("(",")"),FenceDef("{","}")]),IndentDefs([IndentDef(String("\"=\"")),IndentDef(String("\":\""))]),IdentifierLexical(String("\"[A-Za-z0-9_]+\""))]),Views([OutlineView(Strategy("editor-outline"),[Source],Some(ExpandToLevel("3"))),PropertiesView(Strategy("editor-properties"),[])])])