Module("runtime/properties/collect",[Imports([Import("runtime/properties/entries"),Import("runtime/properties/tasks"),Import("runtime/properties/interface"),Import("runtime/properties/query"),Import("runtime/properties/debug"),Import("runtime/task/core"),Import("runtime/task/create"),Import("runtime/task/messages"),Import("runtime/task/tasks"),Import("runtime/nabl/collect"),Import("runtime/nabl/uri"),Import("runtime/nabl/tasks"),Import("runtime/nabl/utils"),Import("runtime/editor/origins"),Import("runtime/editor/annotations"),Import("runtime/types/collect")]),Signature([Sorts([SortNoArgs("Property")]),Constructors([OpDecl("Prop",FunType([ConstType(SortNoArgs("Property")),ConstType(SortNoArgs("Value")),ConstType(Sort("List",[SortNoArgs("Dependency")]))],ConstType(SortNoArgs("Prop"))))])]),Rules([RDefT("nabl-store-props",[],[DefaultVarDec("partition"),DefaultVarDec(ListVar("prop*"))],Rule(Var("name"),Var("name"),Seq(Assign(Var("uri"),App(Seq(CallNoArgs(SVar("nabl-collect-def")),CallNoArgs(SVar("nabl-uri"))),Var("name"))),BA(Call(SVar("map"),[CallT(SVar("nabl-store-prop"),[],[Var("partition"),Var("uri"),Var("name")])]),Var(ListVar("prop*")))))),RDefT("nabl-store-prop",[],[DefaultVarDec("partition"),DefaultVarDec("prop")],Rule(Var("name"),Var("name"),Seq(Assign(Var("uri"),App(Seq(CallNoArgs(SVar("nabl-collect-def")),CallNoArgs(SVar("nabl-uri"))),Var("name"))),BA(CallT(SVar("nabl-store-prop"),[],[Var("partition"),Var("uri"),Var("name")]),Var("prop"))))),RDefT("nabl-store-prop",[],[DefaultVarDec("partition"),DefaultVarDec("uri"),DefaultVarDec("name")],Rule(NoAnnoList(Op("Prop",[Var("kind"),Var("prop"),Var(ListVar("dep*"))])),App(CallT(SVar("new-prop"),[],[Var("partition"),Var("uri"),Var("kind"),Var("task")]),Var("name")),Assign(Var("task"),App(CallT(SVar("task-create-make-set"),[],[Var("partition"),App(CallNoArgs(SVar("dependent-tasks")),Var(ListVar("dep*")))]),Var("prop")))))]),Rules([SDefNoArgs("nabl-collect-custom-properties",Seq(Assign(Var("iset"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Call(SVar("try"),[Call(SVar("nabl-custom-properties"),[LRule(RuleNoCond(Var(ListVar("p*")),App(Seq(CallT(SVar("iset-addlist"),[],[Var(ListVar("p*"))]),Fail),Var("iset"))))])]),BA(CallNoArgs(SVar("iset-elements")),Var("iset"))))),SDefNoArgs("nabl-get-all-properties",Build(NoAnnoList(ListTail([NoAnnoList(Op("Type",[]))],RootApp(CallNoArgs(SVar("nabl-collect-custom-properties"))))))),RDefT("nabl-annotate-properties",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("old-uri*")),DefaultVarDec(ListVar("new-uri*"))],Rule(Var("term"),Var("term'"),Seq(Assign(Var(ListVar("kind*")),RootApp(CallNoArgs(SVar("nabl-get-all-properties")))),Seq(Assign(Var("term'"),App(Call(SVar("foldl"),[LChoice(CallT(SVar("nabl-annotate-property"),[],[Var("lang"),Var("partition"),Var(ListVar("old-uri*")),Var(ListVar("new-uri*"))]),CallNoArgs(SVar("Snd")))]),NoAnnoList(Tuple([Var(ListVar("kind*")),Var("term")])))),Call(SVar("try"),[CallT(SVar("nabl-constraint"),[],[Var("lang"),Var("partition"),Var(ListVar("old-uri*")),Var(ListVar("new-uri*"))])]))))),RDefT("nabl-annotate-property",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("old-uri*")),DefaultVarDec(ListVar("new-uri*"))],Rule(NoAnnoList(Tuple([Var("kind"),AnnoList(Var("term"),[Var(ListVar("a*"))])])),AnnoList(Var("term"),[NoAnnoList(Tuple([Var("kind"),Var("prop")])),Var(ListVar("a*"))]),Seq(Not(BA(CallT(SVar("get-property-task"),[],[Var("kind")]),Var("term"))),Assign(Var("prop"),App(LChoice(CallT(SVar("create-property-task"),[],[Var("partition"),Var("kind"),Var(ListVar("old-uri*")),Var(ListVar("new-uri*"))]),LChoice(CallT(SVar("create-property-task"),[],[Var("partition"),Var("kind"),Var(ListVar("new-uri*"))]),CallT(SVar("create-property-task"),[],[Var("partition"),Var("kind")]))),Var("term"))))))]),Strategies([RDefT("nabl-prop-calc",[],[DefaultVarDec("partition"),DefaultVarDec(ListVar("dep*"))],RuleNoCond(Var("term"),App(CallT(SVar("task-create-id"),[],[Var("partition"),Var(ListVar("dep*"))]),Var("term")))),RDefT("nabl-prop-list",[],[DefaultVarDec("partition"),DefaultVarDec(ListVar("dep*"))],RuleNoCond(Var("term"),App(CallT(SVar("task-create-combine"),[],[Var("partition"),Var(ListVar("dep*"))]),Var("term")))),RDefT("nabl-prop-lookup",[],[DefaultVarDec("kind"),DefaultVarDec("partition"),DefaultVarDec(ListVar("dep*"))],Rule(Var("term"),Var("result"),[WithClause(LChoice(Assign(Var("result"),App(Seq(CallNoArgs(SVar("get-annos")),Call(SVar("fetch-elem"),[Match(NoAnnoList(Tuple([Var("kind"),RootApp(Id)])))])),Var("term"))),Assign(Var("result"),App(Seq(CallT(SVar("nabl-create-collectdefs"),[],[Var("partition"),Var(ListVar("dep*"))]),CallT(SVar("prop-create-lookup"),[],[Var("partition"),Var("kind")])),Var("term")))))])),RDefT("nabl-prop-match",[],[DefaultVarDec("kind"),DefaultVarDec("partition"),DefaultVarDec("relation"),DefaultVarDec("expected")],Rule(Var("actual"),App(CallT(SVar("task-create-choice"),[],[Var("partition")]),Var(ListVar("check*"))),[WithClause(Seq(Assign(Var(ListVar("expected*")),App(CallNoArgs(SVar("try-make-list")),Var("expected"))),Assign(Var(ListVar("check*")),App(Call(SVar("map"),[CallT(SVar("prop-create-check"),[],[Var("partition"),Var("kind"),Var("relation"),Var("actual")])]),Var(ListVar("expected*"))))))]))]),Rules([RDefT("get-or-create-property-task",[],[DefaultVarDec("ctx"),DefaultVarDec("kind"),DefaultVarDec(ListVar("old-uri*")),DefaultVarDec(ListVar("new-uri*"))],Rule(Var("term"),Var("task"),AM(LChoice(CallT(SVar("get-property-task"),[],[Var("kind")]),LChoice(CallT(SVar("create-property-task"),[],[Var("ctx"),Var("kind"),Var(ListVar("old-uri*")),Var(ListVar("new-uri*"))]),LChoice(CallT(SVar("create-property-task"),[],[Var("ctx"),Var("kind"),Var(ListVar("new-uri*"))]),LChoice(CallT(SVar("create-property-task"),[],[Var("ctx"),Var("kind")]),CallT(SVar("cannot-create-property-task"),[],[Var("ctx"),Var("kind")]))))),Var("task")))),RDefT("get-or-create-property-task",[],[DefaultVarDec("ctx"),DefaultVarDec("kind")],Rule(Var("term"),Var("task"),AM(LChoice(CallT(SVar("get-property-task"),[],[Var("kind")]),LChoice(Seq(CallT(SVar("create-property-task"),[],[Var("ctx"),Var("kind"),NoAnnoList(List([])),NoAnnoList(List([]))]),CallT(SVar("uris-not-passed"),[],[Var("ctx"),Var("kind")])),LChoice(Seq(CallT(SVar("create-property-task"),[],[Var("ctx"),Var("kind"),NoAnnoList(List([]))]),CallT(SVar("uris-not-passed"),[],[Var("ctx"),Var("kind")])),LChoice(CallT(SVar("create-property-task"),[],[Var("ctx"),Var("kind")]),CallT(SVar("cannot-create-property-task"),[],[Var("ctx"),Var("kind")]))))),Var("task")))),RDefT("uris-not-passed",[],[DefaultVarDec("ctx"),DefaultVarDec("kind")],Rule(Var("term"),App(Seq(CallT(SVar("properties-warning-task"),[],[Var("ctx"),Var("msg")]),CallT(SVar("properties-console-msg"),[],[Var("msg")])),Var("term")),Assign(Var("msg"),NoAnnoList(StringQuotation1("               ",[QStr("Called create-property-task for property "),StringEscape1("                                                        ",App(CallNoArgs(SVar("get-constructor")),Var("kind"))),QStr(" on term "),StringEscape1("                                                                                         ",App(CallNoArgs(SVar("write-to-string")),Var("term"))),QStr(" that accepts uris with empty lists instead, because uris were not passed!")]))))),RDefT("cannot-create-property-task",[],[DefaultVarDec("ctx"),DefaultVarDec("kind")],Rule(Var("term"),App(Seq(CallT(SVar("properties-warning-task"),[],[Var("ctx"),Var("msg")]),CallT(SVar("properties-console-msg"),[],[Var("msg")])),Var("term")),Assign(Var("msg"),NoAnnoList(StringQuotation1("               ",[QStr("Could not create task for property "),StringEscape1("                                                  ",App(CallNoArgs(SVar("get-constructor")),Var("kind"))),QStr(" on term "),StringEscape1("                                                                                   ",App(CallNoArgs(SVar("write-to-string")),Var("term"))),QStr(".")]))))),RDefT("create-property-task",[],[DefaultVarDec("ctx"),DefaultVarDec("kind")],RuleNoCond(As(Var("r"),NoAnnoList(Op("Result",[Wld]))),App(CallT(SVar("prop-create-extract"),[],[Var("ctx"),Var("kind")]),Var("r")))),RDefT("create-property-task",[],[DefaultVarDec("ctx"),DefaultVarDec("kind")],Rule(Var("term"),App(CallT(SVar("nabl-prop-calc"),[],[Var("ctx"),Var(ListVar("type*"))]),Var(ListVar("type*"))),Assign(Var(ListVar("type*")),App(Call(SVar("map"),[LChoice(CallT(SVar("get-property-task"),[],[Var("kind")]),CallT(SVar("create-property-task"),[],[Var("ctx"),Var("kind")]))]),Var("term")))))]),Rules([RDefT("remove-property-annotations",[],[DefaultVarDec(ListVar("kind*"))],RuleNoCond(Var("term"),App(Call(SVar("foldl"),[CallNoArgs(SVar("remove-property-annotation"))]),NoAnnoList(Tuple([Var(ListVar("kind*")),Var("term")]))))),RDefNoArgs("remove-property-annotation",RuleNoCond(NoAnnoList(Tuple([Var("kind"),Var("term")])),App(Call(SVar("remove-annotations"),[Match(NoAnnoList(Tuple([Var("kind"),Wld])))]),Var("term"))))])])