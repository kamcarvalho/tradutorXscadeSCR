Module("assertion",[Imports([Import("include/Entity")]),Rules([RDefNoArgs("resolve-assertions-given-operators",RuleNoCond(NoAnnoList(List([])),NoAnnoList(List([])))),RDefNoArgs("resolve-assertions-given-operators",RuleNoCond(NoAnnoList(ListTail([Var("head")],NoAnnoList(List([])))),App(CallNoArgs(SVar("resolve-assertion")),Var("head")))),RDefNoArgs("resolve-assertions-given-operators",RuleNoCond(NoAnnoList(ListTail([Var("head")],Var("tail"))),App(CallNoArgs(SVar("resolve-assertions-given-operators")),Var("tail")))),RDefNoArgs("resolve-assertion",Rule(NoAnnoList(Op("MainOperator",[Var("opkind"),Var("opname"),Var("inputs"),Var("outputs"),Var("locals"),Var("data"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                                                         ",[StringEscape1("  		                                                                         ",Var("resolvedassertions"))])),[WithClause(Assign(Var("resolvedassertions"),App(CallNoArgs(SVar("resolve-assertion-data")),NoAnnoList(Tuple([Var("data"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-assertion-data",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Data",[Var("equations"),Var("assumptionOrAssertion")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                      ",[StringEscape1("  		                                                                      ",Var("resolvedAssumptionOrAssertion"))])),[WithClause(Assign(Var("resolvedAssumptionOrAssertion"),App(CallNoArgs(SVar("resolve-assertions")),NoAnnoList(Tuple([Var("assumptionOrAssertion"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-assertion-or-assumption",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("AssumptionOperator",[Var("assumption")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                              ",[])))),RDefNoArgs("resolve-assertion-or-assumption",Rule(NoAnnoList(Tuple([NoAnnoList(Op("AssertionOperator",[Var("assertion")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                            ",[StringEscape1("  		                                                            ",Var("resolvedAssertions"))])),[WithClause(Assign(Var("resolvedAssertions"),App(CallNoArgs(SVar("resolve-assertion")),NoAnnoList(Tuple([Var("assertion"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-assertions",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(List([])))),RDefNoArgs("resolve-assertions",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("head")],Var("tail"))),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                             ",[QStr("\r\n  			"),StringEscape1("  			",Var("resolvedHead")),QStr("\r\n  			"),StringEscape1("  			",Var("resolvedTail"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-assertion-or-assumption")),NoAnnoList(Tuple([Var("head"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedTail"),App(CallNoArgs(SVar("resolve-assertions")),NoAnnoList(Tuple([Var("tail"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Assertion",[Var("assertionName"),Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                             ",[StringEscape1("  		                                                                             ",Var("assertionName")),QStr(" : "),StringEscape1("  		                                                                                               ",Var("resolvedOperand")),QStr(";")])),[WithClause(Assign(Var("resolvedOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("mainOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion2",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion3",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion4",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion5",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion2",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion6",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion7",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion8",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion9",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion10",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                 ",[])))),RDefNoArgs("resolve-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Assertion11",[Var("mainOperand"),Var("pragmas")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                 ",[])))),RDefNoArgs("resolve-operand-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("NotOperand",[NoAnnoList(List([]))])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(List([])))),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("NotOperand",[Var("Operand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                    ",[QStr("NOT("),StringEscape1("  		                                                        ",Var("resolveNotOperand")),QStr(")")])),[WithClause(Assign(Var("resolveNotOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("Operand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("And",[NoAnnoList(List([]))])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(List([])))),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("And",[NoAnnoList(ListTail([Var("head")],NoAnnoList(List([]))))])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                ",[StringEscape1("  		                                                ",Var("resolvedHead"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("head"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("And",[NoAnnoList(ListTail([Var("head")],Var("tail")))])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                  ",[QStr("("),StringEscape1("  		                                                   ",Var("resolvedHead")),QStr(") AND ("),StringEscape1("  		                                                                        ",Var("resolvedTail")),QStr(")")])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("head"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedTail"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([NoAnnoList(Op("And",[Var("tail")])),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Or",[NoAnnoList(List([]))])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(List([])))),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Or",[NoAnnoList(ListTail([Var("head")],NoAnnoList(List([]))))])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                               ",[StringEscape1("  		                                               ",Var("resolvedHead"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("head"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Or",[NoAnnoList(ListTail([Var("head")],Var("tail")))])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                 ",[StringEscape1("  		                                                 ",Var("resolvedHead")),QStr(" OR ("),StringEscape1("  		                                                                    ",Var("resolvedTail")),QStr(")")])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("head"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedTail"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([NoAnnoList(Op("Or",[Var("tail")])),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Imply",[Var("leftOperand"),Var("rightOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                ",[QStr("("),StringEscape1("  		                                                                 ",Var("resolvedLeftOp")),QStr(") => ("),StringEscape1("  		                                                                                       ",Var("resolvedRightOp")),QStr(")")])),[WithClause(Assign(Var("resolvedLeftOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("leftOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedRightOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("rightOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Negative",[Var("operand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                 ",[QStr("-"),StringEscape1("  		                                                  ",Var("resolveOperand"))])),[WithClause(Assign(Var("resolveOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("operand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Xor",[Var("leftOperand"),Var("rightOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                              ",[QStr("("),StringEscape1("  		                                                               ",Var("resolvedLeftOp")),QStr(") <=> "),StringEscape1("  		                                                                                     ",Var("resolvedRightOp"))])),[WithClause(Assign(Var("resolvedLeftOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("leftOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedRightOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("rightOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Event",[Var("firstOperand"),Var("secondOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		  ",[QStr("@T"),StringEscape1("  		    ",Var("resolvedSecondOperandNoApostrophe"))])),[WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("secondOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedSecondOperandNoApostrophe"),App(CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"'\"")),NoAnnoList(Str("\"\""))]),Var("resolvedSecondOperand"))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("EventOp",[Var("firstOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                     ",[StringEscape1("  		                                                     ",Var("resolvedFirstOperand"))])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("firstOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("GreaterThan",[Var("leftOperand"),Var("rightOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                      ",[StringEscape1("  		                                                                      ",Var("resolvedLeftOp")),QStr(" > "),StringEscape1("  		                                                                                         ",Var("resolvedRightOp"))])),[WithClause(Assign(Var("resolvedLeftOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("leftOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedRightOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("rightOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("GreaterThanOrEqual",[Var("leftOperand"),Var("rightOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                             ",[StringEscape1("  		                                                                             ",Var("resolvedLeftOp")),QStr(" >= "),StringEscape1("  		                                                                                                 ",Var("resolvedRightOp"))])),[WithClause(Assign(Var("resolvedLeftOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("leftOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedRightOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("rightOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("LessThan",[Var("leftOperand"),Var("rightOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                   ",[StringEscape1("  		                                                                   ",Var("resolvedLeftOp")),QStr(" < "),StringEscape1("  		                                                                                      ",Var("resolvedRightOp"))])),[WithClause(Assign(Var("resolvedLeftOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("leftOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedRightOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("rightOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("LessThanOrEqual",[Var("leftOperand"),Var("rightOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                          ",[StringEscape1("  		                                                                          ",Var("resolvedLeftOp")),QStr(" <= "),StringEscape1("  		                                                                                              ",Var("resolvedRightOp"))])),[WithClause(Assign(Var("resolvedLeftOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("leftOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedRightOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("rightOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Equal",[Var("firstOperand"),Var("secondOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                  ",[StringEscape1("  		                                                                  ",Var("resolvedFirstOperand")),QStr(" = "),StringEscape1("  		                                                                                           ",Var("resolvedSecondOperand"))])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("firstOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("secondOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Different",[Var("firstOperand"),Var("secondOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                      ",[StringEscape1("  		                                                                      ",Var("resolvedFirstOperand")),QStr(" =! "),StringEscape1("  		                                                                                                ",Var("resolvedSecondOperand"))])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("firstOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("secondOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Subtraction",[Var("leftOperand"),Var("rightOperand")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                                      ",[QStr("("),StringEscape1("  		                                                                       ",Var("resolvedLeftOp")),QStr(" - "),StringEscape1("  		                                                                                          ",Var("resolvedRightOp")),QStr(")")])),[WithClause(Assign(Var("resolvedLeftOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("leftOperand"),Var("inputs"),Var("outputs"),Var("locals")]))))),WithClause(Assign(Var("resolvedRightOp"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("rightOperand"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("IdExpressionOp",[Var("idExpression")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                            ",[StringEscape1("  		                                                            ",Var("idExpressionResolved"))])),[WithClause(Assign(Var("idExpressionResolved"),App(CallNoArgs(SVar("resolve-operand-assertion")),NoAnnoList(Tuple([Var("idExpression"),Var("inputs"),Var("outputs"),Var("locals")])))))])),RDefNoArgs("resolve-operand-assertion",Rule(NoAnnoList(Tuple([NoAnnoList(Op("IdExpression",[Var("expressionName")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                            ",[StringEscape1("  		                                                            ",Var("expressionNameResolved"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([NoAnnoList(Str("\"true\"")),App(CallNoArgs(SVar("within-inputs-outputs-locals")),NoAnnoList(Tuple([Var("expressionName"),Var("inputs"),Var("outputs"),Var("locals")])))]))),Assign(Var("expressionNameResolved"),NoAnnoList(StringQuotation1("  			                                 ",[StringEscape1("  			                                 ",Var("expressionName")),QStr("'")]))),Assign(Var("expressionNameResolved"),NoAnnoList(StringQuotation1("  			                                 ",[StringEscape1("  			                                 ",Var("expressionName"))])))))),RDefNoArgs("within-inputs-outputs-locals",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("Inputs",[Var("inputVariables")])),NoAnnoList(Op("Outputs",[Var("outputVariables")])),NoAnnoList(Op("Locals",[Var("localVariables")]))])),NoAnnoList(StringQuotation1("  		                                                                                                ",[StringEscape1("  		                                                                                                ",Var("isVariable"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([NoAnnoList(Str("\"true\"")),App(CallNoArgs(SVar("within-variables")),NoAnnoList(Tuple([Var("expressionName"),Var("inputVariables")])))]))),Assign(Var("isVariable"),NoAnnoList(StringQuotation1("  			                     ",[QStr("true")]))),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([NoAnnoList(Str("\"true\"")),App(CallNoArgs(SVar("within-variables")),NoAnnoList(Tuple([Var("expressionName"),Var("outputVariables")])))]))),Assign(Var("isVariable"),NoAnnoList(StringQuotation1("	  			                     ",[QStr("true")]))),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([NoAnnoList(Str("\"true\"")),App(CallNoArgs(SVar("within-variables")),NoAnnoList(Tuple([Var("expressionName"),Var("localVariables")])))]))),Assign(Var("isVariable"),NoAnnoList(StringQuotation1("		  			                     ",[QStr("true")]))),Assign(Var("isVariable"),NoAnnoList(StringQuotation1("		  			                     ",[QStr("false")])))))))),RDefNoArgs("within-variables",Rule(NoAnnoList(Tuple([Var("expressionName"),Var("variables")])),NoAnnoList(StringQuotation1("		                                 ",[StringEscape1("		                                 ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("is-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variables")])))))])),RDefNoArgs("is-variable",RuleNoCond(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(List([]))])),NoAnnoList(StringQuotation1("		                          ",[QStr("false")])))),RDefNoArgs("is-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(ListTail([Var("head")],NoAnnoList(List([]))))])),NoAnnoList(StringQuotation1("		                                   ",[StringEscape1("		                                   ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("head")])))))])),RDefNoArgs("is-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(ListTail([Var("head")],Var("tail")))])),NoAnnoList(StringQuotation1("		                                     ",[StringEscape1("		                                     ",Var("isVariable"))])),[WithClause(Assign(Var("isHeadVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("head")]))))),WhereClause(CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([NoAnnoList(Str("\"true\"")),Var("isHeadVariable")]))),Assign(Var("isVariable"),NoAnnoList(StringQuotation1("			                     ",[QStr("true")]))),Assign(Var("isVariable"),App(CallNoArgs(SVar("is-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("tail")]))))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("MonitoredVariable",[Var("variableName"),Var("type"),Var("lasts"),Var("pragmas")]))])),NoAnnoList(StringQuotation1("		                                                                             ",[StringEscape1("		                                                                             ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("MonitoredVariable2",[Var("variableName"),Var("type"),Var("lasts"),Var("pragmas")]))])),NoAnnoList(StringQuotation1("		                                                                              ",[StringEscape1("		                                                                              ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("ControlledVariable",[Var("variableName"),Var("type"),Var("lasts"),Var("pragmas")]))])),NoAnnoList(StringQuotation1("		                                                                              ",[StringEscape1("		                                                                              ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("TermVariable",[Var("variableName"),Var("type"),Var("lasts"),Var("pragmas")]))])),NoAnnoList(StringQuotation1("		                                                                        ",[StringEscape1("		                                                                        ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("TermVariable2",[Var("variableName"),Var("type"),Var("lasts"),Var("pragmas")]))])),NoAnnoList(StringQuotation1("		                                                                         ",[StringEscape1("		                                                                         ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("ModeClassVariable",[Var("variableName"),Var("type"),Var("lasts"),Var("pragmas")]))])),NoAnnoList(StringQuotation1("		                                                                             ",[StringEscape1("		                                                                             ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Op("GenericVariable",[Var("variableName"),Var("type"),Var("lasts"),Var("pragmas")]))])),NoAnnoList(StringQuotation1("		                                                                           ",[StringEscape1("		                                                                           ",Var("isVariable"))])),[WithClause(Assign(Var("isVariable"),App(CallNoArgs(SVar("expression-name-matches-variable")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])))))])),RDefNoArgs("expression-name-matches-variable",Rule(NoAnnoList(Tuple([Var("expressionName"),Var("variableName")])),NoAnnoList(StringQuotation1("		                                    ",[StringEscape1("		                                    ",Var("isVariable"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("expressionName"),Var("variableName")]))),Assign(Var("isVariable"),NoAnnoList(StringQuotation1("			                     ",[QStr("true")]))),Assign(Var("isVariable"),NoAnnoList(StringQuotation1("			                     ",[QStr("false")])))))),RDefNoArgs("resolve-operand-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("LastVariable",[Var("lastName")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                      ",[StringEscape1("  		                                                      ",Var("lastName"))])))),RDefNoArgs("resolve-operand-assertion",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("ConstValue",[Var("value")])),Var("inputs"),Var("outputs"),Var("locals")])),NoAnnoList(StringQuotation1("  		                                                 ",[StringEscape1("  		                                                 ",Var("value"))]))))])])