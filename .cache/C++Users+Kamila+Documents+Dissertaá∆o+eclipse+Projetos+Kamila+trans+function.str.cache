Module("function",[Imports([Import("include/Entity")]),Rules([RDefNoArgs("resolve-functions-given-operators",RuleNoCond(NoAnnoList(List([])),NoAnnoList(List([])))),RDefNoArgs("resolve-functions-given-operators",Rule(NoAnnoList(ListTail([Var("head")],Var("tail"))),NoAnnoList(StringQuotation1("  		                   ",[StringEscape1("  		                   ",Var("resolvedHead")),QStr("\n  		"),StringEscape1("  		",Var("resolvedTail"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-function")),Var("head")))),WithClause(Assign(Var("resolvedTail"),App(CallNoArgs(SVar("resolve-functions-given-operators")),Var("tail"))))])),RDefNoArgs("resolve-function",Rule(NoAnnoList(Op("Monitored",[Var("opKind"),Var("opName"),Var("inputs"),Var("outputs"),Var("locals"),Var("data"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                                                       ",[QStr("var "),StringEscape1("  		                                                                           ",Var("opName")),QStr(" := "),StringEscape1("  		                                                                                       ",Var("resolvedLastEquation"))])),[WithClause(Assign(Var("resolvedLastEquation"),App(CallNoArgs(SVar("resolve-last-equation")),Var("data"))))])),RDefNoArgs("resolve-function",Rule(NoAnnoList(Op("Controlled",[Var("opKind"),Var("opName"),Var("inputs"),Var("outputs"),Var("locals"),Var("data"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                                                        ",[QStr("var "),StringEscape1("  		                                                                            ",Var("opName")),QStr(" := "),StringEscape1("  		                                                                                        ",Var("resolvedLastEquation"))])),[WithClause(Assign(Var("resolvedLastEquation"),App(CallNoArgs(SVar("resolve-last-equation")),Var("data"))))])),RDefNoArgs("resolve-function",Rule(NoAnnoList(Op("Term",[Var("opKind"),Var("opName"),Var("inputs"),Var("outputs"),Var("locals"),Var("data"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                                                  ",[QStr("var "),StringEscape1("  		                                                                      ",Var("opName")),QStr(" := "),StringEscape1("  		                                                                                  ",Var("resolvedLastEquation"))])),[WithClause(Assign(Var("resolvedLastEquation"),App(CallNoArgs(SVar("resolve-last-equation")),Var("data"))))])),RDefNoArgs("resolve-function",Rule(NoAnnoList(Op("Term2",[Var("opKind"),Var("opName"),Var("inputs"),Var("outputs"),Var("locals"),Var("data"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                                                   ",[QStr("var "),StringEscape1("  		                                                                       ",Var("opName")),QStr(" := "),StringEscape1("  		                                                                                   ",Var("resolvedLastEquation"))])),[WithClause(Assign(Var("resolvedLastEquation"),App(CallNoArgs(SVar("resolve-last-equation")),Var("data"))))])),RDefNoArgs("resolve-function",Rule(NoAnnoList(Op("ModeClass",[Var("opKind"),Var("opName"),Var("inputs"),Var("outputs"),Var("locals"),Var("data"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                                                       ",[QStr("var "),StringEscape1("  		                                                                           ",Var("opName")),QStr(" := "),StringEscape1("  		                                                                                       ",Var("resolvedLastEquation"))])),[WithClause(Assign(Var("resolvedLastEquation"),App(CallNoArgs(SVar("resolve-last-equation")),Var("data"))))])),RDefNoArgs("resolve-function",RuleNoCond(NoAnnoList(Op("MainOperator",[Var("opKind"),Var("opName"),Var("inputs"),Var("outputs"),Var("locals"),Var("data"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                                                          ",[])))),RDefNoArgs("resolve-last-equation",Rule(NoAnnoList(Op("Data",[Var("equations"),Var("assumptionOrAsserion")])),NoAnnoList(StringQuotation1("  		                                           ",[StringEscape1("  		                                           ",Var("resolvedLastEquation"))])),[WithClause(Assign(Var("resolvedLastEquation"),App(CallNoArgs(SVar("resolve-last-equation")),NoAnnoList(Tuple([Var("equations"),Var("equations")])))))])),RDefNoArgs("resolve-last-equation",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                        ",[])))),RDefNoArgs("resolve-last-equation",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("head")],NoAnnoList(List([])))),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                 ",[StringEscape1("  		                                 ",Var("resolvedEquation"))])),[WithClause(Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("resolve-equation")),NoAnnoList(Tuple([Var("head"),Var("allEquations"),NoAnnoList(Str("\"true\""))])))))])),RDefNoArgs("resolve-last-equation",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("head")],Var("tail"))),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                   ",[StringEscape1("  		                                   ",Var("resolvedTail"))])),[WithClause(Assign(Var("resolvedTail"),App(CallNoArgs(SVar("resolve-last-equation")),NoAnnoList(Tuple([Var("tail"),Var("allEquations")])))))])),RDefNoArgs("resolve-equation",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Equation",[Var("lefts"),Var("equationRight"),Var("pragmas")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                               ",[StringEscape1("  		                                                                               ",Var("resolvedRight"))])),[WithClause(Assign(Var("resolvedRight"),App(CallNoArgs(SVar("resolve-right")),NoAnnoList(Tuple([Var("equationRight"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-right",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Right",[Var("operand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                      ",[StringEscape1("  		                                                      ",Var("resolvedOperand"))])),[WithClause(Assign(Var("resolvedOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("operand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("IdExpressionOp",[Var("idExpression")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("		                                                                    ",[StringEscape1("		                                                                    ",Var("resolvedIdExpression"))])),[WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("idExpression"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("IdExpression",[Var("expressionName")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("		                                                                    ",[StringEscape1("		                                                                    ",Var("resolvedIdExpression"))])),[WithClause(Assign(Var("equationExists"),App(CallNoArgs(SVar("exists-equation-given-lefts-name")),NoAnnoList(Tuple([Var("expressionName"),Var("allEquations")]))))),WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("resolve-id-expression")),NoAnnoList(Tuple([Var("expressionName"),Var("equationExists"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-id-expression",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Str("\"false\"")),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation2("		                                                               ",[StringEscape2("		                                                               ",Var("resolvedExpression"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([NoAnnoList(Str("\"false\"")),Var("printConstVarRef")]))),Assign(Var("resolvedExpression"),NoAnnoList(StringQuotation1("			                             ",[]))),Assign(Var("resolvedExpression"),Var("expressionName"))))),RDefNoArgs("resolve-id-expression",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(Str("\"true\"")),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation2("		                                                              ",[StringEscape2("		                                                              ",Var("resolvedIdExpression"))])),[WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("resolve-equation-given-lefts-name")),NoAnnoList(Tuple([Var("expressionName"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Event3",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation2("  		  ",[QStr("[] @F ("),StringEscape2("  		         ",Var("resolvedFirstOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Event",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		  ",[QStr("@T"),StringEscape1("  		    ",Var("resolvedSecondOperand"))])),[WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("EventOp",[Var("firstOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                             ",[StringEscape1("  		                                                             ",Var("resolvedFirstOperand"))])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("GreaterThanOrEqual",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                                       ",[QStr("("),StringEscape1("  		                                                                                        ",Var("resolvedFirstOperand")),QStr(" >= "),StringEscape1("  		                                                                                                                  ",Var("resolvedSecondOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("GreaterThan",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                                ",[QStr("("),StringEscape1("  		                                                                                 ",Var("resolvedFirstOperand")),QStr(" >= "),StringEscape1("  		                                                                                                           ",Var("resolvedSecondOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Addiction",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                              ",[QStr("("),StringEscape1("  		                                                                               ",Var("resolvedFirstOperand")),QStr(" + "),StringEscape1("  		                                                                                                        ",Var("resolvedSecondOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Subtraction",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                                ",[QStr("("),StringEscape1("  		                                                                                 ",Var("resolvedFirstOperand")),QStr(" - "),StringEscape1("  		                                                                                                          ",Var("resolvedSecondOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("LessThan",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                             ",[QStr("("),StringEscape1("  		                                                                              ",Var("resolvedFirstOperand")),QStr(" < "),StringEscape1("  		                                                                                                       ",Var("resolvedSecondOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("LessThanOrEqual",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                                    ",[QStr("("),StringEscape1("  		                                                                                     ",Var("resolvedFirstOperand")),QStr(" <= "),StringEscape1("  		                                                                                                               ",Var("resolvedSecondOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Equal",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                          ",[StringEscape1("  		                                                                          ",Var("resolvedFirstOperand")),QStr("="),StringEscape1("  		                                                                                                 ",Var("resolvedSecondOperand"))])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Different",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                              ",[StringEscape1("  		                                                                              ",Var("resolvedFirstOperand")),QStr("<>"),StringEscape1("  		                                                                                                      ",Var("resolvedSecondOperand"))])),[WithClause(Assign(Var("resolvedFirstOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("ConstValue",[Var("currentValue")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                ",[StringEscape1("  		                                                                ",Var("currentValue"))])))),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("NotOperand",[Var("currentOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                  ",[QStr("NOT("),StringEscape1("  		                                                                      ",Var("resolvedCurrentOperand")),QStr(")")])),[WithClause(Assign(Var("resolvedCurrentOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("currentOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("LastVariable",[Var("currentValue")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                  ",[StringEscape1("  		                                                                  ",Var("currentValue"))])))),RDefNoArgs("resolve-operand-recursive",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),Var("allEquations"),Var("printConstVarRef"),Var("opName")])),NoAnnoList(StringQuotation1("  		                                                  ",[])))),RDefNoArgs("resolve-operand-recursive",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("head")],NoAnnoList(List([])))),Var("allEquations"),Var("printConstVarRef"),Var("opName")])),NoAnnoList(StringQuotation1("  		                                                           ",[StringEscape1("  		                                                           ",Var("resolvedhead"))])),[WithClause(Assign(Var("resolvedhead"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("head"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-recursive",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("head")],Var("tail"))),Var("allEquations"),Var("printConstVarRef"),Var("opName")])),NoAnnoList(StringQuotation1("  		                                                            ",[QStr("("),StringEscape1("  		                                                             ",Var("resolvedHead")),QStr(" "),StringEscape1("  		                                                                            ",Var("opName")),QStr(" "),StringEscape1("  		                                                                                     ",Var("resolvedTail")),QStr(")")])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("head"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedTail"),App(CallNoArgs(SVar("resolve-operand-recursive")),NoAnnoList(Tuple([Var("tail"),Var("allEquations"),Var("printConstVarRef"),Var("opName")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("And",[Var("operands")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                     ",[StringEscape1("  		                                                     ",Var("resolvedOperands"))])),[WithClause(Assign(Var("resolvedOperands"),App(CallNoArgs(SVar("resolve-operand-recursive")),NoAnnoList(Tuple([Var("operands"),Var("allEquations"),Var("printConstVarRef"),NoAnnoList(Str("\"AND\""))])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Or",[Var("operands")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                    ",[StringEscape1("  		                                                    ",Var("resolvedOperands"))])),[WithClause(Assign(Var("resolvedOperands"),App(CallNoArgs(SVar("resolve-operand-recursive")),NoAnnoList(Tuple([Var("operands"),Var("allEquations"),Var("printConstVarRef"),NoAnnoList(Str("\"OR\""))])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("AndEvent",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                             ",[StringEscape1("  		                                                                             ",Var("resolvedEvent")),QStr(" WHEN "),StringEscape1("  		                                                                                                  ",Var("resolvedSecondOperand"))])),[WithClause(Assign(Var("resolvedEvent"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("OrEvent",[Var("firstOperand"),Var("secondOperand")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                            ",[StringEscape1("  		                                                                            ",Var("resolvedEvent")),QStr(" WHEN "),StringEscape1("  		                                                                                                 ",Var("resolvedSecondOperand"))])),[WithClause(Assign(Var("resolvedEvent"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("firstOperand"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedSecondOperand"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("secondOperand"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Negative",[Var("operands")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                          ",[QStr("-"),StringEscape1("  		                                                           ",Var("resolvedOperands"))])),[WithClause(Assign(Var("resolvedOperands"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("operands"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("IfThenElseOp",[Var("opName"),Var("ifOp"),Var("thenOp"),Var("elseOp")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		     ",[StringEscape1("  		     ",Var("resolvedIf")),QStr(" -> "),StringEscape1("  		                     ",Var("resolvedThen")),QStr("\n  		"),StringEscape1("  		",Var("resolvedElse"))])),[WithClause(Assign(Var("resolvedIf"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("ifOp"),Var("allEquations"),NoAnnoList(Str("\"true\""))]))))),WithClause(Assign(Var("resolvedThen"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("thenOp"),Var("allEquations"),NoAnnoList(Str("\"true\""))]))))),WithClause(Assign(Var("resolvedElse"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("elseOp"),Var("allEquations"),NoAnnoList(Str("\"true\""))])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("If",[Var("idExpression")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                        ",[StringEscape1("  		                                                        ",Var("resolvedIdExpression"))])),[WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("idExpression"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Then",[Var("listExpression")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                            ",[StringEscape1("  		                                                            ",Var("resolvedListExpression"))])),[WithClause(Assign(Var("resolvedListExpression"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("listExpression"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Else",[Var("listExpression")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                            ",[StringEscape1("  		                                                            ",Var("resolvedListExpression"))])),[WithClause(Assign(Var("resolvedListExpression"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("listExpression"),Var("allEquations"),NoAnnoList(Str("\"false\""))])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("ListExpression",[Var("idExpression")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                                    ",[StringEscape1("  		                                                                    ",Var("resolvedIdExpression"))])),[WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("idExpression"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("CaseOp",[Var("caseOpName"),Var("caseOpSwitch"),Var("cases")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		  ",[QStr("case "),StringEscape1("  		       ",Var("resolvedSwitch")),QStr("\n  			"),StringEscape1("  			",Var("resolvedCases")),QStr("\n  		esac")])),[WithClause(Assign(Var("resolvedSwitch"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("caseOpSwitch"),Var("allEquations"),NoAnnoList(Str("\"true\""))]))))),WithClause(Assign(Var("resolvedCases"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("cases"),Var("allEquations"),NoAnnoList(Str("\"true\""))])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Switch",[Var("idExpression")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                            ",[StringEscape1("  		                                                            ",Var("resolvedSwitch"))])),[WithClause(Assign(Var("resolvedSwitch"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("idExpression"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-operand-2",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Cases",[Var("cases")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                    ",[StringEscape1("  		                                                    ",Var("resolvedCases"))])),[WithClause(Assign(Var("resolvedCases"),App(CallNoArgs(SVar("resolve-cases")),NoAnnoList(Tuple([Var("cases"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-cases",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                          ",[])))),RDefNoArgs("resolve-cases",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("head")],NoAnnoList(List([])))),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		                                                   ",[StringEscape1("  		                                                   ",Var("resolvedHead"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-case")),NoAnnoList(Tuple([Var("head"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-cases",Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("head")],Var("tail"))),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("  		  ",[StringEscape1("  		  ",Var("resolvedHead")),QStr("\n  		"),StringEscape1("  		",Var("resolvedTail"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-case")),NoAnnoList(Tuple([Var("head"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedTail"),App(CallNoArgs(SVar("resolve-cases")),NoAnnoList(Tuple([Var("tail"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-case",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Case",[Var("caseName"),Var("idExpression")])),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation2("  		  ",[QStr("[] "),StringEscape2("  		     ",Var("caseName")),QStr("\n  		"),StringEscape2("  		",Var("resolvedEventOrIf")),QStr("\n  			"),StringEscape2("  			",Var("resolvedIdExpression")),QStr("\n  		"),StringEscape2("  		",Var("resolvedEventOrIfInverted"))])),[WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("resolve-operand-2")),NoAnnoList(Tuple([Var("idExpression"),Var("allEquations"),Var("printConstVarRef")]))))),WithClause(Assign(Var("resolvedEventOrIf"),App(CallNoArgs(SVar("resolve-event-or-if")),NoAnnoList(Tuple([Var("idExpression"),Var("allEquations")]))))),WithClause(Assign(Var("resolvedEventOrIfInverted"),App(CallNoArgs(SVar("resolve-event-or-if-inverted")),NoAnnoList(Tuple([Var("resolvedEventOrIf")])))))])),RDefNoArgs("resolve-event-or-if-inverted",Rule(Var("eventOrIf"),NoAnnoList(StringQuotation1("  		               ",[StringEscape1("  		               ",Var("inverted"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("eventOrIf"),NoAnnoList(Str("\"ev\""))]))),Assign(Var("inverted"),NoAnnoList(StringQuotation1("  			                   ",[QStr("ve")]))),Assign(Var("inverted"),NoAnnoList(StringQuotation1("  			                   ",[QStr("fi")])))))),RDefNoArgs("resolve-event-or-if",Rule(NoAnnoList(Tuple([NoAnnoList(Op("IdExpression",[Var("expressionName")])),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                                  ",[StringEscape1("  		                                                  ",Var("resolvedIdExpression"))])),[WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("look-inside-if")),NoAnnoList(Tuple([Var("expressionName"),Var("allEquations")])))))])),RDefNoArgs("look-inside-if",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations")])),NoAnnoList(StringQuotation1(" 		                                  ",[StringEscape1(" 		                                  ",Var("resolvedEquation"))])),[WithClause(Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("look-inside-if")),NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),Var("allEquations")])))))])),RDefNoArgs("look-inside-if",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),NoAnnoList(ListTail([Var("head")],NoAnnoList(List([]))))])),NoAnnoList(StringQuotation1("		                                               ",[StringEscape1("		                                               ",Var("resolvedHead"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-if")),NoAnnoList(Tuple([Var("head"),Var("allEquations")])))))])),RDefNoArgs("look-inside-if",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),NoAnnoList(ListTail([Var("head")],Var("tail")))])),NoAnnoList(StringQuotation1("		                                                 ",[StringEscape1("		                                                 ",Var("resolvedEquation"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("equationName"),App(CallNoArgs(SVar("get-equation-name")),Var("head"))]))),Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("resolve-if")),NoAnnoList(Tuple([Var("head"),Var("allEquations")])))),Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("look-inside-if")),NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),Var("tail")]))))))),RDefNoArgs("resolve-if",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Equation",[Var("lefts"),NoAnnoList(Op("Right",[NoAnnoList(Op("IfThenElseOp",[Var("pragmaId"),NoAnnoList(Op("If",[Var("ifIdExpression")])),Var("thenOp"),Var("elseOp")]))])),Var("pragmas")])),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                                                                                                 ",[StringEscape1("  		                                                                                                                 ",Var("resolvedRight"))])),[WithClause(Assign(Var("resolvedRight"),App(CallNoArgs(SVar("is-if-event-or-not")),NoAnnoList(Tuple([Var("ifIdExpression"),Var("allEquations")])))))])),RDefNoArgs("is-if-event-or-not",Rule(NoAnnoList(Tuple([NoAnnoList(Op("IdExpression",[Var("expressionName")])),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                                 ",[StringEscape1("  		                                                 ",Var("resolvedIdExpression"))])),[WithClause(Assign(Var("resolvedIdExpression"),App(CallNoArgs(SVar("is-if-event-or-not")),NoAnnoList(Tuple([Var("expressionName"),Var("allEquations")])))))])),RDefNoArgs("is-if-event-or-not",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations")])),NoAnnoList(StringQuotation1(" 		                                  ",[StringEscape1(" 		                                  ",Var("resolvedEquation"))])),[WithClause(Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("is-if-event-or-not")),NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),Var("allEquations")])))))])),RDefNoArgs("is-if-event-or-not",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),NoAnnoList(ListTail([Var("head")],NoAnnoList(List([]))))])),NoAnnoList(StringQuotation1("		                                               ",[StringEscape1("		                                               ",Var("resolvedHead"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("event-or-not")),NoAnnoList(Tuple([Var("head"),Var("allEquations")])))))])),RDefNoArgs("is-if-event-or-not",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),NoAnnoList(ListTail([Var("head")],Var("tail")))])),NoAnnoList(StringQuotation1("		                                                 ",[StringEscape1("		                                                 ",Var("resolvedEquation"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("equationName"),App(CallNoArgs(SVar("get-equation-name")),Var("head"))]))),Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("event-or-not")),NoAnnoList(Tuple([Var("head"),Var("allEquations")])))),Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("is-if-event-or-not")),NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),Var("tail")]))))))),RDefNoArgs("event-or-not",Rule(NoAnnoList(Tuple([NoAnnoList(Op("Equation",[Var("lefts"),Var("equationRight"),Var("pragmas")])),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                                             ",[StringEscape1("  		                                                             ",Var("resolvedRight"))])),[WithClause(Assign(Var("resolvedRight"),App(CallNoArgs(SVar("event-or-not")),NoAnnoList(Tuple([Var("equationRight"),Var("allEquations")])))))])),RDefNoArgs("event-or-not",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Right",[NoAnnoList(Op("EventOp",[Var("event")]))])),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                           ",[QStr("ev")])))),RDefNoArgs("event-or-not",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("Right",[Var("operandNotEvent")])),Var("allEquations")])),NoAnnoList(StringQuotation1("  		                                            ",[QStr("if")])))),RDefNoArgs("resolve-equation-given-lefts-name",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),Var("printConstVarRef")])),NoAnnoList(StringQuotation1(" 		                                                    ",[StringEscape1(" 		                                                    ",Var("resolvedEquation"))])),[WithClause(Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("resolve-equation-given-lefts-name")),NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-equation-given-lefts-name",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),NoAnnoList(ListTail([Var("head")],NoAnnoList(List([])))),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("		                                                                 ",[StringEscape1("		                                                                 ",Var("resolvedHead"))])),[WithClause(Assign(Var("resolvedHead"),App(CallNoArgs(SVar("resolve-equation")),NoAnnoList(Tuple([Var("head"),Var("allEquations"),Var("printConstVarRef")])))))])),RDefNoArgs("resolve-equation-given-lefts-name",Rule(NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),NoAnnoList(ListTail([Var("head")],Var("tail"))),Var("printConstVarRef")])),NoAnnoList(StringQuotation1("		                                                                   ",[StringEscape1("		                                                                   ",Var("resolvedEquation"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("equationName"),App(CallNoArgs(SVar("get-equation-name")),Var("head"))]))),Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("resolve-equation")),NoAnnoList(Tuple([Var("head"),Var("allEquations"),Var("printConstVarRef")])))),Assign(Var("resolvedEquation"),App(CallNoArgs(SVar("resolve-equation-given-lefts-name")),NoAnnoList(Tuple([Var("equationName"),Var("allEquations"),Var("tail"),Var("printConstVarRef")]))))))),RDefNoArgs("exists-equation-given-lefts-name",RuleNoCond(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(List([]))])),NoAnnoList(StringQuotation1("  		                          ",[QStr("false")])))),RDefNoArgs("exists-equation-given-lefts-name",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(ListTail([Var("head")],NoAnnoList(List([]))))])),NoAnnoList(StringQuotation1("	  	                                   ",[StringEscape1("	  	                                   ",Var("exists"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("expressionName"),App(CallNoArgs(SVar("get-equation-name")),Var("head"))]))),Assign(Var("exists"),NoAnnoList(StringQuotation1("	  			                 ",[QStr("true")]))),Assign(Var("exists"),NoAnnoList(StringQuotation1("	  			                 ",[QStr("false")])))))),RDefNoArgs("exists-equation-given-lefts-name",Rule(NoAnnoList(Tuple([Var("expressionName"),NoAnnoList(ListTail([Var("head")],Var("tail")))])),NoAnnoList(StringQuotation1("  		                                     ",[StringEscape1("  		                                     ",Var("exists"))])),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("expressionName"),App(CallNoArgs(SVar("get-equation-name")),Var("head"))]))),Assign(Var("exists"),NoAnnoList(StringQuotation1("	  			                 ",[QStr("true")]))),Assign(Var("exists"),App(CallNoArgs(SVar("exists-equation-given-lefts-name")),NoAnnoList(Tuple([Var("expressionName"),Var("tail")]))))))),RDefNoArgs("get-equation-name",Rule(NoAnnoList(Op("Equation",[Var("lefts"),Var("equationRight"),Var("pragmas")])),NoAnnoList(StringQuotation1("  		                                             ",[StringEscape1("  		                                             ",Var("leftsName"))])),[WithClause(Assign(Var("leftsName"),App(CallNoArgs(SVar("get-lefts-name")),Var("lefts"))))])),RDefNoArgs("get-lefts-name",RuleNoCond(NoAnnoList(Op("Lefts",[Var("leftsName")])),NoAnnoList(StringQuotation1("  		                      ",[StringEscape1("  		                      ",Var("leftsName"))]))))])])