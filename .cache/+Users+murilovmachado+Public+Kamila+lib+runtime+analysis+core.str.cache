Module("runtime/analysis/core",[Imports([Import("runtime/analysis/builtins"),Import("runtime/analysis/legacy"),Import("runtime/analysis/interface"),Import("runtime/nabl/collect"),Import("runtime/nabl/uri"),Import("runtime/nabl/incremental"),Import("runtime/relations/incremental"),Import("runtime/index/core"),Import("runtime/task/core"),Import("runtime/task/messages"),Import("runtime/editor/origins"),Import("runtime/editor/editor"),Import("runtime/editor/queue"),Import("runtime/editor/dynrule"),Import("runtime/editor/time"),Import("runtime/nabl/utils")]),Signature([Constructors([OpDecl("File",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Int"))],ConstType(SortNoArgs("File")))),OpDecl("File",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Int"))],ConstType(SortNoArgs("File")))),OpDecl("Result",FunType([ConstType(Sort("List",[SortNoArgs("FileResult")])),ConstType(Sort("List",[SortNoArgs("String")])),ConstType(SortNoArgs("DebugResult")),ConstType(SortNoArgs("TimeResult"))],ConstType(SortNoArgs("Result")))),OpDecl("FileResult",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("String")),ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term")),ConstType(Sort("List",[SortNoArgs("Term")])),ConstType(Sort("List",[SortNoArgs("Term")])),ConstType(Sort("List",[SortNoArgs("Term")]))],ConstType(SortNoArgs("FileResult")))),OpDecl("CollectDebugResult",FunType([ConstType(SortNoArgs("Int")),ConstType(SortNoArgs("Int")),ConstType(SortNoArgs("Int")),ConstType(SortNoArgs("Int")),ConstType(SortNoArgs("Int"))],ConstType(SortNoArgs("CollectDebugResult")))),OpDecl("DebugResult",FunType([ConstType(SortNoArgs("CollectDebugResult")),ConstType(Sort("List",[SortNoArgs("TaskID")])),ConstType(Sort("List",[SortNoArgs("TaskID")])),ConstType(Sort("List",[SortNoArgs("TaskID")]))],ConstType(SortNoArgs("DebugResult")))),OpDecl("TimeResult",FunType([ConstType(SortNoArgs("Real")),ConstType(SortNoArgs("Real")),ConstType(SortNoArgs("Real")),ConstType(SortNoArgs("Real")),ConstType(SortNoArgs("Real")),ConstType(SortNoArgs("Real")),ConstType(SortNoArgs("Real"))],ConstType(SortNoArgs("TimeResult"))))])]),Rules([SDefNoArgs("analysis-spoofax",LChoice(Seq(CallNoArgs(SVar("is-list")),CallT(SVar("queue-strategy"),[],[NoAnnoList(Str("\"analysis-interface\"")),NoAnnoList(Str("\"Analyzing files\""))])),CallNoArgs(SVar("analysis-interface")))),SDefNoArgs("analysis-cmd",CallNoArgs(SVar("analysis-interface"))),SDefT("analysis-top",[DefaultVarDec("parse-file"),DefaultVarDec("pre-trans"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],CallT(SVar("analysis-top"),[CallNoArgs(SVar("parse-file")),CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("nabl-collect")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")])),RDefT("analysis-top",[DefaultVarDec("parse-file"),DefaultVarDec("pre-trans"),DefaultVarDec("collector"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],Rule(Var("input"),RootApp(CallT(SVar("analysis-files"),[CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("collector")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")])),BA(Seq(CallNoArgs(SVar("is-list")),Call(SVar("map"),[Match(NoAnnoList(Op("File",[Wld,Wld,Wld])))])),Var("input")))),RDefT("analysis-top",[DefaultVarDec("parse-file"),DefaultVarDec("pre-trans"),DefaultVarDec("collector"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],Rule(Var("input"),RootApp(CallT(SVar("analysis-files-spoofax"),[CallNoArgs(SVar("parse-file")),CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("collector")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")])),BA(LChoice(CallNoArgs(SVar("is-tuple")),Seq(CallNoArgs(SVar("is-list")),Call(SVar("map"),[CallNoArgs(SVar("is-string"))]))),Var("input"))))]),Rules([SDefT("analysis-files",[DefaultVarDec("pre-trans"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],CallT(SVar("analysis-files"),[CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("nabl-collect")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")])),SDefT("analysis-files",[DefaultVarDec("pre-trans"),DefaultVarDec("collector"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],Seq(Where(CallT(SVar("analysis-analyze-builtin-partitions"),[CallNoArgs(SVar("collector"))],[Var("language"),Var("project-path")])),CallT(SVar("analysis-files-no-builtins"),[CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("collector")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message")),Id,Id],[Var("language"),Var("project-path")]))),RDefT("analysis-files-no-builtins",[DefaultVarDec("pre-trans"),DefaultVarDec("collector"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message"),DefaultVarDec("try-recover"),DefaultVarDec("should-setup")],[DefaultVarDec("language"),DefaultVarDec("project-path")],Rule(Var(ListVar("file*")),NoAnnoList(Op("Result",[Var(ListVar("post-trans-result*")),Var(ListVar("affected-source*")),Var("debug-result"),NoAnnoList(Op("TimeResult",[Var("parse-time"),Var("pre-trans-time"),Var("collect-time"),Var("evaluate-time"),Var("post-trans-time"),Var("index-persist-time"),Var("task-persist-time")]))])),[WithClause(Seq(Assign(Var("total-progress"),App(CallNoArgs(SVar("analysis-files-total-progress")),Var(ListVar("file*")))),BA(CallNoArgs(SVar("analysis-set-progress")),Var("total-progress")))),WithClause(Seq(Assign(Var("parse-time"),App(Seq(Call(SVar("map"),[Match(NoAnnoList(Op("File",[Wld,Wld,RootApp(Id)])))]),Call(SVar("foldr"),[Build(NoAnnoList(Real("0.0"))),CallNoArgs(SVar("addr"))])),Var(ListVar("file*")))),Seq(Call(SVar("measure-time"),[Assign(Var(ListVar("pre-trans-file*")),App(Call(SVar("map"),[Seq(Call(SVar("analysis-files-pre-trans"),[CallNoArgs(SVar("pre-trans"))]),CallT(SVar("analysis-inc-progress"),[],[Var("total-progress")]))]),Var(ListVar("file*")))),Match(Var("pre-trans-time"))]),Seq(Call(SVar("try"),[Seq(CallNoArgs(SVar("should-setup")),CallT(SVar("index-setup"),[],[Var("language"),Var("project-path")]))]),Seq(Call(SVar("try"),[Seq(CallNoArgs(SVar("try-recover")),CallNoArgs(SVar("index-recover")))]),Seq(Call(SVar("try"),[Seq(CallNoArgs(SVar("should-setup")),CallT(SVar("task-setup"),[],[Var("project-path")]))]),Seq(Call(SVar("try"),[Seq(CallNoArgs(SVar("try-recover")),CallNoArgs(SVar("task-recover")))]),Seq(Call(SVar("measure-time"),[Assign(Var(ListVar("collect-result*")),App(Call(SVar("map"),[Seq(CallT(SVar("analysis-collect"),[CallNoArgs(SVar("collector"))],[Var("language"),Var("project-path")]),CallT(SVar("analysis-inc-progress"),[],[Var("total-progress")]))]),Var(ListVar("pre-trans-file*")))),Match(Var("collect-time"))]),Seq(Assign(NoAnnoList(Tuple([Var(ListVar("result*")),Var(ListVar("collect-debug-result*"))])),App(CallNoArgs(SVar("unzip")),Var(ListVar("collect-result*")))),Seq(Call(SVar("measure-time"),[Seq(AM(CallNoArgs(SVar("task-evaluate-scheduled")),NoAnnoList(Tuple([Var(ListVar("evaluated-task*")),Var(ListVar("skipped-task*")),Var(ListVar("unevaluated-task*"))]))),BA(Call(SVar("map"),[CallNoArgs(SVar("analysis-collect-legacy-messages"))]),Var(ListVar("result*")))),Match(Var("evaluate-time"))]),Seq(CallT(SVar("analysis-inc-progress"),[],[Var("total-progress")]),Seq(AM(CallT(SVar("task-sources-of"),[],[Var(ListVar("evaluated-task*"))]),Var(ListVar("affected-source*"))),Seq(Assign(Var(ListVar("messages-result*")),App(Call(SVar("map"),[Call(SVar("analysis-add-messages"),[CallNoArgs(SVar("pp-message"))])]),Var(ListVar("result*")))),Seq(Call(SVar("measure-time"),[Assign(Var(ListVar("post-trans-result*")),App(Call(SVar("map"),[Call(SVar("analysis-files-post-trans"),[CallNoArgs(SVar("post-trans"))])]),Var(ListVar("messages-result*")))),Match(Var("post-trans-time"))]),Assign(Var("collect-acc-debug-result"),App(CallNoArgs(SVar("analysis-accumulate-collect-debug-results")),Var(ListVar("collect-debug-result*")))))))))))))))))),WithClause(LChoice(Seq(CallNoArgs(SVar("analysis-disable-persist")),Seq(Assign(Var("index-persist-time"),NoAnnoList(Real("0.0"))),Assign(Var("task-persist-time"),NoAnnoList(Real("0.0"))))),Seq(Call(SVar("measure-time"),[CallNoArgs(SVar("index-persist")),Match(Var("index-persist-time"))]),Call(SVar("measure-time"),[CallNoArgs(SVar("task-persist")),Match(Var("task-persist-time"))])))),WithClause(Seq(Assign(Var("debug-result"),NoAnnoList(Op("DebugResult",[Var("collect-acc-debug-result"),Var(ListVar("evaluated-task*")),Var(ListVar("skipped-task*")),Var(ListVar("unevaluated-task*"))]))),BA(CallNoArgs(SVar("analysis-debug-results")),Var("debug-result"))))])),RDef("analysis-files-pre-trans",[DefaultVarDec("pre-transform")],RuleNoCond(NoAnnoList(Op("File",[Var("path"),Var("ast"),Var("parse-time")])),NoAnnoList(Op("File",[Var("path"),Var("ast"),App(LChoice(CallNoArgs(SVar("analysis-pre-trans")),CallNoArgs(SVar("pre-transform"))),Var("ast")),Var("parse-time")])))),RDef("analysis-files-post-trans",[DefaultVarDec("post-trans")],Rule(NoAnnoList(Op("FileResult",[Var("language"),Var("project-path"),Var("partition"),Var("initial-ast"),Var("analyzed-ast"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),NoAnnoList(Op("FileResult",[Var("language"),Var("project-path"),Var("partition"),Var("initial-ast"),Var("analyzed-transformed-ast"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),Assign(Var("analyzed-transformed-ast"),App(LChoice(CallT(SVar("analysis-post-trans"),[],[Var("partition")]),CallNoArgs(SVar("post-trans"))),Var("analyzed-ast"))))),RDefNoArgs("analysis-files-total-progress",RuleNoCond(Var(ListVar("file*")),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([App(CallNoArgs(SVar("mul")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var(ListVar("file*"))),NoAnnoList(Int("2"))]))),NoAnnoList(Int("1"))])))))]),Rules([RDefT("analysis-collect",[DefaultVarDec("collector")],[DefaultVarDec("language"),DefaultVarDec("project-path")],Rule(NoAnnoList(Op("File",[Var("partition"),Var("initial-ast"),Var("transformed-ast"),Wld])),NoAnnoList(Tuple([NoAnnoList(Op("FileResult",[Var("language"),Var("project-path"),Var("partition"),Var("initial-ast"),Var("analyzed-ast"),NoAnnoList(List([])),NoAnnoList(List([])),NoAnnoList(List([]))])),NoAnnoList(Op("CollectDebugResult",[App(CallNoArgs(SVar("length")),Var(ListVar("removed-entry*"))),App(CallNoArgs(SVar("length")),Var(ListVar("added-entry*"))),App(CallNoArgs(SVar("length")),Var(ListVar("removed-task*"))),App(CallNoArgs(SVar("length")),Var(ListVar("added-task*"))),App(CallNoArgs(SVar("length")),Var(ListVar("invalidated-task*")))]))])),[WithClause(Seq(CallT(SVar("index-start-collection"),[],[Var("partition")]),Seq(CallT(SVar("task-start-collection"),[],[Var("partition")]),Seq(Assign(Var("analyzed-ast"),App(CallT(SVar("collector"),[Id],[NoAnnoList(Op("Language",[Var("language")])),Var("partition"),RootApp(CallNoArgs(SVar("new-hashtable"))),NoAnnoList(List([]))]),Var("transformed-ast"))),Seq(AM(CallT(SVar("index-stop-collection"),[],[Var("partition")]),NoAnnoList(Tuple([Var(ListVar("removed-entry*")),Var(ListVar("added-entry*"))]))),Seq(AM(CallT(SVar("task-stop-collection"),[],[Var("partition")]),NoAnnoList(Tuple([Var(ListVar("removed-task*")),Var(ListVar("added-task*"))]))),Seq(Assign(Var(ListVar("change*")),NoAnnoList(List([Var(ListVar("removed-entry*")),Var(ListVar("added-entry*"))]))),Seq(Assign(Var(ListVar("nabl-changed-read*")),App(CallNoArgs(SVar("nabl-get-changed-reads")),Var(ListVar("change*")))),Seq(Assign(Var(ListVar("rel-changed-read*")),App(CallNoArgs(SVar("relation-get-changed-reads")),Var(ListVar("change*")))),Seq(Assign(Var(ListVar("changed-read*")),NoAnnoList(List([Var(ListVar("nabl-changed-read*")),Var(ListVar("rel-changed-read*"))]))),AM(CallT(SVar("task-invalidate-task-reads"),[],[Var(ListVar("changed-read*"))]),Var(ListVar("invalidated-task*")))))))))))))])),RDef("analysis-add-messages",[DefaultVarDec("pp-message")],Rule(NoAnnoList(Op("FileResult",[Var("language"),Var("project-path"),Var("partition"),Var("initial-ast"),Var("analyzed-ast"),Wld,Wld,Wld])),NoAnnoList(Op("FileResult",[Var("language"),Var("project-path"),Var("partition"),Var("initial-ast"),Var("analyzed-ast"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),[WithClause(Assign(NoAnnoList(Tuple([Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),App(Call(SVar("analysis-get-messages"),[CallNoArgs(SVar("pp-message"))]),Var("partition"))))])),RDef("analysis-get-messages",[DefaultVarDec("pp-message")],Rule(Var("partition"),NoAnnoList(Tuple([Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),[WithClause(Seq(Assign(Var(ListVar("task-message*")),RootApp(CallT(SVar("task-get-messages"),[],[Var("partition")]))),Seq(Assign(Var(ListVar("legacy-message*")),RootApp(CallT(SVar("analysis-get-legacy-messages"),[],[Var("partition")]))),Seq(Assign(Var(ListVar("message*")),NoAnnoList(List([Var(ListVar("task-message*")),Var(ListVar("legacy-message*"))]))),Seq(Assign(Var(ListVar("error*")),App(Call(SVar("filter"),[Seq(Match(NoAnnoList(Op("Error",[Wld,Wld,Wld]))),Seq(CallNoArgs(SVar("analysis-message-to-tuple")),CallNoArgs(SVar("pp-message"))))]),Var(ListVar("message*")))),Seq(Assign(Var(ListVar("warning*")),App(Call(SVar("filter"),[Seq(Match(NoAnnoList(Op("Warning",[Wld,Wld,Wld]))),Seq(CallNoArgs(SVar("analysis-message-to-tuple")),CallNoArgs(SVar("pp-message"))))]),Var(ListVar("message*")))),Assign(Var(ListVar("note*")),App(Call(SVar("filter"),[Seq(Match(NoAnnoList(Op("Note",[Wld,Wld,Wld]))),Seq(CallNoArgs(SVar("analysis-message-to-tuple")),CallNoArgs(SVar("pp-message"))))]),Var(ListVar("message*"))))))))))])),RDefNoArgs("analysis-message-to-tuple",Rule(Var("message"),NoAnnoList(Tuple([App(CallT(SVar("origin-location-offset-set"),[],[Var("origin")]),Var("term")),Var("msg")])),[WithClause(Seq(Assign(Var("origin"),App(CallNoArgs(SVar("task-message-origin")),Var("message"))),Seq(Assign(Var("term"),App(CallNoArgs(SVar("task-message-term")),Var("message"))),Assign(Var("msg"),App(CallNoArgs(SVar("task-message")),Var("message"))))))])),RDefNoArgs("analysis-accumulate-collect-debug-results",RuleNoCond(Var(ListVar("debug-result*")),App(Call(SVar("foldl"),[CallNoArgs(SVar("analysis-concat-debug-result"))]),NoAnnoList(Tuple([Var(ListVar("debug-result*")),NoAnnoList(Op("CollectDebugResult",[NoAnnoList(Int("0")),NoAnnoList(Int("0")),NoAnnoList(Int("0")),NoAnnoList(Int("0")),NoAnnoList(Int("0"))]))]))))),RDefNoArgs("analysis-concat-debug-result",Rule(NoAnnoList(Tuple([NoAnnoList(Op("CollectDebugResult",[Var("removed-entry1-count"),Var("added-entry1-count"),Var("removed-task1-count"),Var("added-task1-count"),Var("invalidated-task1-count")])),NoAnnoList(Op("CollectDebugResult",[Var("removed-entry2-count"),Var("added-entry2-count"),Var("removed-task2-count"),Var("added-task2-count"),Var("invalidated-task2-count")]))])),NoAnnoList(Op("CollectDebugResult",[Var("removed-entry-count"),Var("added-entry-count"),Var("removed-task-count"),Var("added-task-count"),Var("invalidated-task-count")])),[WithClause(Seq(Assign(Var("removed-entry-count"),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("removed-entry1-count"),Var("removed-entry2-count")])))),Seq(Assign(Var("added-entry-count"),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("added-entry1-count"),Var("added-entry2-count")])))),Seq(Assign(Var("removed-task-count"),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("removed-task1-count"),Var("removed-task2-count")])))),Seq(Assign(Var("added-task-count"),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("added-task1-count"),Var("added-task2-count")])))),Assign(Var("invalidated-task-count"),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("invalidated-task1-count"),Var("invalidated-task2-count")])))))))))]))]),Rules([SDefT("analysis-files-spoofax",[DefaultVarDec("parse-file"),DefaultVarDec("pre-trans"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],CallT(SVar("analysis-files-spoofax"),[CallNoArgs(SVar("parse-file")),CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("nabl-collect")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")])),RDefT("analysis-files-spoofax",[DefaultVarDec("parse-file"),DefaultVarDec("pre-trans"),DefaultVarDec("collector"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],Rule(Var("input"),Var("output"),[WithClause(Seq(Assign(Var(ListVar("file*")),App(CallT(SVar("analysis-spoofax-to-files"),[CallNoArgs(SVar("parse-file"))],[Var("project-path")]),Var("input"))),Seq(Assign(Var("result"),App(CallT(SVar("analysis-files"),[CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("collector")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")]),Var(ListVar("file*")))),Assign(Var("output"),App(Call(SVar("analysis-spoofax-output"),[CallNoArgs(SVar("pp-message"))]),Var("result"))))))])),RDefT("analysis-spoofax-to-files",[DefaultVarDec("parse-file")],[DefaultVarDec("project-path")],RuleNoCond(NoAnnoList(Tuple([Var("ast"),Var("path"),Wld])),NoAnnoList(List([NoAnnoList(Op("File",[App(CallT(SVar("analysis-partition"),[],[Var("project-path")]),Var("path")),Var("ast"),NoAnnoList(Real("-1.0"))]))])))),RDefT("analysis-spoofax-to-files",[DefaultVarDec("parse-file")],[DefaultVarDec("project-path")],Rule(Var(ListVar("path*")),Var(ListVar("file*")),[WhereClause(BA(CallNoArgs(SVar("is-list")),Var(ListVar("path*")))),WithClause(Assign(Var(ListVar("file*")),App(Call(SVar("map"),[Seq(CallT(SVar("analysis-partition"),[],[Var("project-path")]),Call(SVar("analyze-parse-file"),[CallNoArgs(SVar("parse-file"))]))]),Var(ListVar("path*")))))])),RDef("analyze-parse-file",[DefaultVarDec("parse-file")],Rule(Var("path"),NoAnnoList(Op("File",[Var("path"),Var("ast"),Var("parse-time")])),[WithClause(IfThen(Not(Call(SVar("measure-time"),[Assign(Var("ast"),App(Seq(CallNoArgs(SVar("file-exists")),CallNoArgs(SVar("parse-file"))),Var("path"))),Match(Var("parse-time"))])),Seq(Assign(Var("ast"),NoAnnoList(Tuple([]))),Assign(Var("parse-time"),NoAnnoList(Real("-1.0"))))))])),RDef("analysis-spoofax-output",[DefaultVarDec("pp-message")],Rule(NoAnnoList(Op("Result",[Var(ListVar("file-result*")),Var(ListVar("affected-source*")),Wld,Wld])),NoAnnoList(Tuple([Var("analyzed-ast"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),[WhereClause(BA(Not(Seq(CallNoArgs(SVar("Tl")),CallNoArgs(SVar("Tl")))),Var(ListVar("file-result*")))),WithClause(Seq(Assign(NoAnnoList(Op("FileResult",[Wld,Wld,Var("partition"),Wld,Var("analyzed-ast"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),App(CallNoArgs(SVar("Hd")),Var(ListVar("file-result*")))),Seq(Assign(Var(ListVar("changed-partition*")),App(Call(SVar("filter"),[CallT(SVar("analysis-spoofax-updatable-partition"),[],[NoAnnoList(List([Var("partition")]))])]),Var(ListVar("affected-source*")))),BA(Call(SVar("map"),[Call(SVar("analysis-spoofax-update-file"),[CallNoArgs(SVar("pp-message"))])]),Var(ListVar("changed-partition*"))))))])),RDef("analysis-spoofax-output",[DefaultVarDec("pp-message")],Rule(As(Var("result"),NoAnnoList(Op("Result",[Var(ListVar("file-result*")),Var(ListVar("affected-source*")),Wld,Wld]))),Var("result"),[WhereClause(BA(Seq(CallNoArgs(SVar("Tl")),CallNoArgs(SVar("Tl"))),Var(ListVar("file-result*")))),WithClause(Seq(BA(Call(SVar("map"),[CallNoArgs(SVar("analysis-spoofax-update-file-from-result"))]),Var(ListVar("file-result*"))),Seq(Assign(Var(ListVar("analyzed-partition*")),App(Call(SVar("map"),[CallNoArgs(SVar("analysis-file-result-partition"))]),Var(ListVar("file-result*")))),Seq(Assign(Var(ListVar("changed-partition*")),App(Call(SVar("filter"),[CallT(SVar("analysis-spoofax-updatable-partition"),[],[Var(ListVar("analyzed-partition*"))])]),Var(ListVar("affected-source*")))),BA(Call(SVar("map"),[Call(SVar("analysis-spoofax-update-file"),[CallNoArgs(SVar("pp-message"))])]),Var(ListVar("changed-partition*")))))))])),RDef("analysis-spoofax-update-file",[DefaultVarDec("pp-message")],RuleNoCond(Var("partition"),App(Seq(Call(SVar("analysis-get-messages"),[CallNoArgs(SVar("pp-message"))]),CallT(SVar("set-only-markers"),[],[Var("partition")])),Var("partition")))),RDefNoArgs("analysis-spoofax-update-file-from-result",Rule(NoAnnoList(Op("FileResult",[Wld,Wld,Var("partition"),Var("initial-ast"),Var("analyzed-ast"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),NoAnnoList(Op("None",[])),[WithClause(BA(CallT(SVar("set-markers"),[],[Var("partition")]),NoAnnoList(Tuple([Var("analyzed-ast"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))]))))])),SDefNoArgs("analysis-spoofax-updatable-partition",Seq(CallNoArgs(SVar("is-string")),Not(CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\".spt\""))])))),RDefT("analysis-spoofax-updatable-partition",[],[DefaultVarDec(ListVar("partition*"))],Rule(Var("partition"),App(CallNoArgs(SVar("analysis-spoofax-updatable-partition")),Var("partition")),BA(Not(Call(SVar("fetch"),[Match(Var("partition"))])),Var(ListVar("partition*")))))]),Rules([RDefT("analysis-partition",[],[DefaultVarDec("project-path")],RuleNoCond(Var("path"),NoAnnoList(StringQuotation1("              ",[StringEscape1("              ",Var("project-path")),QStr("/"),StringEscape1("                             ",Var("path"))])))),RDefNoArgs("analysis-file-result-partition",RuleNoCond(NoAnnoList(Op("FileResult",[Wld,Wld,Var("partition"),Wld,Wld,Wld,Wld,Wld])),Var("partition"))),SDefNoArgs("analysis-set-progress",Call(SVar("try"),[Seq(Where(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("0"))])))),CallNoArgs(SVar("set-total-work-units")))])),SDefT("analysis-inc-progress",[],[DefaultVarDec("total-size")],Where(Call(SVar("try"),[Seq(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([Var("total-size"),NoAnnoList(Int("0"))]))),CallNoArgs(SVar("complete-work-unit")))])))]),Rules([SDef("analysis-debug",[DefaultVarDec("msg")],Call(SVar("try"),[Call(SVar("analysis-debug-interface"),[CallNoArgs(SVar("msg"))])])),SDefNoArgs("analysis-debug",Call(SVar("try"),[CallNoArgs(SVar("analysis-debug-interface"))])),SDef("analysis-debug-interface",[DefaultVarDec("msg")],Fail),SDefNoArgs("analysis-debug-interface",Fail),RDefNoArgs("analysis-debug-results",Rule(NoAnnoList(Op("DebugResult",[NoAnnoList(Op("CollectDebugResult",[Var("removed-entry-count"),Var("added-entry-count"),Var("removed-task-count"),Var("added-task-count"),Var("invalidated-task-count")])),Var(ListVar("evaluated-task*")),Var(ListVar("skipped-task*")),Var(ListVar("unevaluated-task*"))])),RootApp(Id),[WithClause(Seq(BA(CallNoArgs(SVar("analysis-debug")),NoAnnoList(StringQuotation1("                         ",[QStr("Entries : "),StringEscape1("                                   ",Var("removed-entry-count")),QStr(" removed, "),StringEscape1("                                                                  ",Var("added-entry-count")),QStr(" added.")]))),Seq(BA(CallNoArgs(SVar("analysis-debug")),NoAnnoList(StringQuotation1("                         ",[QStr("Tasks   : "),StringEscape1("                                   ",Var("removed-task-count")),QStr(" removed, "),StringEscape1("                                                                 ",Var("added-task-count")),QStr(" added, "),StringEscape1("                                                                                           ",Var("invalidated-task-count")),QStr(" invalidated, "),StringEscape1("                                                                                                                                 ",App(CallNoArgs(SVar("length")),Var(ListVar("evaluated-task*")))),QStr(" evaluated, "),StringEscape1("                                                                                                                                                                       ",App(CallNoArgs(SVar("length")),Var(ListVar("skipped-task*")))),QStr(" skipped, "),StringEscape1("                                                                                                                                                                                                         ",App(CallNoArgs(SVar("length")),Var(ListVar("unevaluated-task*")))),QStr(" unevaluated.")]))),BA(Call(SVar("map"),[Seq(CallT(SVar("task-debug-info"),[],[RootApp(Id)]),Call(SVar("analysis-debug"),[Build(NoAnnoList(Str("\"Unevaluated: \"")))]))]),Var(ListVar("unevaluated-task*"))))))]))])])