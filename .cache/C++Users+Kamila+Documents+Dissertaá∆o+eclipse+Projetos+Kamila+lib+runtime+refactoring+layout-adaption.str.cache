Module("runtime/refactoring/layout-adaption",[Imports([Import("runtime/editor/origins"),Import("runtime/refactoring/construct-text"),Import("runtime/refactoring/construct-initial-list-structure")]),Rules([SDefNoArgs("TABSIZE",Build(NoAnnoList(Int("4"))))]),Rules([RDef("ast-change-to-text-change",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Op("DELETION",[Var("origin-lst")])),Var("tc-deletion"),[WithClause(Assign(Var("tc-deletion"),App(CallNoArgs(SVar("create-textchange-delete")),Var("origin-lst"))))])),RDef("ast-change-to-text-change",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Op("REPLACEMENT",[Var("origin-node"),Var("new-node")])),Var("tc-replacement"),[WithClause(Assign(Var("tc-replacement"),App(Call(SVar("create-textchange-replace"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-node"),Var("new-node")])))))])),RDef("ast-change-to-text-change",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Op("INSERT_BEFORE",[Var("origin-elem"),Var("new-elems")])),Var("tc-insert-before"),[WithClause(Assign(Var("tc-insert-before"),App(Call(SVar("create-textchange-insert-before"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-elem"),Var("new-elems")])))))])),RDef("ast-change-to-text-change",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Op("INSERT_AT_END",[Var("origin-elem"),Var("new-elems")])),Var("tc-insert-at-end"),[WithClause(Assign(Var("tc-insert-at-end"),App(Call(SVar("create-textchange-insert-at-end"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-elem"),Var("new-elems")])))))])),RDefNoArgs("create-textchange-delete",Rule(Var("origin-elems"),NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),NoAnnoList(Str("\"\""))])),Seq(Assign(Var("start-offset"),App(CallNoArgs(SVar("origin-deletion-start-offset")),Var("origin-elems"))),Assign(Var("end-offset"),App(CallNoArgs(SVar("origin-deletion-end-offset")),Var("origin-elems")))))),RDef("create-textchange-replace",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("new-node")])),NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),Var("indented-text")])),Seq(Assign(Var("start-offset"),App(CallNoArgs(SVar("origin-start-offset")),Var("origin-node"))),Seq(Assign(Var("end-offset"),App(CallNoArgs(SVar("origin-end-offset")),Var("origin-node"))),Seq(Assign(Var("text"),App(Call(SVar("construct-text"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),Var("new-node"))),Assign(Var("indented-text"),App(CallT(SVar("adapt-indentation"),[],[Var("origin-node")]),Var("text")))))))),RDef("create-textchange-insert-before",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("new-elems")])),NoAnnoList(Tuple([Var("offset"),Var("offset"),Var("insert-text")])),Seq(Assign(Var("offset"),App(CallNoArgs(SVar("origin-insert-before-offset")),Var("origin-node"))),Seq(Assign(Var("new-elems-text"),App(Call(SVar("map"),[CallT(SVar("construct-text-list-element"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-node")])]),Var("new-elems"))),Assign(Var("insert-text"),App(CallNoArgs(SVar("concat-strings")),Var("new-elems-text"))))))),RDef("create-textchange-insert-at-end",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("new-elems")])),NoAnnoList(Tuple([Var("offset"),Var("offset"),Var("insert-text")])),Seq(Assign(Var("offset"),App(CallNoArgs(SVar("origin-insert-at-end-offset")),Var("origin-node"))),Seq(Assign(Var("new-elems-text"),App(Call(SVar("at-init"),[CallT(SVar("construct-text-list-element"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-node")]),CallT(SVar("construct-text-list-element-last"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-node")])]),Var("new-elems"))),CondChoice(Assign(NoAnnoList(List([])),Var("origin-node")),Assign(Var("insert-text"),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([App(CallT(SVar("whitespace-at-start"),[CallNoArgs(SVar("pp"))],[App(CallNoArgs(SVar("Hd")),Var("new-elems"))]),Var("origin-node")),App(CallNoArgs(SVar("concat-strings")),Var("new-elems-text"))])))),Assign(Var("insert-text"),App(CallT(SVar("add-separation-before"),[CallNoArgs(SVar("pp"))],[Var("new-elems")]),NoAnnoList(Tuple([Var("origin-node"),App(CallNoArgs(SVar("concat-strings")),Var("new-elems-text"))])))))))))]),Rules([RDefT("construct-text-list-element",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-node")],Rule(Var("elem"),Var("elem-text"),Seq(Assign(Var("text"),App(Call(SVar("construct-text"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),Var("elem"))),Seq(Assign(Var("layout-before"),App(Seq(CallNoArgs(SVar("layout-prefix")),CallT(SVar("correct-indentation"),[],[Var("elem")])),Var("elem"))),Seq(Assign(Var("indented-prefix-text"),App(Seq(CallNoArgs(SVar("conc-strings")),CallT(SVar("adapt-indentation"),[],[Var("origin-node")])),NoAnnoList(Tuple([Var("layout-before"),Var("text")])))),Seq(Assign(Var("comments-after"),App(Seq(CallNoArgs(SVar("comments-after")),Seq(CallT(SVar("correct-indentation"),[],[Var("elem")]),CallT(SVar("adapt-indentation"),[],[Var("origin-node")]))),Var("elem"))),Seq(Assign(Var("separation"),App(Choice(CallNoArgs(SVar("origin-separation")),CallT(SVar("origin-separation"),[CallNoArgs(SVar("pp"))],[Var("elem")])),Var("origin-node"))),Seq(Assign(Var("layout-after"),App(CallNoArgs(SVar("create-separation-after")),NoAnnoList(Tuple([Var("separation"),Var("comments-after")])))),Assign(Var("elem-text"),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([Var("indented-prefix-text"),Var("layout-after")])))))))))))),RDefT("construct-text-list-element-last",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-node")],Rule(Var("elem"),Var("elem-text"),Seq(Assign(Var("text"),App(Call(SVar("construct-text"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),Var("elem"))),Seq(Assign(Var("layout-before"),App(Seq(CallNoArgs(SVar("layout-prefix")),CallT(SVar("correct-indentation"),[],[Var("elem")])),Var("elem"))),Seq(Assign(Var("indented-prefix-text"),App(Seq(CallNoArgs(SVar("conc-strings")),CallT(SVar("adapt-indentation"),[],[Var("origin-node")])),NoAnnoList(Tuple([Var("layout-before"),Var("text")])))),Seq(Assign(Var("comments-after"),App(Seq(CallNoArgs(SVar("comments-after")),Seq(CallT(SVar("correct-indentation"),[],[Var("elem")]),CallT(SVar("adapt-indentation"),[],[Var("origin-node")]))),Var("elem"))),Assign(Var("elem-text"),App(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("trim-trailing-whitespace"))),NoAnnoList(List([Var("indented-prefix-text"),NoAnnoList(Str("\" \"")),Var("comments-after")]))))))))))]),Rules([RDefT("adapt-indentation",[],[DefaultVarDec("origin-node")],Rule(Var("text"),Var("indented-text"),Seq(Assign(Var("indent-string-new"),App(CallNoArgs(SVar("origin-indent")),Var("origin-node"))),Assign(Var("indented-text"),App(CallT(SVar("replace-indentation"),[],[Var("indent-string-new"),NoAnnoList(Str("\"\""))]),Var("text")))))),RDefT("correct-indentation",[],[DefaultVarDec("origin-node")],Rule(Var("txt"),Var("indent-corrected-text"),Seq(Assign(Var("indent-string"),App(LChoice(CallNoArgs(SVar("origin-indent")),Build(NoAnnoList(Str("\"\"")))),Var("origin-node"))),Assign(Var("indent-corrected-text"),App(CallT(SVar("replace-indentation"),[],[NoAnnoList(Str("\"\"")),Var("indent-string")]),Var("txt")))))),RDefT("replace-indentation",[],[DefaultVarDec("new-indent"),DefaultVarDec("old-indent")],Rule(Var("text"),Var("indented-text"),Seq(Assign(Var("indent-value-old"),App(CallNoArgs(SVar("indent-value")),Var("old-indent"))),Assign(Var("indented-text"),App(Seq(CallT(SVar("remove-indentation"),[],[Var("indent-value-old")]),Seq(CallT(SVar("prefix-lines"),[],[Var("new-indent")]),Call(SVar("ltrim-chars"),[LChoice(Match(NoAnnoList(Char("' '"))),LChoice(Match(NoAnnoList(Char("'\\t'"))),Match(NoAnnoList(Char("'\\n'")))))]))),Var("text")))))),RDefNoArgs("indent-value",Rule(Var("indent-string"),Var("indent-value"),Assign(Var("indent-value"),App(Seq(CallNoArgs(SVar("explode-string")),Seq(Call(SVar("take-while"),[LChoice(Match(NoAnnoList(Char("' '"))),Match(NoAnnoList(Char("'\\t'"))))]),Call(SVar("foldr"),[Build(NoAnnoList(Int("0"))),CallNoArgs(SVar("add")),LChoice(Seq(Match(NoAnnoList(Char("' '"))),Build(NoAnnoList(Int("1")))),Seq(Match(NoAnnoList(Char("'\\t'"))),CallNoArgs(SVar("TABSIZE"))))]))),Var("indent-string"))))),RDefT("remove-indentation",[],[DefaultVarDec("n")],Rule(Var("txt"),Var("dedented-txt"),Assign(Var("dedented-txt"),App(Call(SVar("all-lines"),[Call(SVar("string-as-chars"),[CallT(SVar("dedent-line-chars"),[],[Var("n")])])]),Var("txt"))))),RDefT("dedent-line-chars",[],[DefaultVarDec("n")],Rule(Var("chars"),Var("dedented-chars"),LChoice(Seq(BA(CallNoArgs(SVar("lt")),NoAnnoList(Tuple([Var("n"),NoAnnoList(Int("0"))]))),Seq(Assign(Var("indent"),App(Seq(CallNoArgs(SVar("copy-char")),CallNoArgs(SVar("explode-string"))),NoAnnoList(Tuple([App(CallNoArgs(SVar("abs")),Var("n")),NoAnnoList(Char("' '"))])))),Assign(Var("dedented-chars"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("indent"),Var("chars")])))))),LChoice(Seq(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([Var("n"),NoAnnoList(Int("0"))]))),Seq(BA(Match(NoAnnoList(ListTail([NoAnnoList(Char("' '"))],Var("tail")))),Var("chars")),Assign(Var("dedented-chars"),App(CallT(SVar("dedent-line-chars"),[],[App(CallNoArgs(SVar("dec")),Var("n"))]),Var("tail"))))),LChoice(Seq(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([Var("n"),NoAnnoList(Int("0"))]))),Seq(BA(Match(NoAnnoList(ListTail([NoAnnoList(Char("'\\t'"))],Var("tail")))),Var("chars")),Assign(Var("dedented-chars"),App(CallT(SVar("dedent-line-chars"),[],[App(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("n"),RootApp(CallNoArgs(SVar("TABSIZE")))])))]),Var("tail"))))),Assign(Var("dedented-chars"),Var("chars")))))))]),Rules([SDefT("add-separation-before",[DefaultVarDec("pp")],[DefaultVarDec("new-elems")],LChoice(CallT(SVar("add-separation-before-1"),[CallNoArgs(SVar("pp"))],[Var("new-elems")]),CallT(SVar("add-separation-before-2"),[CallNoArgs(SVar("pp"))],[Var("new-elems")]))),RDefT("add-separation-before-1",[DefaultVarDec("pp")],[DefaultVarDec("new-elems")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("text-inserted-after")])),Var("txt-with-separation"),Seq(BA(Seq(CallNoArgs(SVar("origin-text-with-layout")),CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\"\\n\""))])),Var("origin-node")),Seq(Assign(NoAnnoList(Tuple([Var("start-separation"),Var("end-separation")])),App(CallNoArgs(SVar("split-before")),NoAnnoList(Tuple([App(Choice(CallNoArgs(SVar("origin-separation")),CallT(SVar("origin-separation"),[CallNoArgs(SVar("pp"))],[App(CallNoArgs(SVar("Hd")),Var("new-elems"))])),Var("origin-node")),NoAnnoList(Str("\"\\n\""))])))),Seq(BA(Call(SVar("string-as-chars"),[Call(SVar("map"),[CallNoArgs(SVar("is-whitespace"))])]),Var("start-separation")),Assign(Var("txt-with-separation"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([App(Call(SVar("string-as-chars"),[CallNoArgs(SVar("Tl"))]),Var("end-separation")),Var("text-inserted-after"),NoAnnoList(Str("\"\\n\""))]))))))))),RDefT("add-separation-before-2",[DefaultVarDec("pp")],[DefaultVarDec("new-elems")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("text-inserted-after")])),Var("txt-with-separation"),Assign(Var("txt-with-separation"),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([App(Choice(CallNoArgs(SVar("origin-separation")),CallT(SVar("origin-separation"),[CallNoArgs(SVar("pp"))],[App(CallNoArgs(SVar("Hd")),Var("new-elems"))])),Var("origin-node")),Var("text-inserted-after")])))))),RDefNoArgs("create-separation-after",Rule(NoAnnoList(Tuple([Var("separation"),Var("comments-after")])),Var("txt-between"),Seq(BA(CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\"\\n\""))]),Var("comments-after")),Seq(Assign(NoAnnoList(Tuple([Var("start-separation"),Var("end-separation")])),App(CallNoArgs(SVar("split-before")),NoAnnoList(Tuple([Var("separation"),NoAnnoList(Str("\"\\n\""))])))),Assign(Var("txt-between"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("start-separation"),NoAnnoList(Str("\" \"")),Var("comments-after"),App(Call(SVar("string-as-chars"),[CallNoArgs(SVar("Tl"))]),Var("end-separation"))])))))))),RDefNoArgs("create-separation-after",Rule(NoAnnoList(Tuple([Var("separation"),Var("comments-after")])),Var("txt-between"),Seq(BA(Not(CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\"\\n\""))])),Var("comments-after")),Seq(Assign(NoAnnoList(Tuple([Var("start-separation"),Var("end-separation")])),App(CallNoArgs(SVar("split-before")),NoAnnoList(Tuple([Var("separation"),NoAnnoList(Str("\"\\n\""))])))),Seq(Assign(Var("comments-after-separated"),App(LChoice(Match(NoAnnoList(Str("\"\""))),BA(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([NoAnnoList(Str("\" \"")),RootApp(Id)])))),Var("comments-after"))),Assign(Var("txt-between"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("start-separation"),Var("comments-after-separated"),Var("end-separation")]))))))))),RDefNoArgs("create-separation-after",Rule(NoAnnoList(Tuple([Var("separation"),Var("comments-after")])),Var("txt-between"),Seq(BA(Not(Call(SVar("is-substring"),[Build(NoAnnoList(Str("\"\\n\"")))])),Var("separation")),Seq(Assign(Var("comments-after-separated"),App(LChoice(Match(NoAnnoList(Str("\"\""))),BA(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([NoAnnoList(Str("\" \"")),RootApp(Id)])))),Var("comments-after"))),Assign(Var("txt-between"),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([Var("comments-after-separated"),Var("separation")]))))))))]),Rules([RDefNoArgs("apply-text-changes",Rule(NoAnnoList(Tuple([Var("text-changes"),Var("text"),Var("start-offset")])),Var("changed-text"),Seq(Assign(Var("ordered-text-changes"),App(Seq(CallNoArgs(SVar("make-set")),Seq(Call(SVar("filter"),[CallNoArgs(SVar("is-modification"))]),Call(SVar("qsort"),[CallNoArgs(SVar("has-smaller-offset"))]))),Var("text-changes"))),Seq(BA(CallNoArgs(SVar("assert-valid-textual-changes")),Var("ordered-text-changes")),Assign(Var("changed-text"),App(Seq(Call(SVar("foldr"),[Build(NoAnnoList(Tuple([Var("start-offset"),Var("text")]))),CallNoArgs(SVar("apply-textual-change"))]),CallNoArgs(SVar("Snd"))),Var("ordered-text-changes"))))))),RDefNoArgs("apply-textual-change",Rule(NoAnnoList(Tuple([Var("change"),Var("text-info")])),NoAnnoList(Tuple([Var("char-pos"),Var("result-text")])),Seq(BA(Match(NoAnnoList(Tuple([Var("char-pos"),Var("text-fragment")]))),Var("text-info")),Seq(BA(Match(NoAnnoList(Tuple([Var("change-start"),Var("change-end"),Var("change-text")]))),Var("change")),Seq(Assign(Var("pos-start"),App(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("change-start"),Var("char-pos")])))),Seq(Assign(Var("pos-end"),App(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("change-end"),Var("char-pos")])))),Seq(BA(CallNoArgs(SVar("string-length")),Var("text-fragment")),Assign(Var("result-text"),App(CallNoArgs(SVar("replace-in-text")),NoAnnoList(Tuple([Var("text-fragment"),Var("change-text"),Var("pos-start"),Var("pos-end")]))))))))))),RDefNoArgs("replace-in-text",Rule(NoAnnoList(Tuple([Var("old-text"),Var("text-change"),Var("pos-start"),Var("pos-end")])),Var("result-text"),Seq(Assign(Var("old-chars"),App(CallNoArgs(SVar("explode-string")),Var("old-text"))),Seq(Assign(NoAnnoList(Tuple([Var("prefix"),Wld])),App(CallT(SVar("split-at"),[],[Var("pos-start")]),Var("old-chars"))),Seq(Assign(NoAnnoList(Tuple([Wld,Var("suffix")])),App(CallT(SVar("split-at"),[],[Var("pos-end")]),Var("old-chars"))),Assign(Var("result-text"),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([App(CallNoArgs(SVar("implode-string")),Var("prefix")),Var("text-change"),App(CallNoArgs(SVar("implode-string")),Var("suffix"))]))))))))),SDefNoArgs("has-smaller-offset",Seq(Match(NoAnnoList(Tuple([NoAnnoList(Tuple([Var("start-x"),Var("end-x"),Var("x")])),NoAnnoList(Tuple([Var("start-y"),Var("end-y"),Var("y")]))]))),Where(LChoice(BA(CallNoArgs(SVar("lt")),NoAnnoList(Tuple([Var("start-x"),Var("start-y")]))),Seq(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("start-x"),Var("start-y")]))),BA(CallNoArgs(SVar("lt")),NoAnnoList(Tuple([Var("end-x"),Var("end-y")])))))))),SDefNoArgs("is-modification",Not(Match(NoAnnoList(Tuple([Var("t"),Var("t"),NoAnnoList(Str("\"\""))])))))]),Rules([SDefNoArgs("assert-valid-textual-changes",Seq(CallNoArgs(SVar("assert-no-overlap")),CallNoArgs(SVar("assert-valid-offset")))),RDefNoArgs("assert-no-overlap",Rule(As(Var("txt-changes"),NoAnnoList(ListTail([NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),Wld])),NoAnnoList(Tuple([Var("start-offset'"),Wld,Wld]))],Wld))),Var("txt-changes"),[WithClause(Seq(BA(CallNoArgs(SVar("leq")),NoAnnoList(Tuple([Var("start-offset"),Var("start-offset'")]))),Seq(BA(CallNoArgs(SVar("leq")),NoAnnoList(Tuple([Var("end-offset"),Var("start-offset'")]))),BA(Call(SVar("at-tail"),[CallNoArgs(SVar("assert-no-overlap"))]),Var("txt-changes")))))])),SDefNoArgs("assert-no-overlap",LChoice(Match(NoAnnoList(List([NoAnnoList(Tuple([Wld,Wld,Wld]))]))),Match(NoAnnoList(List([]))))),SDefNoArgs("assert-valid-offset",Call(SVar("map"),[CallNoArgs(SVar("assert-valid-offset"))])),SDefNoArgs("assert-valid-offset",Seq(Match(NoAnnoList(Tuple([Var("s"),Var("e"),Wld]))),With(BA(CallNoArgs(SVar("leq")),NoAnnoList(Tuple([Var("s"),Var("e")]))))))])])