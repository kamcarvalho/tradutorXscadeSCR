Module("runtime/refactoring/construct-initial-list-structure",[Imports([Import("runtime/editor/origins")]),Rules([SDefT("origin-separation",[DefaultVarDec("pp")],[DefaultVarDec("some-elem")],Seq(CallT(SVar("construct-initial-list-structure"),[CallNoArgs(SVar("pp"))],[Var("some-elem")]),Match(NoAnnoList(Tuple([Wld,RootApp(Id)]))))),SDefT("whitespace-at-start",[DefaultVarDec("pp")],[DefaultVarDec("some-elem")],Seq(CallT(SVar("construct-initial-list-structure"),[CallNoArgs(SVar("pp"))],[Var("some-elem")]),Match(NoAnnoList(Tuple([RootApp(Id),Wld]))))),RDefT("construct-initial-list-structure",[DefaultVarDec("pp")],[DefaultVarDec("some-elem")],Rule(Var("elemOrList"),NoAnnoList(Tuple([Var("whitespace-at-start''"),Var("sep''")])),[WhereClause(Seq(Assign(Var("list"),App(Choice(Match(NoAnnoList(List([]))),Choice(Seq(Match(NoAnnoList(List([Var("e")]))),Seq(Build(Var("e")),CallNoArgs(SVar("get-parent")))),CallNoArgs(SVar("get-parent")))),Var("elemOrList"))),BA(CallNoArgs(SVar("leq")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("list")),NoAnnoList(Int("1"))]))))),WithClause(Seq(Assign(Var("elem-text"),App(CallNoArgs(SVar("pp")),Var("some-elem"))),Seq(Assign(Var("parent"),App(CallNoArgs(SVar("get-parent")),Var("list"))),Seq(Assign(Var("dummy1"),App(Seq(Call(SVar("oncetd"),[Seq(CallT(SVar("origin-equal"),[],[Var("list")]),Build(NoAnnoList(List([Var("some-elem"),Var("some-elem")]))))]),CallNoArgs(SVar("pp"))),Var("parent"))),Assign(Var("dummy2"),App(Seq(Call(SVar("oncetd"),[Seq(CallT(SVar("origin-equal"),[],[Var("list")]),Build(NoAnnoList(List([Var("some-elem")]))))]),CallNoArgs(SVar("pp"))),Var("parent"))))))),WithClause(Seq(Assign(Var("zipped"),App(Call(SVar("zipPad"),[Id,Build(NoAnnoList(Int("0")))]),NoAnnoList(Tuple([App(CallNoArgs(SVar("explode-string")),Var("dummy1")),App(CallNoArgs(SVar("explode-string")),Var("dummy2"))])))),Seq(Assign(Var("index"),App(Call(SVar("get-index0"),[Not(CallNoArgs(SVar("eq")))]),Var("zipped"))),Seq(Assign(NoAnnoList(Tuple([Var("before"),Var("after")])),App(Seq(CallNoArgs(SVar("explode-string")),Seq(CallT(SVar("split-at"),[],[Var("index")]),Seq(Match(NoAnnoList(Tuple([Var("b"),Var("a")]))),Build(NoAnnoList(Tuple([App(CallNoArgs(SVar("implode-string")),Var("b")),App(CallNoArgs(SVar("implode-string")),Var("a"))])))))),Var("dummy1"))),Seq(Assign(Var("whitespace-at-start"),App(Seq(Build(NoAnnoList(Tuple([RootApp(Id),Var("elem-text")]))),Seq(CallNoArgs(SVar("split-before-last-occurrence")),Seq(Match(NoAnnoList(Tuple([RootApp(Id),Wld]))),Call(SVar("string-as-chars"),[Seq(CallNoArgs(SVar("reverse")),Seq(Call(SVar("take-while"),[Choice(CallNoArgs(SVar("is-whitespace")),Test(CharCong("'\\n'")))]),CallNoArgs(SVar("reverse"))))])))),Var("before"))),Assign(Var("sep"),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([App(Seq(CallNoArgs(SVar("split-after-last-occurrence")),Match(NoAnnoList(Tuple([Wld,RootApp(Id)])))),NoAnnoList(Tuple([Var("before"),Var("elem-text")]))),App(Seq(CallNoArgs(SVar("split-before")),Match(NoAnnoList(Tuple([RootApp(Id),Wld])))),NoAnnoList(Tuple([Var("after"),Var("elem-text")])))]))))))))),WithClause(Seq(Assign(Var("dummy-indent"),App(Seq(CallNoArgs(SVar("get-parent")),CallNoArgs(SVar("origin-indent"))),Var("list"))),Seq(Assign(Var("whitespace-at-start'"),App(CallT(SVar("prefix-lines"),[],[Var("dummy-indent")]),Var("whitespace-at-start"))),Seq(Assign(Var("sep'"),App(CallT(SVar("prefix-lines"),[],[Var("dummy-indent")]),Var("sep"))),Seq(Assign(Var("whitespace-at-start''"),App(Seq(CallNoArgs(SVar("split-after")),Match(NoAnnoList(Tuple([Wld,RootApp(Id)])))),NoAnnoList(Tuple([Var("whitespace-at-start'"),Var("dummy-indent")])))),Assign(Var("sep''"),App(Seq(CallNoArgs(SVar("split-after")),Match(NoAnnoList(Tuple([Wld,RootApp(Id)])))),NoAnnoList(Tuple([Var("sep'"),Var("dummy-indent")])))))))))])),SDefNoArgs("split-after-last-occurrence",Seq(Match(NoAnnoList(Tuple([Var("l"),Var("sub")]))),Seq(CallNoArgs(SVar("split-after")),Seq(Match(NoAnnoList(Tuple([Var("before"),Var("after")]))),Call(SVar("try"),[Seq(Build(Var("after")),Seq(Call(SVar("is-substring"),[Build(Var("sub"))]),Seq(Build(NoAnnoList(Tuple([Var("after"),Var("sub")]))),CallNoArgs(SVar("split-after-last-occurrence")))))]))))),SDefNoArgs("split-before-last-occurrence",Seq(Match(NoAnnoList(Tuple([Wld,Var("sub")]))),Seq(CallNoArgs(SVar("split-after-last-occurrence")),Seq(Match(NoAnnoList(Tuple([Var("before"),Wld]))),Seq(Build(NoAnnoList(Tuple([Var("before"),Var("sub")]))),CallNoArgs(SVar("split-before")))))))]),Rules([SDefNoArgs("get-parent",Prim("\"SSL_EXT_get_parent\"",[RootApp(Id)]))])])