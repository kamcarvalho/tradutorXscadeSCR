Module("runtime/nabl/uri",[Imports([Import("runtime/index/core"),Import("runtime/editor/annotations"),Import("runtime/nabl/interface"),Import("runtime/nabl/query")]),Signature([Sorts([SortNoArgs("Language"),SortNoArgs("Segment"),SortNoArgs("Qualifier")]),Constructors([OpDecl("Language",FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Language")))),OpDecl("ID",FunType([ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("Name")),ConstType(SortNoArgs("Qualifier"))],ConstType(SortNoArgs("Segment")))),OpDecl("Subsequent",FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Segment")))),OpDecl("Anonymous",FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Segment")))),OpDecl("Unique",FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Qualifier")))),OpDecl("NonUnique",ConstType(SortNoArgs("Qualifier"))),OpDecl("Unique",ConstType(SortNoArgs("Qualifier"))),OpDecl("URI",FunType([ConstType(SortNoArgs("Language")),ConstType(Sort("List",[SortNoArgs("Segment")]))],ConstType(SortNoArgs("URI")))),OpDecl("Barrier",FunType([ConstType(Sort("List",[SortNoArgs("Namespace")]))],ConstType(SortNoArgs("Annotation"))))])]),Rules([SDefNoArgs("nabl-base-uri",Build(NoAnnoList(Op("URI",[RootApp(Id),NoAnnoList(List([]))])))),SDefT("nabl-extend-uri",[],[DefaultVarDec("segment")],Call(SVar("URI"),[Id,Build(NoAnnoList(ListTail([Var("segment")],RootApp(Id))))])),SDefT("nabl-extend-uri",[],[DefaultVarDec("namespace"),DefaultVarDec("name"),DefaultVarDec("qualifier")],Call(SVar("URI"),[Id,Build(NoAnnoList(ListTail([NoAnnoList(Op("ID",[Var("namespace"),Var("name"),Var("qualifier")]))],RootApp(Id))))])),SDefT("nabl-replace-uri",[],[DefaultVarDec("segment")],Call(SVar("URI"),[Id,ListCong([Build(Var("segment"))],Id)])),SDefT("nabl-replace-uri",[],[DefaultVarDec("namespace"),DefaultVarDec("name"),DefaultVarDec("qualifier")],Call(SVar("URI"),[Id,ListCong([Build(NoAnnoList(Op("ID",[Var("namespace"),Var("name"),Var("qualifier")])))],Id)])),SDefT("nabl-replace-uri-qualifier",[],[DefaultVarDec("qualifier")],Call(SVar("URI"),[Id,ListCong([Call(SVar("ID"),[Id,Id,Build(Var("qualifier"))])],Id)])),SDefNoArgs("nabl-nonunique-uri",Call(SVar("URI"),[Id,ListCong([Call(SVar("ID"),[Id,Id,Build(NoAnnoList(Op("NonUnique",[])))])],Id)])),RDefT("nabl-uri-add-barriers",[],[DefaultVarDec(ListVar("namespace*"))],Rule(NoAnnoList(Op("URI",[Var("lang"),NoAnnoList(ListTail([Var("seg")],Var("s")))])),NoAnnoList(Op("URI",[Var("lang"),NoAnnoList(ListTail([App(CallT(SVar("replace-annotation"),[Match(NoAnnoList(Op("Barrier",[Wld])))],[Var("new-barrier")]),Var("seg"))],Var("s")))])),Seq(Assign(Var(ListVar("existing-namespace*")),App(LChoice(Call(SVar("get-annotation"),[Match(NoAnnoList(Op("Barrier",[RootApp(Id)])))]),Build(NoAnnoList(List([])))),Var("seg"))),Assign(Var("new-barrier"),NoAnnoList(Op("Barrier",[NoAnnoList(List([Var(ListVar("existing-namespace*")),Var(ListVar("namespace*"))]))])))))),SDefNoArgs("nabl-uri-strip-barriers",Call(SVar("URI"),[Id,Call(SVar("map"),[Call(SVar("remove-annotations"),[Match(NoAnnoList(Op("Barrier",[Wld])))])])]))]),Rules([RDefT("nabl-extend-uri",[],[DefaultVarDec("table"),DefaultVarDec("partition"),DefaultVarDec("ns"),DefaultVarDec("n"),DefaultVarDec("u")],Rule(Var("uri"),App(CallT(SVar("nabl-extend-uri"),[],[Var("ns"),Var("n"),Var("qualifier")]),Var("uri")),CondChoice(Where(BA(Match(NoAnnoList(Op("NonUnique",[]))),Var("u"))),Assign(Var("qualifier"),NoAnnoList(Op("NonUnique",[]))),Assign(Var("qualifier"),NoAnnoList(Op("Unique",[App(CallT(SVar("stable-uri-part"),[],[Var("table"),Var("partition")]),NoAnnoList(Tuple([Var("partition"),Var("uri"),Var("ns"),Var("n")])))])))))),RDefT("nabl-extend-uri-anonymous",[],[DefaultVarDec("table"),DefaultVarDec("partition")],Rule(Var("uri"),App(CallT(SVar("nabl-extend-uri"),[],[NoAnnoList(Op("Anonymous",[Var("unique")]))]),Var("uri")),Assign(Var("unique"),App(CallT(SVar("stable-uri-part"),[],[Var("table"),Var("partition")]),NoAnnoList(Tuple([Var("partition"),Var("uri"),NoAnnoList(Str("\"anonymous\""))])))))),RDefT("nabl-extend-uri-subsequent",[],[DefaultVarDec("table"),DefaultVarDec("partition")],Rule(Var("uri"),App(CallT(SVar("nabl-extend-uri"),[],[NoAnnoList(Op("Subsequent",[Var("unique")]))]),Var("uri")),Assign(Var("unique"),App(CallT(SVar("stable-uri-part"),[],[Var("table"),Var("partition")]),NoAnnoList(Tuple([Var("partition"),Var("uri"),NoAnnoList(Str("\"subsequent\""))])))))),RDefT("stable-uri-part",[],[DefaultVarDec("table"),DefaultVarDec("partition")],Rule(Var("key"),NoAnnoList(StringQuotation1("             ",[StringEscape1("             ",Var("partition")),QStr("/"),StringEscape1("                         ",Var("unique"))])),Seq(CondChoice(Assign(Var("value"),App(CallT(SVar("hashtable-get"),[],[Var("key")]),Var("table"))),Seq(Assign(Var("unique"),App(CallNoArgs(SVar("int-to-string")),Var("value"))),Assign(Var("new-value"),App(CallNoArgs(SVar("inc")),Var("value")))),Seq(Assign(Var("unique"),NoAnnoList(Str("\"0\""))),Assign(Var("new-value"),NoAnnoList(Int("1"))))),BA(CallT(SVar("hashtable-put"),[],[Var("key"),Var("new-value")]),Var("table")))))]),Rules([SDefNoArgs("nabl-uri",Fail),SDefNoArgs("nabl-uris",Fail),RDefNoArgs("nabl-uri-language",RuleNoCond(NoAnnoList(Op("URI",[Var("language"),Wld])),Var("language"))),RDefNoArgs("nabl-uri-language-name",RuleNoCond(NoAnnoList(Op("URI",[NoAnnoList(Op("Language",[Var("name")])),Wld])),Var("name"))),RDefNoArgs("nabl-uri-path",RuleNoCond(NoAnnoList(Op("URI",[Wld,Var("path")])),Var("path"))),RDefNoArgs("nabl-uri-name",RuleNoCond(Var("uri"),App(Seq(CallNoArgs(SVar("nabl-uri-path")),Seq(CallNoArgs(SVar("Hd")),CallNoArgs(SVar("nabl-segment-name")))),Var("uri")))),RDefNoArgs("nabl-uri-namespace",RuleNoCond(Var("uri"),App(Seq(CallNoArgs(SVar("nabl-uri-path")),Seq(CallNoArgs(SVar("Hd")),CallNoArgs(SVar("nabl-segment-namespace")))),Var("uri")))),RDefNoArgs("nabl-uri-qualifier",RuleNoCond(Var("uri"),App(Seq(CallNoArgs(SVar("nabl-uri-path")),Seq(CallNoArgs(SVar("Hd")),CallNoArgs(SVar("nabl-segment-qualifier")))),Var("uri")))),RDefNoArgs("nabl-uri-barriers",RuleNoCond(Var("uri"),App(Seq(CallNoArgs(SVar("nabl-uri-path")),Seq(CallNoArgs(SVar("Hd")),CallNoArgs(SVar("nabl-segment-barriers")))),Var("uri")))),RDefNoArgs("nabl-segment-namespace",RuleNoCond(NoAnnoList(Op("ID",[Var("namespace"),Wld,Wld])),Var("namespace"))),RDefNoArgs("nabl-segment-name",RuleNoCond(NoAnnoList(Op("ID",[Wld,Var("name"),Wld])),Var("name"))),RDefNoArgs("nabl-segment-name",RuleNoCond(NoAnnoList(Op("Subsequent",[Var("name")])),Var("name"))),RDefNoArgs("nabl-segment-name",RuleNoCond(NoAnnoList(Op("Anonymous",[Var("name")])),Var("name"))),RDefNoArgs("nabl-segment-qualifier",RuleNoCond(NoAnnoList(Op("ID",[Wld,Wld,Var("qualifier")])),Var("qualifier"))),RDefNoArgs("nabl-segment-barriers",Rule(Var("segment"),Var(ListVar("namespace*")),Assign(NoAnnoList(Op("Barrier",[Var(ListVar("namespace*"))])),App(Call(SVar("get-annotation"),[Match(NoAnnoList(Op("Barrier",[Wld])))]),Var("segment"))))),SDef("nabl-closure",[DefaultVarDec("s")],GuardedLChoice(CallNoArgs(SVar("s")),Build(NoAnnoList(ListTail([RootApp(Id)],RootApp(Call(SVar("nabl-closure"),[CallNoArgs(SVar("s"))]))))),Build(NoAnnoList(List([])))))]),Rules([SDefNoArgs("nabl-uri-parent",Call(SVar("URI"),[Id,CallNoArgs(SVar("Tl"))])),SDefNoArgs("nabl-uri-parents",Call(SVar("nabl-closure"),[CallNoArgs(SVar("nabl-uri-parent"))])),RDefT("nabl-uri-parents",[],[DefaultVarDec("target-ns")],Rule(Var("uri"),Var(ListVar("parent*")),Seq(Assign(Var(ListVar("barrier-ns*")),App(LChoice(CallNoArgs(SVar("nabl-uri-barriers")),Build(NoAnnoList(List([])))),Var("uri"))),CondChoice(Seq(BA(Not(CallNoArgs(SVar("elem"))),NoAnnoList(Tuple([Var("target-ns"),Var(ListVar("barrier-ns*"))]))),Assign(Var("parent"),App(CallNoArgs(SVar("nabl-uri-parent")),Var("uri")))),Assign(Var(ListVar("parent*")),NoAnnoList(ListTail([App(CallNoArgs(SVar("nabl-uri-strip-barriers")),Var("parent"))],App(CallT(SVar("nabl-uri-parents"),[],[Var("target-ns")]),Var("parent"))))),Assign(Var(ListVar("parent*")),NoAnnoList(List([]))))))),SDefNoArgs("nabl-uri-local-scopes",Build(NoAnnoList(List([RootApp(CallNoArgs(SVar("nabl-uri-parent")))])))),SDefNoArgs("nabl-uri-lexical-scopes",CallNoArgs(SVar("nabl-uri-parents"))),SDefNoArgs("nabl-uri-lexical-parent-scopes",Seq(CallNoArgs(SVar("nabl-uri-parent")),CallNoArgs(SVar("nabl-uri-parents")))),SDefNoArgs("nabl-uri-external-scopes",Seq(CallNoArgs(SVar("nabl-get-all-inverse-aliasses")),Call(SVar("map"),[CallNoArgs(SVar("nabl-uri-parent"))]))),SDefNoArgs("nabl-uri-external-lexical-scopes",Seq(CallNoArgs(SVar("nabl-get-all-inverse-aliasses")),Call(SVar("mapconcat"),[CallNoArgs(SVar("nabl-uri-lexical-scopes"))]))),SDefNoArgs("nabl-uri-external-lexical-parent-scopes",Seq(CallNoArgs(SVar("nabl-get-all-inverse-aliasses")),Call(SVar("mapconcat"),[CallNoArgs(SVar("nabl-uri-lexical-parent-scopes"))]))),SDefNoArgs("nabl-uri-all-local-scopes",BA(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("nabl-uri-local-scopes"))),RootApp(CallNoArgs(SVar("nabl-uri-external-scopes")))])))),SDefNoArgs("nabl-uri-all-lexical-scopes",BA(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("nabl-uri-lexical-scopes"))),RootApp(CallNoArgs(SVar("nabl-uri-external-lexical-scopes")))])))),SDefNoArgs("nabl-uri-all-lexical-parent-scopes",BA(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("nabl-uri-lexical-parent-scopes"))),RootApp(CallNoArgs(SVar("nabl-uri-external-lexical-parent-scopes")))])))),RDefT("nabl-sub-uri",[],[DefaultVarDec("namespace")],Rule(Var("uri"),App(CallNoArgs(SVar("nabl-uri-strip-barriers")),Var("uri")),AM(CallNoArgs(SVar("nabl-uri-namespace")),Var("namespace")))),RDefT("nabl-sub-uri",[],[DefaultVarDec("namespace")],Rule(Var("uri"),App(Seq(CallNoArgs(SVar("nabl-uri-parent")),Seq(CallT(SVar("nabl-sub-uri"),[],[Var("namespace")]),CallNoArgs(SVar("nabl-uri-strip-barriers")))),Var("uri")),Not(AM(CallNoArgs(SVar("nabl-uri-namespace")),Var("namespace")))))]),Rules([SDefNoArgs("nabl-is-uri",Match(NoAnnoList(Op("URI",[Wld,Wld])))),SDefNoArgs("nabl-is-unique",Seq(CallNoArgs(SVar("nabl-uri-qualifier")),Match(NoAnnoList(Op("Unique",[Wld]))))),SDefNoArgs("nabl-is-nonunique",Seq(CallNoArgs(SVar("nabl-uri-qualifier")),Match(NoAnnoList(Op("NonUnique",[]))))),SDefNoArgs("nabl-segment-is-id",Match(NoAnnoList(Op("ID",[Wld,Wld,Wld]))))]),Rules([SDefNoArgs("nabl-uri-eq",Seq(Match(NoAnnoList(Tuple([NoAnnoList(Op("URI",[Var("lang1"),Var("segs1")])),NoAnnoList(Op("URI",[Var("lang2"),Var("segs2")]))]))),Seq(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("lang1"),Var("lang2")]))),BA(Call(SVar("zip"),[CallNoArgs(SVar("nabl-uri-segment-eq"))]),NoAnnoList(Tuple([Var("segs1"),Var("segs2")])))))),SDefNoArgs("nabl-uri-segment-eq",Seq(Match(NoAnnoList(Tuple([NoAnnoList(Op("ID",[Var("ns1"),Var("name1"),Wld])),NoAnnoList(Op("ID",[Var("ns2"),Var("name2"),Wld]))]))),Seq(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("ns1"),Var("ns2")]))),BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("name1"),Var("name2")])))))),SDefNoArgs("nabl-uri-segment-eq",Match(NoAnnoList(Tuple([NoAnnoList(Op("Subsequent",[Wld])),NoAnnoList(Op("Subsequent",[Wld]))])))),SDefNoArgs("nabl-uri-segment-eq",Match(NoAnnoList(Tuple([NoAnnoList(Op("Anonymous",[Wld])),NoAnnoList(Op("Anonymous",[Wld]))])))),SDefT("nabl-uri-namespace-eq",[],[DefaultVarDec("namespace")],Seq(CallNoArgs(SVar("nabl-uri-namespace")),Match(Var("namespace"))))]),Rules([RDefNoArgs("nabl-print-uri",Rule(Var("uri"),NoAnnoList(StringQuotation1("             ",[StringEscape1("             ",Var("ns")),QStr(" "),StringEscape1("                  ",Var("names"))])),Seq(Assign(NoAnnoList(Explode(Var("ns"),Wld)),App(CallNoArgs(SVar("nabl-uri-namespace")),Var("uri"))),Assign(Var("names"),App(Seq(CallNoArgs(SVar("nabl-uri-path")),Seq(Call(SVar("filter"),[CallNoArgs(SVar("nabl-segment-name"))]),Seq(CallT(SVar("separate-by"),[],[NoAnnoList(Str("\".\""))]),CallNoArgs(SVar("concat-strings"))))),Var("uri"))))))]),Rules([RDefNoArgs("nabl-uri",RuleNoCond(NoAnnoList(Op("URI",[Wld,Wld])),RootApp(Id))),RDefNoArgs("nabl-uris",RuleNoCond(NoAnnoList(Op("URI",[Wld,Wld])),NoAnnoList(List([RootApp(Id)])))),SDefNoArgs("nabl-uri",Seq(CallNoArgs(SVar("has-annos")),Seq(CallNoArgs(SVar("get-annos")),Call(SVar("fetch-elem"),[CallNoArgs(SVar("nabl-uri"))])))),SDefNoArgs("nabl-uris",Seq(CallNoArgs(SVar("has-annos")),Seq(CallNoArgs(SVar("get-annos")),Call(SVar("filter"),[CallNoArgs(SVar("nabl-uri"))]))))])])