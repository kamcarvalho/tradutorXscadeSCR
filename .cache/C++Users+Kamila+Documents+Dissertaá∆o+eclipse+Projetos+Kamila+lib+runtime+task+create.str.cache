Module("runtime/task/create",[Imports([Import("runtime/task/core"),Import("runtime/task/interface")]),Rules([SDefT("new-task",[],[DefaultVarDec("partition")],CallT(SVar("new-task"),[],[Var("partition"),RootApp(CallNoArgs(SVar("dependent-tasks")))])),SDefT("new-task",[],[DefaultVarDec("partition"),DefaultVarDec("type"),DefaultVarDec("storage-type")],CallT(SVar("new-task"),[],[Var("partition"),RootApp(CallNoArgs(SVar("dependent-tasks"))),Var("type"),Var("storage-type")])),RDefT("new-task",[],[DefaultVarDec("partition"),DefaultVarDec("dependencies")],Rule(Var("instruction"),Var("result"),[WithClause(Seq(Assign(Var("type"),App(CallNoArgs(SVar("determine-task-type")),Var("instruction"))),Seq(Assign(Var("storage-type"),App(CallNoArgs(SVar("determine-task-storage-type")),Var("instruction"))),Assign(Var("result"),App(CallT(SVar("new-task"),[],[Var("partition"),Var("dependencies"),Var("type"),Var("storage-type")]),Var("instruction"))))))])),RDefT("new-task",[],[DefaultVarDec("partition"),DefaultVarDec("dependencies"),DefaultVarDec("type"),DefaultVarDec("storage-type")],Rule(Var("instruction"),Var("result"),[WithClause(Seq(Assign(Var("short-circuit"),App(LChoice(Seq(CallNoArgs(SVar("task-short-circuit")),Build(NoAnnoList(Int("1")))),Build(NoAnnoList(Int("0")))),Var("instruction"))),Assign(Var("result"),App(CallT(SVar("task-add-task"),[],[Var("partition"),Var("dependencies"),Var("instruction"),Var("type"),Var("storage-type"),Var("short-circuit")]),Var("instruction")))))])),SDefNoArgs("task-regular-type",Build(NoAnnoList(Int("0")))),SDefNoArgs("task-combinator-type",Build(NoAnnoList(Int("1")))),SDefNoArgs("task-raw-type",Build(NoAnnoList(Int("2")))),SDefNoArgs("task-auto-storage",Build(NoAnnoList(Int("0")))),SDefNoArgs("task-list-storage",Build(NoAnnoList(Int("1")))),SDefNoArgs("task-set-storage",Build(NoAnnoList(Int("2")))),SDefNoArgs("determine-task-type",LChoice(CallNoArgs(SVar("task-get-type")),LChoice(Seq(CallNoArgs(SVar("task-is-combinator")),CallNoArgs(SVar("task-combinator-type"))),CallNoArgs(SVar("task-regular-type"))))),SDefNoArgs("determine-task-storage-type",LChoice(CallNoArgs(SVar("task-get-storage-type")),CallNoArgs(SVar("task-list-storage")))),SDefT("new-task-fixdeps",[],[DefaultVarDec("partition"),DefaultVarDec("dependencies")],CallT(SVar("new-task"),[],[Var("partition"),App(CallNoArgs(SVar("dependent-tasks")),Var("dependencies"))])),SDefNoArgs("dependent-tasks",Seq(Call(SVar("collect-all"),[CallNoArgs(SVar("dependent-task")),CallNoArgs(SVar("union"))]),Seq(CallNoArgs(SVar("flatten-list")),CallNoArgs(SVar("make-set"))))),SDefNoArgs("dependent-task",Match(NoAnnoList(Op("Result",[RootApp(Id)])))),SDefNoArgs("dependent-task",Seq(CallNoArgs(SVar("has-annos")),Seq(CallNoArgs(SVar("get-annos")),CallNoArgs(SVar("dependent-tasks"))))),RDefT("merge-dependencies",[],[DefaultVarDec(ListVar("dep*"))],RuleNoCond(Var("term"),App(CallNoArgs(SVar("union")),NoAnnoList(Tuple([App(CallNoArgs(SVar("dependent-tasks")),Var(ListVar("dep*"))),App(CallNoArgs(SVar("dependent-tasks")),Var("term"))]))))),SDefNoArgs("task-create-execute-ctx",Build(NoAnnoList(Str("\"\"")))),RDef("task-create-execute",[DefaultVarDec("create-task")],Rule(Var("term"),Var("result"),[WithClause(Seq(Assign(Var("ctx"),RootApp(CallNoArgs(SVar("task-create-execute-ctx")))),Seq(CallNoArgs(SVar("task-push")),Seq(CallT(SVar("task-start-collection"),[],[Var("ctx")]),Seq(Assign(NoAnnoList(Op("Result",[Var("taskID")])),App(CallNoArgs(SVar("create-task")),Var("term"))),Seq(CallT(SVar("task-stop-collection"),[],[Var("ctx")]),Seq(BA(CallNoArgs(SVar("task-evaluate-now")),Var("taskID")),Seq(Assign(Var("result"),App(CallNoArgs(SVar("task-get-results")),Var("taskID"))),CallNoArgs(SVar("task-pop"))))))))))]))])])