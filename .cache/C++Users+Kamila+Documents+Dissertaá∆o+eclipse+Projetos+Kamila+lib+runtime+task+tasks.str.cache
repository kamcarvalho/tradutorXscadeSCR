Module("runtime/task/tasks",[Imports([Import("runtime/task/core"),Import("runtime/task/create"),Import("runtime/task/insert"),Import("runtime/task/messages"),Import("runtime/task/interface")]),Signature([Constructors([OpDecl("Id",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Fail",ConstType(SortNoArgs("Instruction"))),OpDecl("Choice",FunType([ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Sequence",FunType([ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Combine",FunType([ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Singleton",FunType([ConstType(SortNoArgs("Result"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Diff",FunType([ConstType(SortNoArgs("Result")),ConstType(SortNoArgs("Result"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Collect",FunType([ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Not",FunType([ConstType(SortNoArgs("Result"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Index",FunType([ConstType(SortNoArgs("Int")),ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Length",FunType([ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Sum",FunType([ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Fetch",FunType([ConstType(SortNoArgs("Term")),ConstType(Sort("List",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Eq",FunType([ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Insert",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Rewrite",FunType([ConstType(SortNoArgs("ID")),ConstType(SortNoArgs("Result"))],ConstType(SortNoArgs("Instruction")))),OpDecl("MakeSet",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Instruction"))))])]),Rules([SDefT("task-create-id",[],[DefaultVarDec("ctx")],LChoice(Match(NoAnnoList(Op("Result",[Wld]))),BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Id",[RootApp(Id)]))))),SDefT("task-create-set-id",[],[DefaultVarDec("ctx")],LChoice(Match(NoAnnoList(Op("Result",[Wld]))),BA(CallT(SVar("new-task"),[],[Var("ctx"),RootApp(CallNoArgs(SVar("task-regular-type"))),RootApp(CallNoArgs(SVar("task-set-storage")))]),NoAnnoList(Op("Id",[RootApp(Id)]))))),RDefT("task-create-id",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("dep*"))],Rule(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("Id",[Var("term")]))),[WithClause(Assign(Var(ListVar("all-dep*")),App(CallT(SVar("merge-dependencies"),[],[Var(ListVar("dep*"))]),Var("term"))))])),RDefT("task-create-set-id",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("dep*"))],Rule(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx"),Var(ListVar("all-dep*")),RootApp(CallNoArgs(SVar("task-regular-type"))),RootApp(CallNoArgs(SVar("task-set-storage")))]),NoAnnoList(Op("Id",[Var("term")]))),[WithClause(Assign(Var(ListVar("all-dep*")),App(CallT(SVar("merge-dependencies"),[],[Var(ListVar("dep*"))]),Var("term"))))])),SDefT("perform-task",[],[DefaultVarDec("task-id")],Match(NoAnnoList(Op("Id",[RootApp(CallNoArgs(SVar("MkSingleton")))]))))]),Rules([RDefT("task-create-fail",[],[DefaultVarDec("ctx")],RuleNoCond(Wld,App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Fail",[]))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Fail",[])),RootApp(Fail)))]),Rules([SDefT("task-create-choice",[],[DefaultVarDec("ctx")],LChoice(Match(NoAnnoList(List([RootApp(Match(NoAnnoList(Op("Result",[Wld]))))]))),BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Choice",[RootApp(Id)]))))),RDefT("task-create-choice",[DefaultVarDec("t1"),DefaultVarDec("t2")],[DefaultVarDec("ctx")],RuleNoCond(Var("term"),App(CallT(SVar("task-create-choice"),[],[Var("ctx")]),NoAnnoList(List([App(CallT(SVar("t1"),[],[Var("ctx")]),Var("term")),App(CallT(SVar("t2"),[],[Var("ctx")]),Var("term"))]))))),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Choice",[Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),RDefNoArgs("task-get-storage-type",RuleNoCond(NoAnnoList(Op("Choice",[Wld])),RootApp(CallNoArgs(SVar("task-auto-storage"))))),SDefT("perform-task",[],[DefaultVarDec("task-id")],Match(NoAnnoList(Op("Choice",[RootApp(Call(SVar("fetch-elem"),[Not(Match(NoAnnoList(List([]))))]))]))))]),Rules([SDefT("task-create-sequence",[],[DefaultVarDec("ctx")],LChoice(Match(NoAnnoList(List([RootApp(Match(NoAnnoList(Op("Result",[Wld]))))]))),BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Sequence",[RootApp(Id)]))))),RDefT("task-create-sequence",[DefaultVarDec("t1"),DefaultVarDec("t2")],[DefaultVarDec("ctx")],RuleNoCond(Var("term"),App(CallT(SVar("task-create-sequence"),[],[Var("ctx")]),NoAnnoList(List([App(CallT(SVar("t1"),[],[Var("ctx")]),Var("term")),App(CallT(SVar("t2"),[],[Var("ctx")]),Var("term"))]))))),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Sequence",[Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),RDefNoArgs("task-get-storage-type",RuleNoCond(NoAnnoList(Op("Sequence",[Wld])),RootApp(CallNoArgs(SVar("task-auto-storage"))))),SDefT("perform-task",[],[DefaultVarDec("task-id")],Match(NoAnnoList(Op("Sequence",[RootApp(Seq(Not(Call(SVar("fetch-elem"),[Match(NoAnnoList(List([])))])),CallNoArgs(SVar("last"))))]))))]),Rules([SDefT("task-create-combine",[],[DefaultVarDec("ctx")],LChoice(Match(NoAnnoList(List([RootApp(Match(NoAnnoList(Op("Result",[Wld]))))]))),BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Combine",[RootApp(Id)]))))),RDefT("task-create-combine",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("dep*"))],Rule(Var(ListVar("task*")),App(CallT(SVar("new-task"),[],[Var("ctx"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("Combine",[Var(ListVar("task*"))]))),[WithClause(Assign(Var(ListVar("all-dep*")),App(CallT(SVar("merge-dependencies"),[],[Var(ListVar("dep*"))]),Var(ListVar("task*")))))])),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Combine",[Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),RDefNoArgs("task-get-storage-type",RuleNoCond(NoAnnoList(Op("Combine",[Wld])),RootApp(CallNoArgs(SVar("task-auto-storage"))))),SDefT("perform-task",[],[DefaultVarDec("task-id")],Match(NoAnnoList(Op("Combine",[RootApp(Call(SVar("mapconcat"),[LChoice(CallNoArgs(SVar("is-list")),CallNoArgs(SVar("MkSingleton")))]))]))))]),Rules([SDefT("task-create-collect",[],[DefaultVarDec("ctx")],BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Collect",[RootApp(Id)])))),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Collect",[Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),SDefT("perform-task",[],[DefaultVarDec("task-id")],Seq(Match(NoAnnoList(Op("Collect",[RootApp(Call(SVar("mapconcat"),[LChoice(CallNoArgs(SVar("is-list")),CallNoArgs(SVar("MkSingleton")))]))]))),CallNoArgs(SVar("MkSingleton"))))]),Rules([RDefT("task-create-insert",[],[DefaultVarDec("ctx")],RuleNoCond(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Insert",[Var("term")]))))),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Insert",[Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),RDefNoArgs("task-get-storage-type",RuleNoCond(NoAnnoList(Op("Insert",[Wld])),RootApp(CallNoArgs(SVar("task-auto-storage"))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Insert",[Var("term")])),App(CallNoArgs(SVar("insert-results-or-delay")),Var("term"))))]),Rules([SDefT("task-create-singleton",[],[DefaultVarDec("ctx")],BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Singleton",[RootApp(Id)])))),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Singleton",[Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Singleton",[As(Var("r"),NoAnnoList(List([Wld])))])),Var("r")))]),Rules([RDefT("task-create-diff",[],[DefaultVarDec("ctx")],RuleNoCond(NoAnnoList(Tuple([Var("l1"),Var("l2")])),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Diff",[Var("l1"),Var("l2")]))))),RDefT("task-create-diff",[],[DefaultVarDec("ctx"),DefaultVarDec("l2")],RuleNoCond(Var("l1"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Diff",[Var("l1"),Var("l2")]))))),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Diff",[Wld,Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Diff",[Var("l1"),Var("l2")])),App(CallNoArgs(SVar("diff")),NoAnnoList(Tuple([Var("l1"),App(LChoice(CallNoArgs(SVar("is-list")),CallNoArgs(SVar("MkSingleton"))),Var("l2"))])))))]),Rules([RDefT("task-create-where",[DefaultVarDec("s")],[DefaultVarDec("ctx")],RuleNoCond(Var("term"),App(CallT(SVar("task-create-sequence"),[],[Var("ctx")]),App(Call(SVar("try"),[CallNoArgs(SVar("flatten-list"))]),NoAnnoList(List([App(CallNoArgs(SVar("s")),Var("term")),Var("term")]))))))]),Rules([SDefT("task-create-not",[],[DefaultVarDec("ctx")],BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Not",[RootApp(Id)])))),SDefT("task-create-not",[DefaultVarDec("t")],[DefaultVarDec("ctx")],Seq(CallT(SVar("t"),[],[Var("ctx")]),CallT(SVar("task-create-not"),[],[Var("ctx")]))),RDefNoArgs("task-get-type",RuleNoCond(NoAnnoList(Op("Not",[Wld])),RootApp(CallNoArgs(SVar("task-combinator-type"))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Not",[NoAnnoList(List([]))])),NoAnnoList(Tuple([]))))]),Rules([RDefT("task-create-index",[],[DefaultVarDec("ctx"),DefaultVarDec("i")],RuleNoCond(Var("list"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Index",[Var("i"),Var("list")]))))),SDefT("perform-task",[],[DefaultVarDec("task-id")],Seq(Match(NoAnnoList(Op("Index",[Var("i"),RootApp(CallT(SVar("index"),[],[Var("i")]))]))),CallNoArgs(SVar("MkSingleton"))))]),Rules([RDefT("task-create-length",[],[DefaultVarDec("ctx")],RuleNoCond(Var("list"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Length",[Var("list")]))))),SDefT("perform-task",[],[DefaultVarDec("task-id")],Seq(Match(NoAnnoList(Op("Length",[RootApp(CallNoArgs(SVar("length")))]))),CallNoArgs(SVar("MkSingleton"))))]),Rules([RDefT("task-create-sum",[],[DefaultVarDec("ctx")],RuleNoCond(Var("list"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Sum",[Var("list")]))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Sum",[Var("list")])),App(CallNoArgs(SVar("sum")),Var("list"))))]),Rules([RDefT("task-create-fetch",[],[DefaultVarDec("ctx"),DefaultVarDec("list")],RuleNoCond(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Fetch",[Var("term"),Var("list")]))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Fetch",[Var("term"),Var("list")])),App(Call(SVar("fetch-elem"),[Match(Var("term"))]),Var("list"))))]),Rules([RDefT("task-create-eq",[],[DefaultVarDec("ctx"),DefaultVarDec("expected")],RuleNoCond(Var("actual"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Eq",[Var("expected"),Var("actual")]))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("Eq",[Var("expected"),Var("actual")])),App(Seq(CallNoArgs(SVar("eq")),Build(Var("actual"))),NoAnnoList(Tuple([Var("expected"),Var("actual")])))))]),Rules([RDefT("task-create-make-set",[],[DefaultVarDec("ctx")],RuleNoCond(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("MakeSet",[Var("term")]))))),RDefT("task-create-make-set",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("dep*"))],Rule(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("MakeSet",[Var("term")]))),[WithClause(Assign(Var(ListVar("all-dep*")),App(CallT(SVar("merge-dependencies"),[],[Var(ListVar("dep*"))]),Var("term"))))])),RDefNoArgs("task-get-storage-type",RuleNoCond(NoAnnoList(Op("MakeSet",[Wld])),RootApp(CallNoArgs(SVar("task-set-storage"))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("MakeSet",[Var("term")])),Var("term")))]),Rules([SDefT("task-create-rewrite",[],[DefaultVarDec("ctx"),DefaultVarDec("key")],BA(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("Rewrite",[Var("key"),RootApp(Id)])))),SDefT("perform-task",[],[DefaultVarDec("nr")],Seq(Match(NoAnnoList(Op("Rewrite",[Var("key"),Var("term")]))),BA(Seq(CallNoArgs(SVar("task-rewrite")),CallNoArgs(SVar("MkSingleton"))),NoAnnoList(Tuple([Var("key"),Var("term")])))))]),Rules([SDefT("perform-cyclic-task",[],[DefaultVarDec("nr")],Fail),RDefT("perform-task",[],[DefaultVarDec("nr")],RuleNoCond(NoAnnoList(Tuple([Var("instruction"),NoAnnoList(Str("\"cyclic\""))])),App(LChoice(CallT(SVar("perform-cyclic-task"),[],[Var("nr")]),CallT(SVar("perform-task"),[],[Var("nr")])),Var("instruction"))))])])