Module("runtime/nabl/collect",[Imports([Import("runtime/task/core"),Import("runtime/task/tasks"),Import("runtime/task/messages"),Import("runtime/nabl/tasks"),Import("runtime/nabl/entries"),Import("runtime/nabl/check"),Import("runtime/nabl/namegen"),Import("runtime/nabl/interface"),Import("runtime/nabl/uri"),Import("runtime/nabl/utils"),Import("runtime/properties/collect"),Import("runtime/properties/entries"),Import("runtime/properties/tasks"),Import("runtime/editor/origins"),Import("runtime/editor/annotations"),Import("runtime/types/collect")]),Signature([Sorts([SortNoArgs("State"),SortNoArgs("DefScope"),SortNoArgs("ImplicitDef"),SortNoArgs("Use"),SortNoArgs("RefScope"),SortNoArgs("Range")]),Constructors([OpDecl("State",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("State"))))]),Constructors([OpDecl("Current",ConstType(SortNoArgs("DefScope"))),OpDecl("Subsequent",ConstType(SortNoArgs("DefScope"))),OpDecl("DefScope",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("DefScope")))),OpDecl("Scope",FunType([ConstType(SortNoArgs("Namespace"))],ConstType(SortNoArgs("Scope")))),OpDecl("FixedScope",FunType([ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("URI"))],ConstType(SortNoArgs("Scope"))))]),Constructors([OpDecl("UseCandidate",FunType([ConstType(SortNoArgs("Namespace")),ConstType(Sort("List",[SortNoArgs("Property")])),ConstType(SortNoArgs("RefScope")),ConstType(SortNoArgs("WildcardImport")),ConstType(Sort("List",[SortNoArgs("Dependency")]))],ConstType(SortNoArgs("Use")))),OpDecl("True",ConstType(SortNoArgs("WildcardImport"))),OpDecl("False",ConstType(SortNoArgs("WildcardImport"))),OpDecl("Current",ConstType(SortNoArgs("RefScope"))),OpDecl("Surrounding",ConstType(SortNoArgs("RefScope"))),OpDecl("Context",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Namespace")),ConstType(Sort("List",[SortNoArgs("Property")])),ConstType(SortNoArgs("RefScope"))],ConstType(SortNoArgs("RefScope")))),OpDecl("RefScope",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("RefScope")))),OpDecl("Completion",FunType([ConstType(SortNoArgs("Result"))],ConstType(SortNoArgs("Completion"))))]),Constructors([OpDecl("Wildcard",FunType([ConstType(Sort("List",[SortNoArgs("Import")])),ConstType(SortNoArgs("RefScope")),ConstType(SortNoArgs("DefScope")),ConstType(Sort("List",[SortNoArgs("Dependency")]))],ConstType(SortNoArgs("ImportDesc")))),OpDecl("Single",FunType([ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("DefScope")),ConstType(Sort("List",[SortNoArgs("Dependency")]))],ConstType(SortNoArgs("ImportDesc")))),OpDecl("Imported",FunType([ConstType(SortNoArgs("Namespace"))],ConstType(SortNoArgs("Namespace")))),OpDecl("Import",FunType([ConstType(SortNoArgs("Namespace"))],ConstType(SortNoArgs("Property")))),OpDecl("Import",FunType([ConstType(SortNoArgs("Language")),ConstType(SortNoArgs("Namespace"))],ConstType(SortNoArgs("Property")))),OpDecl("Import",FunType([ConstType(SortNoArgs("Language")),ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("Name"))],ConstType(SortNoArgs("Property"))))]),Constructors([OpDecl("CollectPartition",ConstType(SortNoArgs("Partition")))]),Constructors([OpDecl("ExternalDef",FunType([ConstType(SortNoArgs("URI"))],ConstType(SortNoArgs("Anno"))))])]),Strategies([SDefT("nabl-collect",[DefaultVarDec("sibling-uris")],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*"))],Seq(Call(SVar("nabl-state-pop"),[Match(Var(ListVar("state*")))]),Seq(Call(SVar("try"),[CallNoArgs(SVar("nabl-scoping-site"))]),Seq(LChoice(CallT(SVar("nabl-scope-site"),[Match(Var(ListVar("uri'*")))],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*"))]),LChoice(CallT(SVar("nabl-new-scope-site"),[Match(Var(ListVar("uri'*")))],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*"))]),CallT(SVar("match"),[Match(Var(ListVar("uri'*")))],[Var(ListVar("uri*"))]))),Seq(LChoice(Seq(CallT(SVar("nabl-def-site"),[Match(Var(ListVar("child-uri*"))),CallNoArgs(SVar("sibling-uris")),Match(Var(ListVar("implicit*")))],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri'*")),Var(ListVar("state*"))]),Call(SVar("try"),[CallNoArgs(SVar("nabl-new-scoping-site"))])),Seq(CallT(SVar("match"),[CallNoArgs(SVar("sibling-uris"))],[Var(ListVar("uri*"))]),CallT(SVar("match"),[Match(Var(ListVar("child-uri*")))],[Var(ListVar("uri'*"))]))),Seq(Call(SVar("try"),[CallNoArgs(SVar("nabl-state-site"))]),Seq(Call(SVar("try"),[CallT(SVar("nabl-collect-rewrite"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),Var(ListVar("uri'*"))])]),Seq(Call(SVar("preserve-annos"),[Call(SVar("origin-track-forced"),[ExplodeCong(Id,ParenStrat(CallT(SVar("nabl-siblings"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("child-uri*"))])))])]),Seq(Call(SVar("try"),[CallT(SVar("nabl-external-def-site"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri'*")),Var(ListVar("state*")),Var(ListVar("implicit*"))])]),Seq(Call(SVar("try"),[CallT(SVar("nabl-use-site"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri'*")),Var(ListVar("state*"))])]),Seq(Call(SVar("try"),[CallT(SVar("nabl-import-site"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("child-uri*")),Var(ListVar("state*"))])]),Seq(Call(SVar("try"),[CallT(SVar("nabl-filtering-site"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*")),Var(ListVar("state*"))])]),Seq(Call(SVar("try"),[CallT(SVar("nabl-disambiguation-site"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*")),Var(ListVar("state*"))])]),Seq(Call(SVar("try"),[CallT(SVar("nabl-prop-site"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),Var(ListVar("state*")),Var(ListVar("implicit*"))])]),CallT(SVar("nabl-annotate-properties"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),Var(ListVar("uri'*"))]))))))))))))))),SDefT("nabl-siblings",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*"))],Choice(ListCongNoTail([]),ListCong([CallT(SVar("nabl-collect"),[Match(Var(ListVar("sibling-uri*")))],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*"))])],CallT(SVar("nabl-siblings"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("sibling-uri*"))]))))]),Rules([SDefT("nabl-state",[DefaultVarDec("pattern")],[DefaultVarDec("state")],Call(SVar("map"),[Call(SVar("try"),[CallT(SVar("nabl-state-annotate"),[CallNoArgs(SVar("pattern"))],[Var("state")])])])),SDefT("nabl-state-annotate",[DefaultVarDec("pattern")],[DefaultVarDec("state")],Seq(Match(Var("pattern")),CallT(SVar("add-annotation"),[],[Var("state")]))),RDef("nabl-state-pop",[DefaultVarDec("states'")],Rule(AnnoList(Var("term"),[Var(ListVar("anno*"))]),Var("term'"),Seq(Assign(Var(ListVar("state*")),App(Call(SVar("collect-all"),[Match(NoAnnoList(Op("State",[Wld,Wld])))]),Var(ListVar("anno*")))),Seq(Assign(Var("term'"),App(Call(SVar("remove-annotations"),[Match(NoAnnoList(Op("State",[Wld,Wld])))]),Var("term"))),CallT(SVar("match"),[CallNoArgs(SVar("states'"))],[Var(ListVar("state*"))]))))),SDefT("nabl-get-state",[],[DefaultVarDec("name")],Call(SVar("fetch-elem"),[Match(NoAnnoList(Op("State",[Var("name"),Wld])))]))]),Rules([SDefT("nabl-scope-site",[DefaultVarDec("adapted-uris")],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*"))],Seq(Call(SVar("remove-annotations"),[Match(NoAnnoList(Op("Scope",[Var(ListVar("ns*"))])))]),Seq(Where(Seq(Assign(Var(ListVar("uri'*")),App(CallT(SVar("extend-scope-uri"),[CallT(SVar("nabl-extend-uri-anonymous"),[],[Var(ListVar("unique*")),Var("partition")])],[Var("lang")]),NoAnnoList(Tuple([Var(ListVar("ns*")),Var(ListVar("uri*"))])))),Seq(CallT(SVar("match"),[CallNoArgs(SVar("adapted-uris"))],[Var(ListVar("uri'*"))]),Assign(Var(ListVar("scope-uri*")),App(Call(SVar("map"),[Build(NoAnnoList(Tuple([RootApp(Id),RootApp(CallT(SVar("lookup-uri"),[],[Var(ListVar("uri'*"))]))])))]),Var(ListVar("ns*"))))))),CallT(SVar("add-annotation"),[],[NoAnnoList(Op("Scope",[Var(ListVar("scope-uri*"))]))])))),SDefT("nabl-new-scope-site",[DefaultVarDec("adapted-uris")],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*"))],Seq(Call(SVar("remove-annotations"),[Match(NoAnnoList(Op("FixedScope",[Var("ns"),Var("uri")])))]),Seq(Where(Seq(Assign(Var(ListVar("uri'*")),App(CallT(SVar("update-scope-uri"),[Build(Var("uri"))],[Var("lang")]),NoAnnoList(Tuple([Var("ns"),Var(ListVar("uri*"))])))),CallT(SVar("match"),[CallNoArgs(SVar("adapted-uris"))],[Var(ListVar("uri'*"))]))),CallT(SVar("add-annotation"),[],[NoAnnoList(Op("Scope",[NoAnnoList(List([NoAnnoList(Tuple([Var("ns"),Var("uri")]))]))]))])))),SDefT("nabl-scope",[],[DefaultVarDec(ListVar("ns1*"))],LChoice(Seq(Call(SVar("remove-annotations"),[Match(NoAnnoList(Op("Scope",[Var(ListVar("ns2*"))])))]),CallT(SVar("add-annotation"),[],[NoAnnoList(Op("Scope",[App(CallNoArgs(SVar("union")),NoAnnoList(Tuple([Var(ListVar("ns1*")),Var(ListVar("ns2*"))])))]))])),CallT(SVar("add-annotation"),[],[NoAnnoList(Op("Scope",[Var(ListVar("ns1*"))]))])))]),Rules([RDefT("nabl-def",[DefaultVarDec("child-uris"),DefaultVarDec("sibling-uris")],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("child-uri*")),DefaultVarDec(ListVar("sibl-uri*")),DefaultVarDec("ns"),DefaultVarDec("unique"),DefaultVarDec("defscope"),DefaultVarDec("scoped"),DefaultVarDec("nt-scoped")],Rule(As(Var("a"),AnnoList(Var("name"),[Var(ListVar("anno*"))])),Var("name''"),[WhereClause(Assign(Var("current-uri"),App(CallT(SVar("lookup-uri"),[],[Var("lang"),Var("ns")]),Var(ListVar("child-uri*"))))),WithClause(Assign(Var("name'"),App(Call(SVar("try"),[CallT(SVar("nabl-namegen"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("child-uri*")),Var(ListVar("anno*"))])]),Var("name")))),WhereClause(SwitchChoiceNoOtherwise(Build(Var("defscope")),[SwitchCase(Call(SVar("Current"),[]),Seq(Assign(Var("def-uri"),App(CallT(SVar("nabl-extend-uri"),[],[Var(ListVar("unique*")),Var("partition"),Var("ns"),App(CallNoArgs(SVar("rm-annotations")),Var("name'")),Var("unique")]),Var("current-uri"))),Seq(Assign(Var("nt-def-uri"),App(CallT(SVar("nabl-uri-add-barriers"),[],[Var("nt-scoped")]),Var("def-uri"))),Seq(Assign(Var(ListVar("new-child-uri*")),App(CallT(SVar("replace-scope-uri"),[],[Var("def-uri")]),NoAnnoList(Tuple([Var("scoped"),Var(ListVar("child-uri*"))])))),Seq(Assign(Var(ListVar("new-child-uri'*")),App(CallT(SVar("replace-scope-uri"),[],[Var("nt-def-uri")]),NoAnnoList(Tuple([Var("nt-scoped"),Var(ListVar("new-child-uri*"))])))),Seq(CallT(SVar("match"),[CallNoArgs(SVar("child-uris"))],[Var(ListVar("new-child-uri'*"))]),CallT(SVar("match"),[CallNoArgs(SVar("sibling-uris"))],[Var(ListVar("sibl-uri*"))]))))))),SwitchCase(AM(Call(SVar("fetch-elem"),[Match(NoAnnoList(Op("Subsequent",[])))]),Var(ListVar("def-scope*"))),Seq(Assign(Var("subs-uri"),App(CallT(SVar("nabl-extend-uri-subsequent"),[],[Var(ListVar("unique*")),Var("partition")]),Var("current-uri"))),Seq(Assign(Var("def-uri"),App(CallT(SVar("nabl-extend-uri"),[],[Var(ListVar("unique*")),Var("partition"),Var("ns"),App(CallNoArgs(SVar("rm-annotations")),Var("name'")),Var("unique")]),Var("subs-uri"))),Seq(CallT(SVar("match"),[CallNoArgs(SVar("child-uris"))],[Var(ListVar("child-uri*"))]),CallT(SVar("match"),[CallNoArgs(SVar("sibling-uris"))],[App(CallT(SVar("replace-scope-uri"),[],[Var("subs-uri")]),NoAnnoList(Tuple([NoAnnoList(List([Var("ns")])),Var(ListVar("sibl-uri*"))])))]))))),SwitchCase(AM(CallNoArgs(SVar("is-list")),Var(ListVar("def-scope*"))),Seq(Assign(Var("ano-uri"),App(Seq(CallNoArgs(SVar("nabl-base-uri")),CallT(SVar("nabl-extend-uri-anonymous"),[],[Var(ListVar("unique*")),Var("partition")])),Var("lang"))),Seq(Assign(Var("def-uri"),App(CallT(SVar("nabl-extend-uri"),[],[Var(ListVar("unique*")),Var("partition"),Var("ns"),App(CallNoArgs(SVar("rm-annotations")),Var("name'")),Var("unique")]),Var("ano-uri"))),Seq(CallT(SVar("match"),[CallNoArgs(SVar("child-uris"))],[Var(ListVar("child-uri*"))]),CallT(SVar("match"),[CallNoArgs(SVar("sibling-uris"))],[Var(ListVar("sibl-uri*"))])))))])),WithClause(Seq(Assign(Var("d"),App(CallT(SVar("new-def"),[],[Var("partition"),App(CallNoArgs(SVar("nabl-uri-strip-barriers")),Var("def-uri"))]),Var("a"))),Assign(Var("name''"),App(CallT(SVar("replace-annotation"),[Match(NoAnnoList(Op("Def",[Wld])))],[Var("d")]),Var("name'"))))),WithClause(BA(Call(SVar("try"),[CallT(SVar("nabl-duplicate-task"),[],[Var("partition"),Var("unique")])]),Var("name''")))])),RDefT("nabl-def-alias",[],[DefaultVarDec("partition"),DefaultVarDec("def-uri")],Rule(AnnoList(Var("term"),[Var(ListVar("anno*"))]),Var("alias-uri"),[WhereClause(Seq(BA(Call(SVar("fetch-elem"),[Match(NoAnnoList(Op("Scope",[Var(ListVar("scope*"))])))]),Var(ListVar("anno*"))),Seq(Assign(Var("ns"),App(CallNoArgs(SVar("nabl-uri-namespace")),Var("def-uri"))),Seq(Assign(Var("base-uri"),App(CallNoArgs(SVar("lookup")),NoAnnoList(Tuple([Var("ns"),Var(ListVar("scope*"))])))),Seq(Assign(Var("segment"),App(Seq(CallNoArgs(SVar("nabl-uri-path")),CallNoArgs(SVar("Hd"))),Var("def-uri"))),Assign(Var("alias-uri"),App(Seq(CallT(SVar("nabl-extend-uri"),[],[Var("segment")]),CallNoArgs(SVar("nabl-nonunique-uri"))),Var("base-uri")))))))),WhereClause(CallT(SVar("new-alias"),[],[Var("partition"),Var("alias-uri"),Var("def-uri")]))]))]),Rules([RDefT("nabl-use",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*")),DefaultVarDec("candidate")],Rule(AnnoList(Var("name"),[Var(ListVar("anno*"))]),Var("result"),[WithClause(Seq(Assign(Var(ListVar("candidate*")),App(LChoice(CallNoArgs(SVar("is-list")),CallNoArgs(SVar("MkSingleton"))),Var("candidate"))),Assign(Var("name'"),App(Call(SVar("try"),[CallT(SVar("nabl-namegen"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*")),Var(ListVar("anno*"))])]),Var("name"))))),WhereClause(CondChoice(Seq(Assign(Var("inner-name"),App(Seq(Not(CallNoArgs(SVar("is-string"))),CallNoArgs(SVar("nabl-get-name"))),Var("name'"))),Assign(NoAnnoList(Op("Use",[Var("inner-use-task")])),App(CallNoArgs(SVar("nabl-collect-use")),Var("inner-name")))),Seq(Assign(Var(ListVar("subtask*")),App(Call(SVar("map"),[CallT(SVar("nabl-filter-use-candidate"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),Var("inner-use-task")])]),Var(ListVar("candidate*")))),Seq(Assign(Var("choice"),App(CallT(SVar("task-create-choice"),[],[Var("partition")]),Var(ListVar("subtask*")))),Seq(Assign(Var("u"),RootApp(CallT(SVar("new-use"),[],[Var("partition"),Var("choice")]))),Seq(BA(Call(SVar("try"),[CallT(SVar("nabl-unresolved-task"),[],[Var("partition"),Var("choice")])]),Var("inner-name")),Assign(Var("result"),App(Call(SVar("nabl-name-apply"),[CallT(SVar("replace-annotations"),[Match(NoAnnoList(Op("Use",[Wld])))],[Var("u")])]),Var("name'"))))))),Seq(Assign(Var(ListVar("subtask*")),App(Call(SVar("map"),[CallT(SVar("nabl-use-candidate"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),App(CallNoArgs(SVar("nabl-fix-name")),Var("name'"))])]),Var(ListVar("candidate*")))),Seq(Assign(Var("choice"),App(CallT(SVar("task-create-choice"),[],[Var("partition")]),Var(ListVar("subtask*")))),Seq(Assign(Var("u"),RootApp(CallT(SVar("new-use"),[],[Var("partition"),Var("choice")]))),Seq(BA(Call(SVar("try"),[CallT(SVar("nabl-unresolved-task"),[],[Var("partition"),Var("choice")])]),Var("name'")),CondChoice(BA(CallNoArgs(SVar("is-completion-name")),Var("name'")),Seq(Assign(Var(ListVar("completion-subtask*")),App(Call(SVar("mapconcat"),[CallT(SVar("nabl-completion-candidate"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*"))])]),Var(ListVar("candidate*")))),Seq(Assign(Var("completion-concat"),App(CallT(SVar("task-create-combine"),[],[Var("partition")]),Var(ListVar("completion-subtask*")))),Assign(Var("result"),App(CallT(SVar("replace-annotations"),[Match(NoAnnoList(Op("Use",[Wld])))],[NoAnnoList(List([Var("u"),NoAnnoList(Op("Completion",[Var("completion-concat")]))]))]),Var("name'"))))),Assign(Var("result"),App(CallT(SVar("replace-annotation"),[Match(NoAnnoList(Op("Use",[Wld])))],[Var("u")]),Var("name'"))))))))))])),SDefT("nabl-use-check-tasks",[],[DefaultVarDec("ctx"),DefaultVarDec("ns")],Seq(Call(SVar("try"),[Seq(CallNoArgs(SVar("nabl-collect-use")),Match(NoAnnoList(Op("Use",[RootApp(Id)]))))]),CallT(SVar("nabl-create-checkdefs"),[],[Var("ctx"),Var("ns")]))),SDefT("nabl-use-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("ctx"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("name")],Seq(Match(NoAnnoList(Op("UseCandidate",[Var("ns"),Var(ListVar("prop*")),NoAnnoList(Op("Current",[])),Wld,Wld]))),Seq(BA(CallT(SVar("lookup-uri"),[],[Var("lang"),Var("ns")]),Var(ListVar("uri*"))),Seq(Build(NoAnnoList(ListTail([RootApp(Call(SVar("try"),[CallNoArgs(SVar("nabl-uri-strip-barriers"))]))],RootApp(CallT(SVar("nabl-uri-parents"),[],[Var("ns")]))))),Seq(CallT(SVar("nabl-insert-import-tasks"),[],[Var("ctx"),Var("ns")]),CallT(SVar("nabl-resolve-task"),[],[Var("ctx"),Var("ns"),App(CallNoArgs(SVar("nabl-fix-name")),Var("name")),Var(ListVar("prop*"))])))))),SDefT("nabl-use-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("ctx"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("name")],Seq(Match(NoAnnoList(Op("UseCandidate",[Var("ns"),Var(ListVar("prop*")),NoAnnoList(Op("Context",[Var("ctx-ns"),Var("ctx-name"),Var(ListVar("ctx-prop*")),Var("ctx-context")])),Wld,Var(ListVar("dep*"))]))),Seq(CondChoice(Assign(NoAnnoList(Op("Result",[Wld])),Var("ctx-name")),Build(Var("ctx-name")),BA(CallT(SVar("nabl-use-candidate"),[],[Var("lang"),Var("ctx"),Var(ListVar("uri*")),Var("ctx-name")]),NoAnnoList(Op("UseCandidate",[Var("ctx-ns"),Var(ListVar("ctx-prop*")),Var("ctx-context"),NoAnnoList(Op("True",[])),Var(ListVar("dep*"))])))),Seq(CallNoArgs(SVar("MkSingleton")),Seq(CallT(SVar("nabl-insert-import-tasks"),[],[Var("ctx"),Var("ns")]),CallT(SVar("nabl-resolve-task"),[],[Var("ctx"),Var("ns"),App(CallNoArgs(SVar("nabl-fix-name")),Var("name")),Var(ListVar("prop*"))])))))),RDefT("nabl-filter-use-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("use-task")],Rule(NoAnnoList(Op("UseCandidate",[Var("ns"),Var(ListVar("prop*")),NoAnnoList(Op("Current",[])),Wld,Wld])),Var("check-task"),Seq(Assign(Var("constraint-task"),App(CallT(SVar("nabl-use-propconstraint"),[],[Var("partition")]),NoAnnoList(Tuple([Var("use-task"),Var(ListVar("prop*"))])))),Assign(Var("check-task"),RootApp(CallT(SVar("nabl-use-check-tasks"),[],[Var("partition"),Var("ns")])))))),RDefT("nabl-filter-use-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("name")],RuleNoCond(NoAnnoList(Op("UseCandidate",[Wld,Wld,NoAnnoList(Op("Context",[Wld,Wld,Wld,Wld])),Wld,Wld])),RootApp(CallT(SVar("nabl-use-candidate"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),Var("name")])))),RDefT("nabl-use-propconstraint",[],[DefaultVarDec("ctx")],Rule(NoAnnoList(Tuple([Var("task"),NoAnnoList(ListTail([As(Var("p"),NoAnnoList(Op("Prop",[Var("kind"),Var("expected"),Var(ListVar("dep*"))])))],Var("rest")))])),Var("rec"),Seq(Assign(Var("pc"),App(CallT(SVar("nabl-create-propconstraint"),[],[Var("ctx"),Var(ListVar("dep*")),Var("kind"),Var("task")]),Var("expected"))),Assign(Var("rec"),App(CallT(SVar("nabl-use-propconstraint"),[],[Var("ctx")]),NoAnnoList(Tuple([Var("pc"),Var("rest")]))))))),RDefT("nabl-use-propconstraint",[],[DefaultVarDec("ctx")],RuleNoCond(NoAnnoList(Tuple([Var("task"),NoAnnoList(List([]))])),Var("task")))]),Rules([RDefT("nabl-completion-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*"))],Rule(NoAnnoList(Op("UseCandidate",[Var("ns"),Var(ListVar("prop*")),NoAnnoList(Op("Current",[])),Var("wci"),Wld])),Var(ListVar("subtask*")),Seq(Assign(Var("uri"),App(CallT(SVar("lookup-uri"),[],[Var("lang"),Var("ns")]),Var(ListVar("uri*")))),Assign(Var(ListVar("subtask*")),App(CallT(SVar("nabl-resolve-all-tasks"),[],[Var("partition"),Var("ns"),Var(ListVar("prop*"))]),NoAnnoList(ListTail([Var("uri")],App(CallNoArgs(SVar("nabl-uri-parents")),Var("uri"))))))))),RDefT("nabl-completion-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*"))],Rule(NoAnnoList(Op("UseCandidate",[Var("ns"),Var(ListVar("prop*")),As(Var("c"),NoAnnoList(Op("Context",[Var("ctx-ns"),Var("ctx-name"),Var(ListVar("ctx-prop*")),Var("ctx-context")]))),Wld,Wld])),Var(ListVar("subtask*")),Seq(Assign(Var("ctx-result"),App(CallT(SVar("nabl-use-candidate"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),Var("ctx-name")]),NoAnnoList(Op("UseCandidate",[Var("ctx-ns"),Var(ListVar("ctx-prop*")),Var("ctx-context"),NoAnnoList(Op("True",[])),NoAnnoList(List([]))])))),Assign(Var(ListVar("subtask*")),App(CallT(SVar("nabl-resolve-all-tasks"),[],[Var("partition"),Var("ns"),Var(ListVar("prop*"))]),NoAnnoList(List([Var("ctx-result")])))))))]),Rules([RDefT("nabl-filter",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("ctx-string"),DefaultVarDec("ctx-terms")],Rule(Var("name"),Var("result"),Seq(Assign(Var("defs-task"),App(CallNoArgs(SVar("nabl-collect-use-task")),Var("name"))),Seq(Assign(Var("filter-task"),App(CallT(SVar("nabl-create-filter"),[],[Var("partition"),Var(ListVar("uri*")),Var("ctx-terms"),Var("ctx-string")]),Var("defs-task"))),Assign(Var("result"),App(CallT(SVar("replace-annotation"),[Match(NoAnnoList(Op("Use",[Wld])))],[NoAnnoList(Op("Use",[Var("filter-task")]))]),Var("name")))))))]),Rules([RDefT("nabl-disambiguate",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("ctx-string"),DefaultVarDec("ctx-terms")],Rule(Var("name"),Var("result"),Seq(Assign(Var("defs-task"),App(CallNoArgs(SVar("nabl-collect-use-task")),Var("name"))),Seq(Assign(Var("disamb-task"),App(CallT(SVar("nabl-create-disambiguate"),[],[Var("partition"),Var(ListVar("uri*")),Var("ctx-terms"),Var("ctx-string")]),Var("defs-task"))),Assign(Var("result"),App(CallT(SVar("replace-annotation"),[Match(NoAnnoList(Op("Use",[Wld])))],[NoAnnoList(Op("Use",[Var("disamb-task")]))]),Var("name")))))))]),Rules([SDefT("nabl-import",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*")),DefaultVarDec("imports")],Where(BA(Call(SVar("map"),[CallT(SVar("nabl-import-candidate"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*"))])]),Var("imports")))),SDefT("nabl-import-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*"))],Seq(Match(NoAnnoList(Op("Single",[Var("ns"),Var("term"),Var(ListVar("scope*")),Var("dep")]))),Seq(Assign(NoAnnoList(Op("Use",[Var("uri")])),App(CallNoArgs(SVar("nabl-collect-use")),Var("term"))),Seq(Assign(Var("name"),App(Seq(CallNoArgs(SVar("nabl-get-name")),CallNoArgs(SVar("nabl-fix-name"))),Var("term"))),BA(Seq(CallNoArgs(SVar("try-make-list")),Call(SVar("map"),[CallT(SVar("nabl-import-alias"),[],[Var("lang"),Var("partition"),Var(ListVar("unique*")),Var(ListVar("uri*")),Var("uri"),Var("ns"),Var("name")])])),Var(ListVar("scope*"))))))),RDefT("nabl-import-alias",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*")),DefaultVarDec("target-uri"),DefaultVarDec("ns"),DefaultVarDec("name")],Rule(Var("scope"),RootApp(CallT(SVar("new-alias"),[],[Var("partition"),Var("alias-uri"),Var("target-uri")])),Seq(Assign(Var("base-uri"),App(CallT(SVar("nabl-scope-uri"),[],[Var("lang"),Var(ListVar("uri*")),Var("ns")]),Var("scope"))),Assign(Var("alias-uri"),App(CallT(SVar("nabl-extend-uri"),[],[Var(ListVar("unique*")),Var("partition"),Var("ns"),Var("name"),NoAnnoList(Op("NonUnique",[]))]),Var("base-uri")))))),SDefT("nabl-import-candidate",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*"))],Seq(Match(NoAnnoList(Op("Wildcard",[Var(ListVar("import*")),Var("from"),Var("into"),Var("dep")]))),BA(Call(SVar("map"),[CallT(SVar("nabl-import-prop"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*")),Var("from"),Var("into")])]),Var(ListVar("import*"))))),RDefT("nabl-import-prop",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("from"),DefaultVarDec("into")],Rule(NoAnnoList(Op("Import",[Var("lang"),Var("ns")])),RootApp(CallT(SVar("new-prop"),[],[Var("partition"),Var("into-uri"),NoAnnoList(Op("Import",[Var("ns")])),Var("from-uri")])),[WhereClause(BA(Not(Match(NoAnnoList(Op("Imported",[Wld])))),Var("ns"))),WhereClause(Seq(Assign(Var("from-uri"),App(CallT(SVar("nabl-scope-uri"),[],[Var("lang"),Var(ListVar("uri*")),Var("ns")]),Var("from"))),Assign(Var("into-uri"),App(CallT(SVar("nabl-scope-uri"),[],[Var("lang"),Var(ListVar("uri*")),Var("ns")]),Var("into")))))])),RDefT("nabl-import-prop",[],[DefaultVarDec("lang"),DefaultVarDec("ctx"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("from"),DefaultVarDec("into")],Rule(NoAnnoList(Op("Import",[Var("lang"),NoAnnoList(Op("Imported",[Var("ns")]))])),RootApp(CallT(SVar("new-prop"),[],[Var("ctx"),Var("into-uri"),NoAnnoList(Op("Import",[Var("ns")])),Var("proplookup")])),Seq(Assign(Var("from-uri"),App(CallT(SVar("nabl-scope-uri"),[],[Var("lang"),Var(ListVar("uri*")),Var("ns")]),Var("from"))),Seq(Assign(Var("into-uri"),App(CallT(SVar("nabl-scope-uri"),[],[Var("lang"),Var(ListVar("uri*")),Var("ns")]),Var("into"))),Assign(Var("proplookup"),App(Seq(CallT(SVar("prop-create-lookup"),[],[Var("ctx"),NoAnnoList(Op("Import",[Var("ns")]))]),Seq(CallT(SVar("task-create-insert"),[],[Var("ctx")]),CallT(SVar("task-create-combine"),[],[Var("ctx")]))),Var("from-uri"))))))),RDefT("nabl-scope-uri",[],[DefaultVarDec("lang"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("ns")],RuleNoCond(NoAnnoList(Op("Current",[])),App(Seq(CallT(SVar("lookup-uri"),[],[Var("lang"),Var("ns")]),CallNoArgs(SVar("nabl-uri-strip-barriers"))),Var(ListVar("uri*"))))),RDefT("nabl-scope-uri",[],[DefaultVarDec("lang"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("ns")],Rule(NoAnnoList(Op("DefScope",[AnnoList(Var("term"),[Var(ListVar("anno*"))])])),App(Seq(CallNoArgs(SVar("lookup")),CallNoArgs(SVar("nabl-uri-strip-barriers"))),NoAnnoList(Tuple([Var("ns"),Var(ListVar("scope*"))]))),BA(Call(SVar("fetch-elem"),[Match(NoAnnoList(Op("Scope",[Var(ListVar("scope*"))])))]),Var(ListVar("anno*"))))),RDefT("nabl-scope-uri",[],[DefaultVarDec("lang"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("ns")],Rule(NoAnnoList(Op("Context",[Wld,Var("name"),Wld,Wld])),Var("uri"),Assign(NoAnnoList(Op("Use",[Var("uri")])),App(CallNoArgs(SVar("nabl-collect-use")),Var("name")))))]),Rules([SDefNoArgs("nabl-get-name",CallNoArgs(SVar("is-string"))),SDef("nabl-name-apply",[DefaultVarDec("s")],Seq(CallNoArgs(SVar("is-string")),CallNoArgs(SVar("s")))),SDefNoArgs("nabl-fix-name",Seq(Call(SVar("try"),[CallNoArgs(SVar("fix-completion-name"))]),CallNoArgs(SVar("strip-annos"))))]),Rules([SDefNoArgs("nabl-collect-def",Seq(Call(SVar("try"),[CallNoArgs(SVar("nabl-get-name"))]),Seq(CallNoArgs(SVar("get-annos")),Call(SVar("collect-one"),[Match(NoAnnoList(Op("Def",[Wld])))])))),SDefNoArgs("nabl-collect-all-def",Seq(Call(SVar("try"),[CallNoArgs(SVar("nabl-get-name"))]),Seq(CallNoArgs(SVar("get-annos")),Call(SVar("collect-all"),[Match(NoAnnoList(Op("Def",[Wld])))])))),SDefNoArgs("nabl-collect-use",Seq(Call(SVar("try"),[CallNoArgs(SVar("nabl-get-name"))]),Seq(CallNoArgs(SVar("get-annos")),Call(SVar("collect-one"),[Match(NoAnnoList(Op("Use",[Wld])))])))),SDefNoArgs("nabl-collect-use-task",Seq(CallNoArgs(SVar("nabl-collect-use")),Match(NoAnnoList(Op("Use",[RootApp(Id)]))))),SDefNoArgs("nabl-collect-all-use",Seq(Call(SVar("try"),[CallNoArgs(SVar("nabl-get-name"))]),Seq(CallNoArgs(SVar("get-annos")),Call(SVar("collect-all"),[Match(NoAnnoList(Op("Use",[Wld])))])))),SDefNoArgs("nabl-collect-completion",Seq(CallNoArgs(SVar("get-annos")),Call(SVar("collect-one"),[Match(NoAnnoList(Op("Completion",[Wld])))]))),SDefNoArgs("nabl-collect-all-completion",Seq(CallNoArgs(SVar("get-annos")),Call(SVar("collect-all"),[Match(NoAnnoList(Op("Completion",[Wld])))])))]),Rules([SDefT("replace-scope-uri",[],[DefaultVarDec("path")],Call(SVar("foldl"),[CallT(SVar("update-scope-uri"),[Build(Var("path"))],[App(CallNoArgs(SVar("nabl-uri-language")),Var("path"))])])),SDefT("extend-scope-uri",[DefaultVarDec("s")],[DefaultVarDec("lang")],Call(SVar("foldl"),[CallT(SVar("update-scope-uri"),[CallNoArgs(SVar("s"))],[Var("lang")])])),RDefT("update-scope-uri",[DefaultVarDec("update")],[DefaultVarDec("lang")],Rule(NoAnnoList(Tuple([Var("key"),Var(ListVar("uri*"))])),Var("result"),LChoice(Assign(Var("result"),App(Call(SVar("fetch"),[TupleCong(Match(Var("key")),[CallNoArgs(SVar("update"))])]),Var(ListVar("uri*")))),Assign(Var("result"),NoAnnoList(ListTail([NoAnnoList(Tuple([Var("key"),App(Seq(CallNoArgs(SVar("nabl-base-uri")),CallNoArgs(SVar("update"))),Var("lang"))]))],Var(ListVar("uri*")))))))),SDefT("lookup-uri",[],[DefaultVarDec("lang"),DefaultVarDec("ns")],LChoice(BA(CallNoArgs(SVar("lookup")),NoAnnoList(Tuple([Var("ns"),RootApp(Id)]))),BA(CallNoArgs(SVar("nabl-base-uri")),Var("lang")))),SDefT("lookup-uri",[],[DefaultVarDec(ListVar("uri*"))],BA(CallNoArgs(SVar("lookup")),NoAnnoList(Tuple([RootApp(Id),Var(ListVar("uri*"))]))))])])