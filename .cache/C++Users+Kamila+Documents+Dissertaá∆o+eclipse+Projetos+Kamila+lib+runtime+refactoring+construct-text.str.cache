Module("runtime/refactoring/construct-text",[Imports([Import("libstratego-lib"),Import("libstratego-gpp"),Import("runtime/editor/origins"),Import("runtime/refactoring/layout-adaption")]),Signature([Constructors([OpDecl("Parenthetical",FunType([ConstType(SortNoArgs("Unknown"))],ConstType(SortNoArgs("Unknown"))))])]),Rules([SDefNoArgs("DEFAULT-INDENT",Build(NoAnnoList(Str("\"\\t\""))))]),Rules([SDefNoArgs("origin-indent",Match(NoAnnoList(Op("Parenthetical",[RootApp(CallNoArgs(SVar("origin-indent")))]))))]),Rules([RDef("pp-default",[DefaultVarDec("pp")],RuleNoCond(NoAnnoList(Op("Parenthetical",[Var("node")])),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"(\"")),App(CallNoArgs(SVar("pp")),Var("node")),NoAnnoList(Str("\")\""))]))))),RDef("pp-default",[DefaultVarDec("pp")],RuleNoCond(NoAnnoList(Op("None",[])),NoAnnoList(Str("\"\"")))),RDef("pp-default",[DefaultVarDec("pp")],RuleNoCond(NoAnnoList(Op("Some",[Var("x")])),App(CallNoArgs(SVar("pp")),Var("x")))),SDef("pp-default",[DefaultVarDec("pp")],CallNoArgs(SVar("is-string"))),SDef("pp-default",[DefaultVarDec("pp")],CallNoArgs(SVar("int-to-string")))]),Rules([RDef("construct-text-from-source",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(As(Var("t"),NoAnnoList(Tuple([Var("oldnode"),Var("newnode")]))),Var("newText"),[WhereClause(Seq(BA(CallNoArgs(SVar("is-tuple")),Var("t")),BA(CallNoArgs(SVar("has-origin-term")),Var("oldnode")))),WithClause(Seq(Assign(Var("parenthesized-node"),App(Call(SVar("try"),[CallNoArgs(SVar("parenthesize"))]),Var("newnode"))),Seq(Assign(Var("reconstructed-text"),App(Seq(Call(SVar("topdown"),[Call(SVar("try"),[CallNoArgs(SVar("strip-annos"))])]),Call(SVar("construct-text-from-old"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))])),NoAnnoList(Tuple([Var("oldnode"),Var("parenthesized-node")])))),Assign(Var("newText"),App(CallNoArgs(SVar("origin-set-relation")),NoAnnoList(Tuple([Var("parenthesized-node"),Var("reconstructed-text")])))))))])),RDef("construct-textual-change",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("oldnode"),Var("newnode")])),NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),Var("newText")])),Seq(Assign(Var("r-text"),App(Call(SVar("construct-text-from-source"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("oldnode"),Var("newnode")])))),Assign(NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),Var("newText")])),App(Call(SVar("ast-change-to-text-change"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Op("REPLACEMENT",[Var("oldnode"),Var("r-text")])))))))]),Rules([RDef("construct-textual-change",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(As(Var("t"),NoAnnoList(Tuple([Var("oldnode"),Var("newnode")]))),NoAnnoList(Tuple([NoAnnoList(Int("0")),NoAnnoList(Int("0")),NoAnnoList(Str("\"\""))])),Seq(BA(CallNoArgs(SVar("is-tuple")),Var("t")),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("oldnode"),Var("newnode")])))))),SDef("construct-textual-change",[DefaultVarDec("pp"),DefaultVarDec("parenthesize"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Call(SVar("map"),[Call(SVar("construct-textual-change"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("parenthesize")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))])])),RDef("construct-text-from-old",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("oldnode"),Var("newnode")])),Var("reconstructed-text"),LChoice(Assign(Var("reconstructed-text"),App(Call(SVar("construct-text-from-origin"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("oldnode"),Var("newnode")])))),LChoice(Assign(Var("reconstructed-text"),App(Call(SVar("construct-text-from-origin"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([App(Seq(Where(Not(CallNoArgs(SVar("is-origin-term")))),CallNoArgs(SVar("origin-term"))),Var("oldnode")),Var("newnode")])))),Assign(Var("reconstructed-text"),App(Call(SVar("construct-text"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),Var("newnode")))))))]),Rules([SDef("construct-textual-change",[DefaultVarDec("pp")],Call(SVar("construct-textual-change"),[CallNoArgs(SVar("pp")),Id,Fail,Fail])),SDefT("construct-textual-change",[DefaultVarDec("pp")],[DefaultVarDec("pp-table")],Call(SVar("construct-textual-change"),[LChoice(CallNoArgs(SVar("pp")),Seq(CallT(SVar("ast2abox"),[],[NoAnnoList(List([Var("pp-table")]))]),CallT(SVar("box2text-string"),[],[NoAnnoList(Int("100"))])))]))]),Rules([SDef("construct-text",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],LChoice(Call(SVar("pp-default"),[Call(SVar("construct-text"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))])]),LChoice(Call(SVar("construct-text-from-origin-desugared"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),LChoice(Call(SVar("construct-text-from-origin"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),LChoice(Call(SVar("construct-text-by-pp"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),CallNoArgs(SVar("pp"))))))),RDef("construct-text-from-origin-desugared",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(Var("node"),App(Call(SVar("construct-text-from-origin"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-desugared-node"),Var("node")]))),Assign(Var("origin-desugared-node"),App(Seq(CallNoArgs(SVar("origin-term-desugared")),Call(SVar("topdown"),[Call(SVar("try"),[CallNoArgs(SVar("strip-annos"))])])),Var("node"))))),RDef("construct-text-from-origin",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(Var("node"),App(Call(SVar("construct-text-from-origin"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))),Assign(Var("origin-node"),App(CallNoArgs(SVar("origin-term")),Var("node"))))),RDef("construct-text-from-origin",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(Var("lst"),App(CallT(SVar("construct-text-with-comments"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[NoAnnoList(Str("\"\""))]),NoAnnoList(Tuple([Var("origin-lst"),Var("lst")]))),Assign(Var("origin-lst"),App(CallNoArgs(SVar("find-origin-sublist")),Var("lst"))))),RDef("construct-text-from-origin",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(As(Var("t"),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))),App(CallT(SVar("correct-indentation"),[],[Var("origin-node")]),Var("text")),[WhereClause(Seq(BA(CallNoArgs(SVar("is-tuple")),Var("t")),Seq(BA(CallNoArgs(SVar("has-origin-term")),Var("origin-node")),Seq(Assign(Var("ast-changes"),App(Call(SVar("collect-ast-changes"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-node"),Var("node")])))),BA(CallT(SVar("is-terminating-diff"),[],[Var("node")]),Var("ast-changes")))))),WithClause(Seq(Assign(Var("text-changes"),App(Call(SVar("map"),[Call(SVar("ast-change-to-text-change"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))])]),Var("ast-changes"))),Assign(Var("text"),App(CallNoArgs(SVar("apply-text-changes")),NoAnnoList(Tuple([Var("text-changes"),App(CallNoArgs(SVar("origin-text")),Var("origin-node")),App(CallNoArgs(SVar("origin-start-offset")),Var("origin-node"))]))))))])),RDef("construct-text-by-pp",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(Var("node"),Var("text"),Assign(Var("text"),App(Seq(All(Call(SVar("alltd"),[LChoice(CallNoArgs(SVar("is-string")),CallT(SVar("construct-text-with-comments"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[RootApp(CallNoArgs(SVar("DEFAULT-INDENT")))]))])),Seq(Call(SVar("topdown"),[Call(SVar("try"),[Call(SVar("pp-default"),[CallNoArgs(SVar("pp"))])])]),CallNoArgs(SVar("pp")))),Var("node"))))),SDefT("construct-text-with-comments",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("default-indent")],LChoice(CallT(SVar("construct-text-with-comments-desugared"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("default-indent")]),CallT(SVar("construct-text-with-comments-origin"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("default-indent")]))),RDefT("construct-text-with-comments-desugared",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("default-indent")],Rule(Var("node"),App(CallT(SVar("construct-text-with-comments"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("default-indent")]),NoAnnoList(Tuple([Var("origin-desugared-node"),Var("node")]))),Seq(Assign(Var("origin-desugared-node"),App(Seq(CallNoArgs(SVar("origin-term-desugared")),Call(SVar("topdown"),[Call(SVar("try"),[CallNoArgs(SVar("strip-annos"))])])),Var("node"))),BA(CallNoArgs(SVar("same-signature")),NoAnnoList(Tuple([Var("origin-desugared-node"),Var("node")])))))),RDefT("construct-text-with-comments-origin",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("default-indent")],Rule(Var("node"),App(CallT(SVar("construct-text-with-comments"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("default-indent")]),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))),Assign(Var("origin-node"),App(LChoice(CallNoArgs(SVar("origin-term")),CallNoArgs(SVar("find-origin-sublist"))),Var("node"))))),RDefT("construct-text-with-comments",[DefaultVarDec("pp"),DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("default-indent")],Rule(As(Var("t"),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))),Var("node-text"),[WhereClause(Seq(BA(CallNoArgs(SVar("is-tuple")),Var("t")),BA(CallNoArgs(SVar("has-origin-term")),Var("origin-node")))),WithClause(Seq(Assign(Var("ast-changes"),App(Call(SVar("collect-ast-changes"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-node"),Var("node")])))),Seq(Assign(Var("text-changes"),App(Call(SVar("map"),[Call(SVar("ast-change-to-text-change"),[CallNoArgs(SVar("pp")),CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))])]),Var("ast-changes"))),Seq(Assign(Var("full-text"),App(CallNoArgs(SVar("origin-text-with-layout")),Var("origin-node"))),Seq(Assign(Var("full-text-start-offset"),App(CallNoArgs(SVar("origin-layout-prefix-start-offset")),Var("origin-node"))),Seq(Assign(Var("modified-full-text"),App(CallNoArgs(SVar("apply-text-changes")),NoAnnoList(Tuple([Var("text-changes"),Var("full-text"),Var("full-text-start-offset")])))),Assign(Var("node-text"),App(CallT(SVar("replace-indentation"),[],[Var("default-indent"),App(LChoice(CallNoArgs(SVar("origin-indent")),Build(NoAnnoList(Str("\"\"")))),Var("origin-node"))]),Var("modified-full-text")))))))))]))]),Signature([Constructors([OpDecl("DELETION",FunType([ConstType(SortNoArgs("OldList"))],ConstType(SortNoArgs("AST_CHANGE")))),OpDecl("REPLACEMENT",FunType([ConstType(SortNoArgs("OldNode")),ConstType(SortNoArgs("NewNode"))],ConstType(SortNoArgs("AST_CHANGE")))),OpDecl("INSERT_BEFORE",FunType([ConstType(SortNoArgs("OldNode")),ConstType(SortNoArgs("NewList"))],ConstType(SortNoArgs("AST_CHANGE")))),OpDecl("INSERT_AT_END",FunType([ConstType(SortNoArgs("OldNode")),ConstType(SortNoArgs("NewList"))],ConstType(SortNoArgs("AST_CHANGE"))))])]),Rules([SDef("collect-ast-changes",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Seq(Where(CallNoArgs(SVar("is-tuple"))),Seq(Call(SVar("try"),[CallNoArgs(SVar("remove-superfluous-parentethical"))]),LChoice(CallNoArgs(SVar("collect-ast-changes-eq")),LChoice(Call(SVar("collect-ast-changes-not-homomorphic"),[CallNoArgs(SVar("override-reconstruction"))]),LChoice(Call(SVar("collect-ast-changes-resugared"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),LChoice(Call(SVar("collect-ast-changes-rec-node"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),LChoice(Call(SVar("collect-ast-changes-rec-list"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),LChoice(Call(SVar("collect-ast-changes-sugared"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),CallNoArgs(SVar("collect-ast-changes-replace"))))))))))),RDef("collect-ast-changes-resugared",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("node")])),Var("ast-changes"),Seq(BA(Not(CallNoArgs(SVar("is-origin-term"))),Var("origin-node")),Seq(Assign(Var("origin-resugared"),App(Call(SVar("origin-track-forced"),[CallNoArgs(SVar("resugar"))]),Var("origin-node"))),Seq(BA(Not(CallNoArgs(SVar("equal"))),NoAnnoList(Tuple([Var("origin-node"),Var("origin-resugared")]))),Assign(Var("ast-changes"),App(Call(SVar("collect-ast-changes"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-resugared"),App(Call(SVar("try"),[CallNoArgs(SVar("resugar"))]),Var("node"))]))))))))),RDef("collect-ast-changes-not-homomorphic",[DefaultVarDec("override-reconstruction")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("node")])),NoAnnoList(List([NoAnnoList(Op("REPLACEMENT",[Var("origin-node"),App(CallNoArgs(SVar("origin-set-relation")),NoAnnoList(Tuple([Var("node"),Var("custom-node")])))]))])),Seq(Assign(Var("custom-node"),App(CallNoArgs(SVar("override-reconstruction")),NoAnnoList(Tuple([Var("origin-node"),Var("node")])))),BA(CallNoArgs(SVar("check-change-origin")),NoAnnoList(Op("REPLACEMENT",[Var("origin-node"),Var("node")])))))),RDefNoArgs("remove-superfluous-parentethical",Rule(NoAnnoList(Tuple([Var("origin-node"),NoAnnoList(Op("Parenthetical",[Var("node")]))])),NoAnnoList(Tuple([Var("origin-node"),Var("node")])),BA(CallNoArgs(SVar("same-signature")),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))))),RDefNoArgs("collect-ast-changes-eq",Rule(NoAnnoList(Tuple([Var("origin-node"),Var("node")])),NoAnnoList(List([])),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))))),RDef("collect-ast-changes-rec-node",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("node")])),Var("ast-changes"),Seq(BA(LChoice(CallNoArgs(SVar("same-signature")),Match(NoAnnoList(Tuple([NoAnnoList(List([Wld])),NoAnnoList(List([Wld]))])))),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))),Seq(BA(LChoice(CallT(SVar("is-related-to"),[],[Var("origin-node")]),CallT(SVar("is-related-to-fuzzy"),[],[Var("origin-node")])),Var("node")),Seq(Assign(Var("arg-tuples"),App(CallNoArgs(SVar("zip")),NoAnnoList(Tuple([App(CallNoArgs(SVar("get-arguments")),Var("origin-node")),App(CallNoArgs(SVar("get-arguments")),Var("node"))])))),Assign(Var("ast-changes"),App(Seq(Call(SVar("map"),[Call(SVar("collect-ast-changes"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))])]),CallNoArgs(SVar("flatten-list"))),Var("arg-tuples")))))))),RDef("collect-ast-changes-rec-list",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("origin-lst"),Var("lst")])),Var("ast-changes"),[WhereClause(BA(Not(CallNoArgs(SVar("violates-homomorphism-list"))),NoAnnoList(Tuple([Var("origin-lst"),Var("lst")])))),WhereClause(Seq(Assign(Var("ast-changes"),App(Seq(CallT(SVar("list-diff"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-lst")]),Seq(Call(SVar("filter"),[Not(Match(NoAnnoList(Op("INSERT_BEFORE",[Wld,NoAnnoList(List([]))]))))]),Call(SVar("filter"),[Not(Match(NoAnnoList(Op("INSERT_AT_END",[Wld,NoAnnoList(List([]))]))))]))),NoAnnoList(Tuple([Var("origin-lst"),Var("lst")])))),BA(Call(SVar("map"),[CallNoArgs(SVar("check-change-origin"))]),Var("ast-changes"))))])),RDefNoArgs("check-change-origin",Rule(As(Var("r"),NoAnnoList(Op("REPLACEMENT",[Var("or"),Wld]))),Var("r"),BA(CallNoArgs(SVar("has-origin-term")),Var("or")))),RDefNoArgs("check-change-origin",Rule(As(Var("d"),NoAnnoList(Op("DELETION",[Var("or")]))),Var("d"),BA(CallNoArgs(SVar("has-origin-term")),Var("or")))),RDefNoArgs("check-change-origin",Rule(As(Var("ins"),NoAnnoList(Op("INSERT_AT_END",[Var("or"),Var("trm")]))),Var("ins"),LChoice(BA(CallNoArgs(SVar("has-origin-term")),Var("or")),BA(Match(NoAnnoList(List([]))),Var("trm"))))),RDefNoArgs("check-change-origin",Rule(As(Var("ins"),NoAnnoList(Op("INSERT_BEFORE",[Var("or"),Var("trm")]))),Var("ins"),LChoice(BA(CallNoArgs(SVar("has-origin-term")),Var("or")),BA(Match(NoAnnoList(List([]))),Var("trm"))))),RDef("collect-ast-changes-sugared",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],Rule(NoAnnoList(Tuple([Var("origin-node"),Var("node")])),Var("ast-changes"),[WhereClause(Seq(BA(CallNoArgs(SVar("is-origin-term-desugared")),Var("node")),BA(Not(CallNoArgs(SVar("is-origin-term"))),Var("node")))),WhereClause(Assign(Var("ast-changes"),App(Call(SVar("collect-ast-changes-rec-node"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([App(CallNoArgs(SVar("origin-term")),Var("origin-node")),App(CallNoArgs(SVar("origin-term")),Var("node"))])))))])),RDefNoArgs("collect-ast-changes-replace",Rule(NoAnnoList(Tuple([Var("origin-node"),Var("node")])),NoAnnoList(List([NoAnnoList(Op("REPLACEMENT",[Var("origin-node"),Var("node")]))])),Seq(BA(CallNoArgs(SVar("check-change-origin")),NoAnnoList(Op("REPLACEMENT",[Var("origin-node"),Var("node")]))),BA(LChoice(Not(CallNoArgs(SVar("is-list"))),LChoice(Match(NoAnnoList(List([]))),LChoice(Match(NoAnnoList(List([Wld]))),CallNoArgs(SVar("has-origin-sublist"))))),Var("node")))))]),Rules([]),Rules([SDefT("list-diff",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-lst")],LChoice(CallT(SVar("list-diff-fuzzy"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-lst")]),CallT(SVar("list-diff-origin-related"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-lst")]))),RDefT("list-diff-fuzzy",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-lst")],Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("origin-elem")],Var("origin-rest"))),NoAnnoList(ListTail([Var("new-elem")],Var("new-rest")))])),Var("ast-changes"),Seq(BA(CallT(SVar("is-deletion"),[],[Var("new-rest")]),Var("origin-elem")),Seq(BA(CallT(SVar("is-insertion"),[],[Var("origin-rest")]),Var("new-elem")),Assign(Var("ast-changes"),App(CallNoArgs(SVar("flatten-list")),NoAnnoList(ListTail([App(Call(SVar("collect-ast-changes"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-elem"),Var("new-elem")])))],App(CallT(SVar("list-diff"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-lst")]),NoAnnoList(Tuple([Var("origin-rest"),Var("new-rest")]))))))))))),RDefT("list-diff-origin-related",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-lst")],Rule(NoAnnoList(Tuple([Var("origin-elems"),Var("new-elems")])),Var("ast-changes"),Seq(Assign(Var("deleted-elems"),App(Call(SVar("take-while"),[CallT(SVar("is-deletion"),[],[Var("new-elems")])]),Var("origin-elems"))),Seq(Assign(Var("origin-rest"),App(Call(SVar("drop-while"),[CallT(SVar("is-deletion"),[],[Var("new-elems")])]),Var("origin-elems"))),Seq(BA(Not(Match(NoAnnoList(List([])))),Var("deleted-elems")),Seq(BA(CallNoArgs(SVar("check-change-origin")),NoAnnoList(Op("DELETION",[Var("deleted-elems")]))),Assign(Var("ast-changes"),App(CallNoArgs(SVar("flatten-list")),NoAnnoList(ListTail([NoAnnoList(Op("DELETION",[Var("deleted-elems")]))],App(CallT(SVar("list-diff"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-lst")]),NoAnnoList(Tuple([Var("origin-rest"),Var("new-elems")]))))))))))))),RDefT("list-diff-origin-related",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-lst")],Rule(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("origin-elem")],Var("origin-rest"))),Var("new-elems")])),Var("ast-changes"),Seq(Assign(NoAnnoList(Tuple([Var("inserted"),Var("elem"),Var("rest")])),App(Call(SVar("split-fetch-keep"),[CallT(SVar("is-related-to"),[],[Var("origin-elem")])]),Var("new-elems"))),Seq(BA(CallNoArgs(SVar("check-change-origin")),NoAnnoList(Op("INSERT_BEFORE",[Var("origin-elem"),Var("inserted")]))),Assign(Var("ast-changes"),App(CallNoArgs(SVar("flatten-list")),NoAnnoList(ListTail([NoAnnoList(Op("INSERT_BEFORE",[Var("origin-elem"),Var("inserted")])),App(Call(SVar("collect-ast-changes"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))]),NoAnnoList(Tuple([Var("origin-elem"),Var("elem")])))],App(CallT(SVar("list-diff"),[CallNoArgs(SVar("override-reconstruction")),CallNoArgs(SVar("resugar"))],[Var("origin-lst")]),NoAnnoList(Tuple([Var("origin-rest"),Var("rest")]))))))))))),RDefT("list-diff-origin-related",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-lst")],Rule(NoAnnoList(Tuple([NoAnnoList(List([])),Var("new-elems")])),NoAnnoList(List([NoAnnoList(Op("INSERT_AT_END",[Var("origin-lst"),Var("new-elems")]))])),BA(CallNoArgs(SVar("check-change-origin")),NoAnnoList(Op("INSERT_AT_END",[Var("origin-lst"),Var("new-elems")]))))),RDefT("list-diff-origin-related",[DefaultVarDec("override-reconstruction"),DefaultVarDec("resugar")],[DefaultVarDec("origin-lst")],Rule(NoAnnoList(Tuple([NoAnnoList(List([])),Var("new-elems")])),NoAnnoList(List([NoAnnoList(Op("INSERT_AT_END",[App(CallNoArgs(SVar("last")),Var("origin-lst")),Var("new-elems")]))])),BA(CallNoArgs(SVar("check-change-origin")),NoAnnoList(Op("INSERT_AT_END",[App(CallNoArgs(SVar("last")),Var("origin-lst")),Var("new-elems")])))))]),Rules([RDefNoArgs("find-origin-sublist",Rule(Var("lst"),Var("sublst"),LChoice(Call(SVar("at-suffix"),[Assign(Var("sublst"),RootApp(Seq(CallNoArgs(SVar("origin-sublist-term")),Match(NoAnnoList(ListTail([Wld,Wld],Wld))))))]),Assign(Var("sublst"),App(Seq(CallNoArgs(SVar("init")),CallNoArgs(SVar("find-origin-sublist"))),Var("lst")))))),SDefNoArgs("has-origin-sublist",Where(CallNoArgs(SVar("find-origin-sublist")))),RDefT("is-terminating-diff",[],[DefaultVarDec("newnode")],Rule(Var("ast-changes"),Var("ast-changes"),BA(Not(Call(SVar("fetch"),[Match(NoAnnoList(Op("REPLACEMENT",[Wld,Var("newnode")])))])),Var("ast-changes"))))]),Rules([RDefNoArgs("same-signature",Rule(As(Var("t"),NoAnnoList(Tuple([Var("trm1"),Var("trm2")]))),NoAnnoList(Tuple([Var("trm1"),Var("trm2")])),Seq(BA(CallNoArgs(SVar("is-tuple")),Var("t")),Seq(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([App(CallNoArgs(SVar("get-constructor")),Var("trm1")),App(CallNoArgs(SVar("get-constructor")),Var("trm2"))]))),Seq(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([App(Seq(CallNoArgs(SVar("get-arguments")),CallNoArgs(SVar("length"))),Var("trm1")),App(Seq(CallNoArgs(SVar("get-arguments")),CallNoArgs(SVar("length"))),Var("trm2"))]))),BA(Not(CallNoArgs(SVar("is-list"))),Var("trm1"))))))),RDefT("same-signature",[],[DefaultVarDec("t1")],Rule(Var("t"),Var("t"),BA(CallNoArgs(SVar("same-signature")),NoAnnoList(Tuple([Var("t1"),Var("t")]))))),SDefNoArgs("violates-homomorphism-list",Seq(Match(NoAnnoList(Tuple([NoAnnoList(List([Var("ortrm")])),NoAnnoList(List([Var("newtrm")]))]))),Where(Not(BA(CallT(SVar("is-related-to-fuzzy"),[],[Var("ortrm")]),Var("newtrm")))))),RDefT("is-insertion",[],[DefaultVarDec("origin-elems")],Rule(Var("new-elem"),Var("new-elem"),Seq(BA(Match(NoAnnoList(ListTail([Var("or-elem")],Var("tail")))),Var("origin-elems")),Seq(BA(Not(CallT(SVar("is-related-to"),[],[Var("or-elem")])),Var("new-elem")),BA(CallT(SVar("is-insertion"),[],[Var("tail")]),Var("new-elem")))))),SDefT("is-insertion",[],[DefaultVarDec("origin-elems")],BA(Match(NoAnnoList(List([]))),Var("origin-elems"))),SDefT("is-deletion",[],[DefaultVarDec("new-elems")],Seq(Match(Var("origin-elem")),BA(Not(Call(SVar("fetch"),[CallT(SVar("is-related-to"),[],[Var("origin-elem")])])),Var("new-elems")))),RDefT("is-related-to",[],[DefaultVarDec("origin-node")],Rule(Var("node"),Var("node"),LChoice(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("origin-node"),Var("node")]))),LChoice(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("origin-term")),Var("origin-node")),Var("node")]))),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(CallNoArgs(SVar("origin-term")),Var("origin-node")),App(CallNoArgs(SVar("origin-term")),Var("node"))]))))))),RDefNoArgs("is-related-to",Rule(NoAnnoList(Tuple([Var("origin-node"),Var("node")])),NoAnnoList(Tuple([Var("origin-node"),Var("node")])),BA(CallT(SVar("is-related-to"),[],[Var("origin-node")]),Var("node")))),RDefT("is-related-to-fuzzy",[],[DefaultVarDec("origin-node")],Rule(Var("node"),Var("node"),BA(LChoice(Call(SVar("oncetd"),[CallT(SVar("origin-subfragment"),[],[Var("origin-node")])]),Call(SVar("topdown"),[Not(CallNoArgs(SVar("has-origin-term")))])),Var("node")))),RDefT("origin-subfragment",[],[DefaultVarDec("origin-node")],Rule(Var("node"),Var("node"),Seq(Assign(Var("start-offset"),App(CallNoArgs(SVar("origin-start-offset")),Var("node"))),Seq(Assign(Var("end-offset"),App(CallNoArgs(SVar("origin-end-offset")),Var("node"))),Seq(BA(CallNoArgs(SVar("leq")),NoAnnoList(Tuple([App(CallNoArgs(SVar("origin-leftmost-offset")),Var("origin-node")),Var("start-offset")]))),BA(CallNoArgs(SVar("leq")),NoAnnoList(Tuple([Var("end-offset"),App(CallNoArgs(SVar("origin-rightmost-offset")),Var("origin-node"))])))))))),SDefNoArgs("origin-leftmost-offset",LChoice(CallNoArgs(SVar("origin-start-offset")),Seq(CallNoArgs(SVar("get-arguments")),Call(SVar("fetch-elem"),[CallNoArgs(SVar("origin-leftmost-offset"))])))),SDefNoArgs("origin-rightmost-offset",LChoice(CallNoArgs(SVar("origin-end-offset")),Seq(CallNoArgs(SVar("get-arguments")),Seq(CallNoArgs(SVar("reverse")),Call(SVar("fetch-elem"),[CallNoArgs(SVar("origin-rightmost-offset"))])))))])])