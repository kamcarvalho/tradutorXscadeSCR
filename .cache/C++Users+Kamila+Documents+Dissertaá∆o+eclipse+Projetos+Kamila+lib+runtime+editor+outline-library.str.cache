Module("runtime/editor/outline-library",[Imports([Import("runtime/editor/origins"),Import("runtime/editor/annotations")]),Strategies([SDef("simple-label-outline",[DefaultVarDec("s1")],Call(SVar("collect-om"),[Call(SVar("to-outline-node"),[CallNoArgs(SVar("s1")),Fail]),CallNoArgs(SVar("conc"))])),SDef("custom-label-outline",[DefaultVarDec("s1"),DefaultVarDec("s2")],Call(SVar("collect-om"),[LChoice(Call(SVar("origin-track-forced"),[CallNoArgs(SVar("s2"))]),Call(SVar("to-outline-node"),[CallNoArgs(SVar("s1")),CallNoArgs(SVar("s2"))])),CallNoArgs(SVar("conc"))])),RDef("to-outline-node",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rule(Var("term"),NoAnnoList(Op("Node",[Var("label"),Var("children")])),Seq(Assign(Var("random"),RootApp(CallNoArgs(SVar("next-random")))),Seq(Assign(Var("label"),App(Call(SVar("origin-track-forced"),[Seq(CallNoArgs(SVar("s1")),Seq(CallNoArgs(SVar("term-to-outline-label")),Seq(CallT(SVar("add-annotation"),[],[Var("random")]),Call(SVar("remove-annotations"),[Match(Var("random"))]))))]),Var("term"))),Assign(Var("children"),App(Seq(CallNoArgs(SVar("get-arguments")),Call(SVar("custom-label-outline"),[CallNoArgs(SVar("s1")),CallNoArgs(SVar("s2"))])),Var("term"))))))),SDefNoArgs("term-to-outline-label",LChoice(CallNoArgs(SVar("is-string")),LChoice(Seq(Match(AnnoList(Var("term"),[Var("a")])),Seq(CallNoArgs(SVar("origin-text")),Seq(Match(Var("label")),Build(AnnoList(Var("label"),[Var("a")]))))),CallNoArgs(SVar("write-to-string")))))]),Rules([]),Rules([RDefT("literals-to-outline-label",[],[DefaultVarDec("term")],Rule(Var("literals"),Var("literals"),Seq(Assign(Var("literals'"),App(CallNoArgs(SVar("split-at-space")),Var("literals"))),Seq(Assign(NoAnnoList(Tuple([Var("a"),Var("b"),Var("c"),Var("d"),Var("e")])),App(CallNoArgs(SVar("origin-location-offset")),Var("term"))),Seq(Assign(NoAnnoList(Tuple([Var("before"),Var("after")])),App(CallNoArgs(SVar("split-before")),NoAnnoList(Tuple([App(CallNoArgs(SVar("origin-text")),Var("term")),App(CallNoArgs(SVar("Hd")),Var("literals'"))])))),Seq(Assign(Var("start-offset"),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("d"),App(CallNoArgs(SVar("string-length")),Var("before"))])))),Seq(Assign(Var("end-offset"),App(CallT(SVar("get-literals-end-offset"),[],[Var("literals'"),Var("start-offset")]),Var("after"))),BA(CallT(SVar("origin-location-offset-set"),[],[NoAnnoList(Tuple([Var("a"),Var("b"),Var("c"),Var("start-offset"),Var("end-offset")]))]),Var("literals"))))))))),RDefT("get-literals-end-offset",[],[DefaultVarDec("literals"),DefaultVarDec("start-offset")],Rule(Var("text"),Var("end-offset"),Seq(Assign(NoAnnoList(Tuple([Var("before"),Var("after")])),App(CallNoArgs(SVar("split-after")),NoAnnoList(Tuple([Var("text"),App(CallNoArgs(SVar("Hd")),Var("literals"))])))),Assign(Var("end-offset"),App(CallT(SVar("get-literals-end-offset"),[],[App(CallNoArgs(SVar("Tl")),Var("literals")),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("start-offset"),App(CallNoArgs(SVar("string-length")),Var("before"))])))]),Var("after")))))),RDefT("get-literals-end-offset",[],[DefaultVarDec("literals"),DefaultVarDec("start-offset")],Rule(Wld,App(CallNoArgs(SVar("dec")),Var("start-offset")),Assign(NoAnnoList(List([])),Var("literals"))))]),Rules([RDefNoArgs("origin-text-at-start",Rule(Var("term"),Var("result'"),Seq(Assign(NoAnnoList(Tuple([Var("cons"),Var("args")])),App(CallNoArgs(SVar("explode-term")),Var("term"))),Seq(Assign(Var("offset1"),App(Seq(CallNoArgs(SVar("origin-offset")),Match(NoAnnoList(Tuple([RootApp(Id),Wld])))),Var("term"))),Seq(Assign(Var("offset2"),App(Seq(CallNoArgs(SVar("Hd")),Seq(CallNoArgs(SVar("origin-offset")),Match(NoAnnoList(Tuple([RootApp(Id),Wld]))))),Var("args"))),Seq(Assign(Var("offset-diff"),App(CallNoArgs(SVar("subt")),NoAnnoList(Tuple([Var("offset2"),Var("offset1")])))),CondChoice(Assign(NoAnnoList(Int("0")),Var("offset-diff")),Assign(Var("result'"),App(Seq(CallNoArgs(SVar("Hd")),Seq(CallNoArgs(SVar("origin-text")),CallNoArgs(SVar("guarantee-one-space-separation")))),Var("args"))),Seq(Assign(Var("result"),App(Seq(CallNoArgs(SVar("origin-text")),Seq(CallNoArgs(SVar("explode-string")),Seq(Call(SVar("take"),[Build(Var("offset-diff"))]),Seq(Call(SVar("rtrim"),[Choice(CallNoArgs(SVar("is-whitespace")),Test(CharCong("'\\n'")))]),CallNoArgs(SVar("implode-string")))))),Var("term"))),Seq(Assign(Var("result'"),App(CallNoArgs(SVar("guarantee-one-space-separation")),Var("result"))),Seq(Assign(NoAnnoList(Tuple([Var("a"),Var("b"),Var("c"),Var("d"),Var("e")])),App(CallNoArgs(SVar("origin-location-offset")),Var("term"))),BA(CallT(SVar("origin-location-offset-set"),[],[NoAnnoList(Tuple([Var("a"),Var("b"),Var("c"),Var("d"),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([Var("d"),App(Seq(CallNoArgs(SVar("string-length")),CallNoArgs(SVar("dec"))),Var("result"))])))]))]),Var("result'")))))))))))),SDefNoArgs("guarantee-one-space-separation",Call(SVar("string-as-chars"),[Seq(Call(SVar("map"),[Call(SVar("try"),[Seq(Test(Choice(CharCong("'\\n'"),CharCong("' '"))),Build(NoAnnoList(Char("' '"))))])]),Call(SVar("foldr"),[Build(NoAnnoList(List([]))),LChoice(CallNoArgs(SVar("rm-double-space")),CallNoArgs(SVar("MkCons")))]))])),RDefNoArgs("rm-double-space",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Char("' '")),As(Var("l"),NoAnnoList(ListTail([NoAnnoList(Char("' '"))],Var("xs"))))])),Var("l")))]),Signature([Constructors([OpDecl("Node",FunType([ConstType(SortVar("label")),ConstType(SortVar("children"))],ConstType(SortNoArgs("Node"))))])])])