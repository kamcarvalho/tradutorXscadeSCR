Module("generate",[Imports([Import("include/Entity"),Import("type"),Import("constant"),Import("operator"),Import("java")]),Rules([RDefNoArgs("generate-java",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"java\""))]),Var("path"))),Assign(Var("result"),NoAnnoList(Str("\"Codigo em java\"")))))])),RDefNoArgs("generate-scr",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"scr\""))]),Var("path"))),Assign(Var("result"),App(CallNoArgs(SVar("to-scr")),Var("selected")))))]))]),Rules([RDefNoArgs("to-scr",Rule(NoAnnoList(Op("Main",[Var("package")])),NoAnnoList(StringQuotation1("  	                   ",[StringEscape1("  	                   ",Var("resolvedPackage"))])),[WithClause(Assign(Var("resolvedPackage"),App(CallNoArgs(SVar("to-package")),Var("package"))))])),RDefNoArgs("to-package",Rule(NoAnnoList(Op("Package",[Var("pragmaId"),Var("declarations"),Var("pragmas")])),NoAnnoList(StringQuotation1("  	                                              ",[QStr("spec "),StringEscape1("  	                                                   ",Var("pragmaId")),QStr("\n  	"),StringEscape1("  	",Var("resolvedDeclarations"))])),[WithClause(Assign(Var("resolvedDeclarations"),App(CallNoArgs(SVar("to-declarations")),Var("declarations"))))])),RDefNoArgs("to-declarations",Rule(NoAnnoList(Op("Declarations",[Var(ListVar("types*")),Var(ListVar("constants*")),Var(ListVar("operators*"))])),NoAnnoList(StringQuotation1("  		  ",[QStr("type definitions\n  			"),StringEscape1("  			",Var("resolvedTypes")),QStr("\n  		constant definitions\n  			"),StringEscape1("  			",Var("resolvedConstants")),QStr("\n  		"),StringEscape1("  		",Var("resolvedOperators")),QStr("\n  	")])),[WithClause(Assign(Var("resolvedTypes"),App(CallNoArgs(SVar("to-type")),Var(ListVar("types*"))))),WithClause(Assign(Var("resolvedConstants"),App(CallNoArgs(SVar("to-constant")),Var(ListVar("constants*"))))),WithClause(Assign(Var("resolvedOperators"),App(CallNoArgs(SVar("to-operator")),Var(ListVar("operators*")))))]))])])