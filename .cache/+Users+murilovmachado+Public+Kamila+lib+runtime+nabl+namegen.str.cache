Module("nbl/namegen",[Imports([Import("runtime/nabl/collect"),Import("runtime/nabl/query"),Import("runtime/nabl/uri"),Import("runtime/nabl/utils"),Import("runtime/nabl/interface"),Import("runtime/editor/origins"),Import("runtime/editor/annotations"),Import("runtime/index/core"),Import("runtime/index/query")]),Signature([Constructors([OpDecl("GenerateName",FunType([ConstType(SortNoArgs("Namespace"))],ConstType(SortNoArgs("GenerateName")))),OpDecl("GenerateNum",FunType([ConstType(SortNoArgs("URI"))],ConstType(SortNoArgs("Key"))))])]),Rules([SDefT("nabl-namegen-stem",[],[DefaultVarDec("ns")],CallT(SVar("add-annotation"),[],[NoAnnoList(Op("GenerateName",[Var("ns")]))]))]),Rules([RDefT("nabl-namegen",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("unique*")),DefaultVarDec(ListVar("uri*")),DefaultVarDec(ListVar("anno*"))],Rule(Var("name"),App(Call(SVar("origin-track-forced"),[Build(AnnoList(Var("newname"),[Var(ListVar("anno'*"))]))]),Var("name")),Seq(BA(Call(SVar("get-annotation"),[Match(NoAnnoList(Op("GenerateName",[Var("ns")])))]),Var("name")),Seq(Assign(Var("uri"),App(CallT(SVar("lookup-uri"),[],[Var("lang"),Var("ns")]),Var(ListVar("uri*")))),Seq(Assign(Var("newname"),App(CallT(SVar("nabl-namegen-get"),[],[Var("lang"),Var("partition"),Var("ns"),Var("uri"),Var(ListVar("unique*"))]),Var("name"))),Assign(Var(ListVar("anno'*")),App(Call(SVar("remove-all"),[Match(NoAnnoList(Op("GenerateName",[Wld])))]),Var(ListVar("anno*"))))))))),RDefT("nabl-namegen-get",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec("ns"),DefaultVarDec("uri"),DefaultVarDec(ListVar("unique*"))],Rule(Var("name"),Var("result"),[WithClause(Seq(Assign(Var("name-key"),NoAnnoList(Tuple([Var("name"),NoAnnoList(Str("\"namegen\""))]))),CondChoice(Assign(Var("full-newname"),App(CallT(SVar("hashtable-get"),[],[Var("name-key")]),Var(ListVar("unique*")))),Assign(Var("result"),Var("full-newname")),Seq(Assign(Var("nextnum"),RootApp(LChoice(CallT(SVar("nabl-namegen-get-num"),[],[Var("uri")]),Build(NoAnnoList(Int("0")))))),Seq(Assign(Var("numstr"),App(CallNoArgs(SVar("int-to-string")),Var("nextnum"))),Seq(Assign(Var("newname"),App(CallT(SVar("nabl-namegen-name-create"),[],[Var("lang"),Var("partition"),Var("uri"),Var("ns")]),Var("numstr"))),Seq(Assign(Var("result"),NoAnnoList(StringQuotation1("                     ",[StringEscape1("                     ",Var("newname")),StringEscape1("                              ",Var("numstr"))]))),Seq(BA(CallT(SVar("hashtable-put"),[],[Var("name-key"),Var("result")]),Var(ListVar("unique*"))),BA(Seq(CallNoArgs(SVar("inc")),CallT(SVar("nabl-namegen-store-num"),[],[Var("partition"),Var("uri")])),Var("nextnum"))))))))))]))]),Rules([SDefT("nabl-namegen-name-create",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec("uri"),DefaultVarDec("ns")],LChoice(CallT(SVar("nabl-namegen-name"),[],[Var("lang"),Var("partition"),Var("uri"),Var("ns")]),CallT(SVar("nabl-namegen-name-generic"),[],[Var("lang"),Var("partition"),Var("uri"),Var("ns")]))),RDefT("nabl-namegen-name-generic",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec("uri"),DefaultVarDec("ns")],Rule(Var("name"),App(CallNoArgs(SVar("nabl-namegen-name-generic-fix")),NoAnnoList(StringQuotation1("        ",[StringEscape1("        ",App(CallNoArgs(SVar("nabl-namegen-name-generic-str")),Var("lang-name"))),StringEscape1("                                                   ",App(CallNoArgs(SVar("nabl-namegen-name-generic-str")),Var("partition"))),StringEscape1("                                                                                              ",Var("ns-name")),StringEscape1("                                                                                                       ",Var("uri-name")),StringEscape1("                                                                                                                 ",Var("name"))]))),[WithClause(Seq(Assign(NoAnnoList(Op("Language",[Var("lang-name")])),Var("lang")),Seq(Assign(Var("ns-name"),App(Seq(CallNoArgs(SVar("get-constructor")),CallNoArgs(SVar("nabl-namegen-name-generic-str"))),Var("ns"))),Assign(Var("uri-name"),App(Seq(CallNoArgs(SVar("nabl-uri-path")),Seq(Call(SVar("filter"),[Seq(CallNoArgs(SVar("nabl-segment-name")),CallNoArgs(SVar("nabl-namegen-name-generic-str")))]),CallNoArgs(SVar("concat-strings")))),Var("uri"))))))])),SDefNoArgs("nabl-namegen-name-generic-str",Seq(CallNoArgs(SVar("explode-string")),Seq(CallNoArgs(SVar("reverse")),Seq(LChoice(CallT(SVar("take"),[],[NoAnnoList(Int("3"))]),LChoice(CallT(SVar("take"),[],[NoAnnoList(Int("2"))]),LChoice(CallT(SVar("take"),[],[NoAnnoList(Int("1"))]),Build(NoAnnoList(List([])))))),Seq(CallNoArgs(SVar("reverse")),CallNoArgs(SVar("implode-string"))))))),SDefNoArgs("nabl-namegen-name-generic-fix",Seq(CallNoArgs(SVar("lower-case")),Seq(CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"/\"")),NoAnnoList(Str("\"_\""))]),Seq(CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"-\"")),NoAnnoList(Str("\"_\""))]),CallT(SVar("string-replace"),[],[NoAnnoList(Str("\".\"")),NoAnnoList(Str("\"_\""))])))))]),Rules([SDefT("nabl-namegen-get-num",[],[DefaultVarDec("uri")],BA(Seq(CallNoArgs(SVar("index-get-all-values")),Seq(Build(NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("0"))]))),Call(SVar("foldl"),[CallNoArgs(SVar("max"))]))),NoAnnoList(Op("GenerateNum",[Var("uri")])))),RDefT("nabl-namegen-store-num",[],[DefaultVarDec("partition"),DefaultVarDec("uri")],RuleNoCond(Var("value"),App(CallT(SVar("index-add"),[],[Var("value"),RootApp(CallT(SVar("nabl-namegen-partition"),[],[Var("partition")]))]),NoAnnoList(Op("GenerateNum",[Var("uri")]))))),SDefT("nabl-namegen-clear",[],[DefaultVarDec("partition")],Seq(CallT(SVar("nabl-namegen-partition"),[],[Var("partition")]),CallNoArgs(SVar("index-clear-source")))),SDefT("nabl-namegen-partition",[],[DefaultVarDec("partition")],Build(NoAnnoList(StringQuotation1("                                               ",[StringEscape1("                                               ",Var("partition")),QStr("_namegen")])))),RDefNoArgs("nabl-uri",RuleNoCond(NoAnnoList(Op("GenerateNum",[Var("uri")])),Var("uri")))])])