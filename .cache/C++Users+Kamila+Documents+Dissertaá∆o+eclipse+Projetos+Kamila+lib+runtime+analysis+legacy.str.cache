Module("runtime/analysis/legacy",[Imports([Import("runtime/analysis/core"),Import("runtime/analysis/save"),Import("runtime/analysis/complete"),Import("runtime/analysis/resolve"),Import("runtime/editor/eclipse"),Import("runtime/editor/queue"),Import("runtime/index/core"),Import("runtime/task/core"),Import("runtime/nabl/collect"),Import("runtime/task/messages"),Import("runtime/task/core")]),Rules([SDefNoArgs("analysis-single-default-interface",Fail),SDefNoArgs("analysis-multiple-default-interface",Fail),SDefNoArgs("constraint-error",Fail),SDefNoArgs("constraint-warning",Fail),SDefNoArgs("constraint-note",Fail)]),Rules([SDefNoArgs("analysis-default-editor",LChoice(Seq(Where(CallNoArgs(SVar("is-tuple"))),CallNoArgs(SVar("analysis-single-default-interface"))),CallT(SVar("queue-strategy"),[],[NoAnnoList(Str("\"analysis-multiple-default-interface\"")),NoAnnoList(Str("\"Analyzing files (legacy)\""))]))),SDefNoArgs("analysis-default-cmd",CallNoArgs(SVar("analysis-multiple-default-interface"))),SDefNoArgs("analysis-cmd",CallNoArgs(SVar("analysis-multiple-default-interface"))),SDefT("analysis-single-default",[DefaultVarDec("pre-trans"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language")],CallT(SVar("analysis-single-default"),[CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("nabl-collect")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language")])),SDefT("analysis-single-default",[DefaultVarDec("pre-trans"),DefaultVarDec("collector"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language")],CallT(SVar("analysis-files-spoofax"),[Fail,CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),RootApp(CallNoArgs(SVar("project-path")))])),SDefT("analysis-multiple-default",[DefaultVarDec("parse-file"),DefaultVarDec("pre-trans"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],CallT(SVar("analysis-top"),[CallNoArgs(SVar("parse-file")),CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("nabl-collect")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")])),SDefT("analysis-multiple-default",[DefaultVarDec("parse-file"),DefaultVarDec("pre-trans"),DefaultVarDec("collector"),DefaultVarDec("post-trans"),DefaultVarDec("pp-message")],[DefaultVarDec("language"),DefaultVarDec("project-path")],CallT(SVar("analysis-top"),[CallNoArgs(SVar("parse-file")),CallNoArgs(SVar("pre-trans")),CallNoArgs(SVar("post-trans")),CallNoArgs(SVar("pp-message"))],[Var("language"),Var("project-path")]))]),Rules([SDefT("analysis-save-default",[],[DefaultVarDec("language")],CallT(SVar("analysis-spoofax-save"),[],[Var("language")])),SDefT("analysis-propose-completions",[],[DefaultVarDec("language"),DefaultVarDec("project-path"),DefaultVarDec("path")],CallT(SVar("analysis-propose-completions"),[],[Var("language"),Var("project-path")])),SDefT("analysis-resolve",[],[DefaultVarDec("language"),DefaultVarDec("project-path"),DefaultVarDec("path")],CallT(SVar("analysis-resolve"),[],[Var("language"),Var("project-path")]))]),Rules([SDefT("analysis-get-legacy-messages",[],[DefaultVarDec("source")],CallT(SVar("task-get-messages"),[],[NoAnnoList(StringQuotation1("                                                               ",[StringEscape1("                                                               ",Var("source")),QStr("_legacy")]))])),RDefNoArgs("analysis-collect-legacy-messages",Rule(As(Var("result"),NoAnnoList(Op("FileResult",[Wld,Wld,Var("source"),Wld,Var("ast"),Wld,Wld,Wld]))),Var("result"),[WithClause(Seq(Assign(Var(ListVar("error-tuple*")),App(Seq(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error"))]),CallNoArgs(SVar("flatten-list"))),Var("ast"))),Seq(Assign(Var(ListVar("warning-tuple*")),App(Seq(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-warning"))]),CallNoArgs(SVar("flatten-list"))),Var("ast"))),Seq(Assign(Var(ListVar("note-tuple*")),App(Seq(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-note"))]),CallNoArgs(SVar("flatten-list"))),Var("ast"))),IfThen(LChoice(BA(CallNoArgs(SVar("Tl")),Var(ListVar("error-tuple*"))),LChoice(BA(CallNoArgs(SVar("Tl")),Var(ListVar("warning-tuple*"))),BA(CallNoArgs(SVar("Tl")),Var(ListVar("note-tuple*"))))),Seq(Assign(Var("legacy-source"),NoAnnoList(StringQuotation1("                            ",[StringEscape1("                            ",Var("source")),QStr("_legacy")]))),Seq(CallT(SVar("task-start-collection"),[],[Var("legacy-source")]),Seq(Assign(Var(ListVar("error*")),App(Call(SVar("filter"),[CallT(SVar("analysis-legacy-convert-error"),[],[Var("legacy-source")])]),Var(ListVar("error-tuple*")))),Seq(Assign(Var(ListVar("warning*")),App(Call(SVar("filter"),[CallT(SVar("analysis-legacy-convert-warning"),[],[Var("legacy-source")])]),Var(ListVar("warning-tuple*")))),Seq(Assign(Var(ListVar("note*")),App(Call(SVar("filter"),[CallT(SVar("analysis-legacy-convert-note"),[],[Var("legacy-source")])]),Var(ListVar("note-tuple*")))),Seq(CallT(SVar("task-stop-collection"),[],[Var("legacy-source")]),BA(CallNoArgs(SVar("task-evaluate-now")),NoAnnoList(List([Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))]))))))))))))))])),RDefT("analysis-legacy-convert-error",[],[DefaultVarDec("source")],RuleNoCond(NoAnnoList(Tuple([Var("term"),Var("message")])),App(Seq(CallT(SVar("task-create-error"),[],[Var("source"),Var("message")]),CallNoArgs(SVar("task-result-id"))),Var("term")))),RDefT("analysis-legacy-convert-warning",[],[DefaultVarDec("source")],RuleNoCond(NoAnnoList(Tuple([Var("term"),Var("message")])),App(Seq(CallT(SVar("task-create-warning"),[],[Var("source"),Var("message")]),CallNoArgs(SVar("task-result-id"))),Var("term")))),RDefT("analysis-legacy-convert-note",[],[DefaultVarDec("source")],RuleNoCond(NoAnnoList(Tuple([Var("term"),Var("message")])),App(Seq(CallT(SVar("task-create-note"),[],[Var("source"),Var("message")]),CallNoArgs(SVar("task-result-id"))),Var("term"))))])])