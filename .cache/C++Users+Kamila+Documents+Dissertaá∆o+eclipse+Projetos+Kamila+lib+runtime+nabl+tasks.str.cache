Module("runtime/nabl/tasks",[Imports([Import("runtime/task/core"),Import("runtime/task/create"),Import("runtime/task/insert"),Import("runtime/task/tasks"),Import("runtime/task/utils"),Import("runtime/nabl/lookup"),Import("runtime/nabl/collect"),Import("runtime/nabl/query"),Import("runtime/nabl/incremental"),Import("runtime/nabl/interface"),Import("runtime/nabl/uri"),Import("runtime/nabl/utils"),Import("runtime/nabl/entries"),Import("runtime/properties/collect"),Import("runtime/properties/entries"),Import("runtime/properties/eq"),Import("runtime/properties/query"),Import("runtime/properties/tasks")]),Signature([Constructors([OpDecl("CollectDefs",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Instruction")))),OpDecl("ResolveDefs",FunType([ConstType(SortNoArgs("Scope")),ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("Name")),ConstType(SortNoArgs("Prop"))],ConstType(SortNoArgs("Instruction")))),OpDecl("ResolveAllDefs",FunType([ConstType(SortNoArgs("Scope")),ConstType(SortNoArgs("Namespace"))],ConstType(SortNoArgs("Instruction")))),OpDecl("ResolveAllDefs",FunType([ConstType(SortNoArgs("Scope")),ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("Name")),ConstType(SortNoArgs("Prop"))],ConstType(SortNoArgs("Instruction")))),OpDecl("CheckDefs",FunType([ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("URI"))],ConstType(SortNoArgs("Instruction")))),OpDecl("PropConstraint",FunType([ConstType(SortNoArgs("Kind")),ConstType(SortNoArgs("Expected")),ConstType(SortNoArgs("Result"))],ConstType(SortNoArgs("Instruction")))),OpDecl("SubURI",FunType([ConstType(SortNoArgs("Namespace")),ConstType(SortNoArgs("URI"))],ConstType(SortNoArgs("Instruction")))),OpDecl("FilterDefsHigherOrder",FunType([ConstType(Sort("List",[SortNoArgs("Def")])),ConstType(Sort("List",[SortNoArgs("Term")])),ConstType(Sort("List",[SortNoArgs("Term")])),ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Instruction")))),OpDecl("FilterDefs",FunType([ConstType(Sort("List",[SortNoArgs("DefTuple")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("DisambiguateDefsHigherOrder",FunType([ConstType(Sort("List",[SortNoArgs("Def")])),ConstType(Sort("List",[SortNoArgs("Term")])),ConstType(Sort("List",[SortNoArgs("Term")])),ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Instruction")))),OpDecl("DisambiguateDefs",FunType([ConstType(Sort("List",[SortNoArgs("DefTuple")]))],ConstType(SortNoArgs("Instruction"))))])]),Rules([RDefT("nabl-create-collectdefs",[],[DefaultVarDec("ctx")],RuleNoCond(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("CollectDefs",[Var("term")]))))),RDefT("nabl-create-collectdefs",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("dep*"))],Rule(Var("term"),App(CallT(SVar("new-task"),[],[Var("ctx"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("CollectDefs",[Var("term")]))),[WithClause(Assign(Var(ListVar("all-dep*")),App(CallT(SVar("merge-dependencies"),[],[Var(ListVar("dep*"))]),Var("term"))))])),RDefT("perform-task",[],[DefaultVarDec("nr")],RuleNoCond(NoAnnoList(Op("CollectDefs",[Var("term")])),App(LChoice(Match(NoAnnoList(Op("Def",[Wld]))),Seq(Call(SVar("try"),[CallNoArgs(SVar("nabl-get-name"))]),Seq(CallNoArgs(SVar("get-annos")),Call(SVar("fetch"),[Choice(Match(NoAnnoList(Op("Def",[Wld]))),Match(NoAnnoList(Op("Use",[RootApp(Id)]))))])))),Var("term"))))]),Rules([RDefT("nabl-create-resolvedefs",[],[DefaultVarDec("ctx"),DefaultVarDec("ns"),DefaultVarDec("name"),DefaultVarDec(ListVar("prop*"))],RuleNoCond(Var("scope"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("ResolveDefs",[Var("scope"),Var("ns"),Var("name"),Var(ListVar("prop*"))]))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],Rule(NoAnnoList(Op("ResolveDefs",[Var("scope"),Var("ns"),Var("name"),Var(ListVar("prop*"))])),Var("result"),Seq(Assign(Var("uri"),App(CallNoArgs(SVar("nabl-uri")),Var("scope"))),Seq(Assign(Var("name'"),App(Seq(CallNoArgs(SVar("try-remove-list")),CallNoArgs(SVar("strip-annos"))),Var("name"))),Seq(BA(CallT(SVar("nabl-add-name-read"),[],[Var("task-id"),Var("ns"),Var("name'")]),Var("uri")),Seq(Assign(Var(ListVar("def*")),App(CallT(SVar("nabl-lookup"),[],[Var("ns"),Var("name'")]),Var("uri"))),Assign(Var("result"),App(Seq(Call(SVar("filter"),[CallT(SVar("filter-defs-props"),[],[Var(ListVar("prop*"))])]),Not(Match(NoAnnoList(List([]))))),Var(ListVar("def*")))))))))),SDefNoArgs("task-short-circuit",Match(NoAnnoList(Op("ResolveDefs",[Wld,Wld,Wld,Wld]))))]),Rules([RDefT("nabl-create-resolvealldefs",[],[DefaultVarDec("ctx"),DefaultVarDec("ns"),DefaultVarDec("name"),DefaultVarDec(ListVar("prop*"))],RuleNoCond(Var("scope"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("ResolveAllDefs",[Var("scope"),Var("ns"),Var("name"),Var(ListVar("prop*"))]))))),RDefT("perform-task",[],[DefaultVarDec("nr")],RuleNoCond(NoAnnoList(Op("ResolveAllDefs",[Var("scope"),Var("ns"),Var("name"),Var(ListVar("prop*"))])),App(CallT(SVar("perform-task"),[],[Var("nr")]),NoAnnoList(Op("ResolveDefs",[Var("scope"),Var("ns"),Var("name"),Var(ListVar("prop*"))])))))]),Rules([RDefT("nabl-create-resolvealldefs",[],[DefaultVarDec("ctx"),DefaultVarDec("ns")],RuleNoCond(Var("scope"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("ResolveAllDefs",[Var("scope"),Var("ns")]))))),RDefT("perform-task",[],[DefaultVarDec("nr")],Rule(NoAnnoList(Op("ResolveAllDefs",[Var("scope"),Var("ns")])),Var(ListVar("def*")),Seq(Assign(Var("uri"),App(CallNoArgs(SVar("nabl-uri")),Var("scope"))),Seq(BA(CallT(SVar("nabl-add-ns-read"),[],[Var("nr"),Var("ns")]),Var("uri")),Seq(Assign(Var(ListVar("def*")),App(CallT(SVar("nabl-lookup-all"),[],[Var("ns")]),Var("uri"))),Not(Match(NoAnnoList(List([]))))))))),SDefT("nabl-insert-import-tasks",[],[DefaultVarDec("ctx"),DefaultVarDec("ns")],Seq(Call(SVar("map"),[Call(SVar("try"),[CallNoArgs(SVar("nabl-uri-strip-barriers"))])]),Call(SVar("mapconcat"),[Build(NoAnnoList(List([RootApp(Call(SVar("try"),[Seq(CallNoArgs(SVar("nabl-is-uri")),CallNoArgs(SVar("MkSingleton")))])),RootApp(Seq(CallT(SVar("prop-create-lookup"),[],[Var("ctx"),NoAnnoList(Op("Import",[Var("ns")]))]),Seq(CallT(SVar("task-create-insert"),[],[Var("ctx")]),CallT(SVar("task-create-combine"),[],[Var("ctx")]))))])))]))),SDefT("nabl-resolve-task",[],[DefaultVarDec("ctx"),DefaultVarDec("ns"),DefaultVarDec("name"),DefaultVarDec(ListVar("prop*"))],Seq(CallT(SVar("task-create-combine"),[],[Var("ctx")]),CallT(SVar("nabl-create-resolvedefs"),[],[Var("ctx"),Var("ns"),Var("name"),Var(ListVar("prop*"))]))),SDefT("nabl-resolve-all-task",[],[DefaultVarDec("ctx"),DefaultVarDec("ns"),DefaultVarDec("name"),DefaultVarDec(ListVar("prop*"))],Seq(CallT(SVar("task-create-combine"),[],[Var("ctx")]),CallT(SVar("nabl-create-resolvealldefs"),[],[Var("ctx"),Var("ns"),Var("name"),Var(ListVar("prop*"))]))),SDefT("nabl-resolve-all-tasks",[],[DefaultVarDec("partition"),DefaultVarDec("ns"),DefaultVarDec(ListVar("prop*"))],Call(SVar("map"),[Seq(BA(CallT(SVar("new-task"),[],[Var("partition")]),NoAnnoList(Op("ResolveAllDefs",[RootApp(Id),Var("ns")]))),BA(CallT(SVar("nabl-use-propconstraint"),[],[Var("partition")]),NoAnnoList(Tuple([RootApp(Id),Var(ListVar("prop*"))]))))]))]),Rules([RDefT("nabl-create-checkdefs",[],[DefaultVarDec("ctx"),DefaultVarDec("ns")],RuleNoCond(Var("definition"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("CheckDefs",[Var("ns"),Var("definition")]))))),RDefT("perform-task",[],[DefaultVarDec("nr")],Rule(NoAnnoList(Op("CheckDefs",[Var("ns"),Var("d")])),Var("d"),BA(Seq(CallNoArgs(SVar("nabl-uri")),Seq(CallNoArgs(SVar("nabl-uri-namespace")),Match(Var("ns")))),Var("d"))))]),Rules([RDefT("filter-defs-props",[],[DefaultVarDec(ListVar("prop*"))],RuleNoCond(Var("definition"),App(Seq(Call(SVar("map"),[CallT(SVar("filter-defs-prop"),[],[Var("definition")])]),Build(Var("definition"))),Var(ListVar("prop*"))))),RDefT("filter-defs-prop",[],[DefaultVarDec("definition")],Rule(NoAnnoList(Op("Prop",[Var("kind"),Var("expected"),Wld])),Var("definition"),Seq(Assign(Var("uri"),App(CallNoArgs(SVar("nabl-uri")),Var("definition"))),Seq(Assign(Var("value"),App(CallT(SVar("get-index-property"),[],[Var("kind")]),Var("uri"))),Seq(Assign(Var("value'"),App(CallNoArgs(SVar("insert-results-or-delay")),Var("value"))),BA(CallT(SVar("filter-defs-prop-eq"),[],[Var("expected"),Var("value'")]),Var("kind"))))))),RDefT("filter-defs-prop-eq",[],[DefaultVarDec("expected"),DefaultVarDec("value")],RuleNoCond(Var("kind"),App(CallNoArgs(SVar("nabl-property-eq")),NoAnnoList(Tuple([Var("kind"),NoAnnoList(Op("Eq",[])),NoAnnoList(Tuple([Var("expected"),Var("value")]))]))))),RDefT("filter-defs-prop-eq",[],[DefaultVarDec("expected"),DefaultVarDec("value")],RuleNoCond(Var("kind"),App(CallNoArgs(SVar("nabl-property-eq")),NoAnnoList(Tuple([Var("kind"),NoAnnoList(Op("Eq",[])),NoAnnoList(Tuple([Var("expected"),App(CallNoArgs(SVar("try-remove-list")),Var("value"))]))]))))),RDefT("nabl-create-propconstraint",[],[DefaultVarDec("ctx"),DefaultVarDec("kind"),DefaultVarDec("definition")],RuleNoCond(Var("expected"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("PropConstraint",[Var("kind"),Var("expected"),Var("definition")]))))),RDefT("nabl-create-propconstraint",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("dep*")),DefaultVarDec("kind"),DefaultVarDec("definition")],Rule(Var("expected"),App(CallT(SVar("new-task"),[],[Var("ctx"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("PropConstraint",[Var("kind"),Var("expected"),Var("definition")]))),[WithClause(Assign(Var(ListVar("all-dep*")),App(CallT(SVar("merge-dependencies"),[],[Var(ListVar("dep*"))]),NoAnnoList(Tuple([Var("kind"),Var("expected"),Var("definition")])))))])),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("PropConstraint",[Var("kind"),Var("expected"),Var("definition")])),App(CallT(SVar("filter-defs-prop"),[],[Var("definition")]),NoAnnoList(Op("Prop",[Var("kind"),Var("expected"),NoAnnoList(List([]))])))))]),Rules([RDefT("nabl-create-suburi",[],[DefaultVarDec("ctx"),DefaultVarDec("namespace")],RuleNoCond(Var("contains-uri"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("SubURI",[Var("namespace"),Var("contains-uri")]))))),RDefT("perform-task",[],[DefaultVarDec("task-id")],Rule(NoAnnoList(Op("SubURI",[Var("namespace"),Var("contains-uri")])),App(CallT(SVar("nabl-sub-uri"),[],[Var("namespace")]),Var("uri")),Assign(Var("uri"),App(CallNoArgs(SVar("nabl-uri")),Var("contains-uri")))))]),Rules([RDefT("nabl-create-filter",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("ctx-terms"),DefaultVarDec("ctx-string")],RuleNoCond(Var("defs"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("FilterDefsHigherOrder",[Var("defs"),Var(ListVar("uri*")),Var("ctx-terms"),Var("ctx-string")]))))),SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("FilterDefsHigherOrder",[Wld,Wld,Wld,Wld])))),SDefNoArgs("task-is-higherorder",Match(NoAnnoList(Op("FilterDefsHigherOrder",[Wld,Wld,Wld,Wld])))),RDefT("perform-task",[],[DefaultVarDec("task-id")],Rule(NoAnnoList(Op("FilterDefsHigherOrder",[Var(ListVar("def*")),Var(ListVar("uri*")),NoAnnoList(List([Var("ctx-terms")])),Var("ctx-string")])),NoAnnoList(Op("FilterDefs",[Var(ListVar("def-tuple*"))])),Assign(Var(ListVar("def-tuple*")),App(Call(SVar("filter"),[CallT(SVar("nabl-filter-def"),[],[Var("task-id"),Var(ListVar("uri*")),Var("ctx-terms"),Var("ctx-string")])]),Var(ListVar("def*")))))),SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("FilterDefs",[Wld])))),RDefT("perform-task",[],[DefaultVarDec("task-id")],RuleNoCond(NoAnnoList(Op("FilterDefs",[Var(ListVar("def-tuple*"))])),App(Call(SVar("filter"),[Not(Match(NoAnnoList(Tuple([Wld,NoAnnoList(List([]))]))))]),Var(ListVar("def-tuple*")))))]),Rules([RDefT("nabl-create-disambiguate",[],[DefaultVarDec("ctx"),DefaultVarDec(ListVar("uri*")),DefaultVarDec("ctx-terms"),DefaultVarDec("ctx-string")],RuleNoCond(Var("defs"),App(CallT(SVar("new-task"),[],[Var("ctx")]),NoAnnoList(Op("DisambiguateDefsHigherOrder",[Var("defs"),Var(ListVar("uri*")),Var("ctx-terms"),Var("ctx-string")]))))),SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("DisambiguateDefsHigherOrder",[Wld,Wld,Wld,Wld])))),SDefNoArgs("task-is-higherorder",Match(NoAnnoList(Op("DisambiguateDefsHigherOrder",[Wld,Wld,Wld,Wld])))),RDefT("perform-task",[],[DefaultVarDec("task-id")],Rule(NoAnnoList(Op("DisambiguateDefsHigherOrder",[Var(ListVar("def*")),Var(ListVar("uri*")),NoAnnoList(List([Var("ctx-terms")])),Var("ctx-string")])),NoAnnoList(Op("DisambiguateDefs",[Var(ListVar("def-tuple*"))])),Assign(Var(ListVar("def-tuple*")),App(Call(SVar("filter"),[CallT(SVar("nabl-disambiguate-def"),[],[Var("task-id"),Var(ListVar("uri*")),Var("ctx-terms"),Var("ctx-string")])]),Var(ListVar("def*")))))),SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("DisambiguateDefs",[Wld])))),RDefT("perform-task",[],[DefaultVarDec("task-id")],Rule(NoAnnoList(Op("DisambiguateDefs",[Var(ListVar("def-tuple*"))])),Var(ListVar("def-sorted2*")),Seq(Assign(Var(ListVar("def-sorted1*")),App(Call(SVar("sort-list"),[Call(SVar("LSort"),[LRule(RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Tuple([Wld,NoAnnoList(List([Var("x")]))])),NoAnnoList(Tuple([Wld,NoAnnoList(List([Var("y")]))]))])),App(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([Var("x"),Var("y")])))))])]),Var(ListVar("def-tuple*")))),Assign(Var(ListVar("def-sorted2*")),App(Seq(Call(SVar("take-while"),[Match(NoAnnoList(Tuple([Wld,Var("x")])))]),Call(SVar("map"),[CallNoArgs(SVar("Fst"))])),Var(ListVar("def-sorted1*")))))))])])