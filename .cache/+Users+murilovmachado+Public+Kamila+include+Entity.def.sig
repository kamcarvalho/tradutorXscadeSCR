definition([module(unparameterized("Java"),[imports([module(unparameterized("Common"))])],[exports(conc-grammars(context-free-syntax([prod([lit("module"),sort("ID"),iter-star(sort("Definition"))],sort("Start"),attrs([term(cons("Module"))])),prod([lit("entity"),sort("ID"),lit("{"),iter-star(sort("Property")),lit("}")],sort("Definition"),attrs([term(cons("Entity"))])),prod([sort("ID"),lit(":"),sort("Type")],sort("Property"),attrs([term(cons("Property"))])),prod([sort("ID")],sort("Type"),attrs([term(cons("Type"))])),prod([sort("ID"),lit(":"),sort("Type")],sort("Start"),attrs([term(cons("Declare"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Definition"),attrs([term(cons("COMPLETION-Definition"))])),prod([sort("CONTENTCOMPLETE")],sort("Property"),attrs([term(cons("COMPLETION-Property"))])),prod([sort("CONTENTCOMPLETE")],sort("Type"),attrs([term(cons("COMPLETION-Type"))])),prod([sort("CONTENTCOMPLETE")],sort("Start"),attrs([term(cons("COMPLETION-Start"))]))])))]),module(unparameterized("Assertion"),[imports([module(unparameterized("Common")),module(unparameterized("Operand"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_"),sort("PragmaId"),lit("\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion")),avoid])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_mSpeed_min\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion2"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_mSpeed_max\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion3"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_tDesiredSpeed_min\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion4"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_tDesiredSpeed_max\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion5"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_L_in_mSpeed_min\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion6"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_L_in_mSpeed_max\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion7"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_L_last_tDesiredSpeed_min\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion8"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_L_last_tDesiredSpeed_max\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion9"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_L_in_tDesiredSpeed_min\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion10"))])),prod([lit("<Assertion"),lit("kind=\\\"guarantee\\\""),lit("name=\\\"G_L_in_tDesiredSpeed_max\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assertion"),attrs([term(cons("Assertion11"))])),prod([lit("<pragmas>"),lit("<ed:Assertion"),lit("oid=\\\"!ed/guarantee/min/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragmas"),attrs([term(cons("pragma"))])),prod([lit("<pragmas>"),lit("<ed:Assertion"),lit("oid=\\\"!ed/guarantee/max/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragmas"),attrs([term(cons("pragma1"))])),prod([lit("<pragmas>"),lit("<ed:Assertion"),lit("oid=\\\"!ed/guarantee/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragmas"),attrs([term(cons("pragma2"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Assertion"),attrs([term(cons("COMPLETION-Assertion"))])),prod([sort("CONTENTCOMPLETE")],sort("Pragmas"),attrs([term(cons("COMPLETION-Pragmas"))]))])))]),module(unparameterized("Assumption"),[imports([module(unparameterized("Common")),module(unparameterized("Operand"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<Assertion"),lit("kind=\\\"assume\\\""),lit("name=\\\"A_"),sort("PragmaId"),lit("\\\">"),lit("<definition>"),sort("Operand"),lit("</definition>"),sort("Pragmas"),lit("</Assertion>")],sort("Assumption"),attrs([term(cons("Assumption"))])),prod([lit("<pragmas>"),lit("<ed:Assertion"),lit("oid=\\\"!ed/assume/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragmas"),attrs([term(cons("pragma"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Assumption"),attrs([term(cons("COMPLETION-Assumption"))])),prod([sort("CONTENTCOMPLETE")],sort("Pragmas"),attrs([term(cons("COMPLETION-Pragmas"))]))])))]),module(unparameterized("Operand"),[imports([module(unparameterized("Common"))])],[exports(conc-grammars(context-free-syntax([prod([],sort("Boolean"),attrs([term(cons("True"))])),prod([],sort("Boolean"),attrs([term(cons("False"))])),prod([lit("<NAryOp"),lit("operator=\\\"and\\\">"),lit("<operands>"),lit("<UnaryOp"),lit("operator=\\\"not\\\">"),lit("<operand>"),sort("Operand"),lit("</operand>"),lit("</UnaryOp>"),sort("Operand"),lit("</operands>"),lit("</NAryOp>")],sort("Event"),attrs([term(cons("Event"))])),prod([sort("Event")],sort("Operand"),attrs([term(cons("EventOp"))])),prod([lit("<NAryOp"),lit("operator=\\\"and\\\">"),lit("<operands>"),sort("Event"),sort("Operand"),lit("</operands>"),lit("</NAryOp>")],sort("Operand"),attrs([term(cons("AndEvent")),prefer])),prod([lit("<NAryOp"),lit("operator=\\\"or\\\">"),lit("<operands>"),sort("Event"),sort("Operand"),lit("</operands>"),lit("</NAryOp>")],sort("Operand"),attrs([term(cons("OrEvent")),prefer])),prod([lit("<NAryOp"),lit("operator=\\\"and\\\">"),lit("<operands>"),lit("<UnaryOp"),lit("operator=\\\"not\\\">"),lit("<operand>"),lit("<UnaryOp"),lit("operator=\\\"not\\\">"),lit("<operand>"),sort("Operand"),lit("</operand>"),lit("</UnaryOp>"),lit("</operand>"),lit("</UnaryOp>"),lit("<UnaryOp"),lit("operator=\\\"not\\\">"),lit("<operand>"),sort("Operand"),lit("</operand>"),lit("</UnaryOp>"),lit("</operands>"),lit("</NAryOp>")],sort("Operand"),attrs([term(cons("Event3")),prefer])),prod([lit("<NAryOp"),lit("operator=\\\"and\\\">"),lit("<operands>"),iter-star(sort("Operand")),lit("</operands>"),lit("</NAryOp>")],sort("Operand"),attrs([term(cons("And")),avoid])),prod([lit("<NAryOp"),lit("operator=\\\"or\\\">"),lit("<operands>"),iter-star(sort("Operand")),lit("</operands>"),lit("</NAryOp>")],sort("Operand"),attrs([term(cons("Or")),avoid])),prod([lit("<NAryOp"),lit("operator=\\\"or\\\">"),lit("<operands>"),lit("<UnaryOp"),lit("operator=\\\"not\\\">"),lit("<operand>"),sort("Operand"),lit("</operand>"),lit("</UnaryOp>"),sort("Operand"),lit("</operands>"),lit("</NAryOp>")],sort("Operand"),attrs([term(cons("Imply")),prefer])),prod([lit("<UnaryOp"),lit("operator=\\\"-\\\">"),lit("<operand>"),sort("Operand"),lit("</operand>"),lit("</UnaryOp>")],sort("Operand"),attrs([term(cons("Negative"))])),prod([lit("<UnaryOp"),lit("operator=\\\"not\\\">"),lit("<operand>"),lit("<NAryOp"),lit("operator=\\\"xor\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</NAryOp>"),lit("</operand>"),lit("</UnaryOp>")],sort("Operand"),attrs([term(cons("Xor"))])),prod([lit("<UnaryOp"),lit("operator=\\\"not\\\">"),lit("<operand>"),sort("Operand"),lit("</operand>"),lit("</UnaryOp>")],sort("Operand"),attrs([term(cons("NotOperand")),avoid])),prod([lit("<BinaryOp"),lit("operator=\\\"&gt;\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</BinaryOp>")],sort("Operand"),attrs([term(cons("GreaterThan"))])),prod([lit("<BinaryOp"),lit("operator=\\\"&gt;=\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</BinaryOp>")],sort("Operand"),attrs([term(cons("GreaterThanOrEqual"))])),prod([lit("<BinaryOp"),lit("operator=\\\"&lt;\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</BinaryOp>")],sort("Operand"),attrs([term(cons("LessThan"))])),prod([lit("<BinaryOp"),lit("operator=\\\"&lt;=\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</BinaryOp>")],sort("Operand"),attrs([term(cons("LessThanOrEqual"))])),prod([lit("<NAryOp"),lit("operator=\\\"+\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</NAryOp>")],sort("Operand"),attrs([term(cons("Addiction"))])),prod([lit("<BinaryOp"),lit("operator=\\\"-\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</BinaryOp>")],sort("Operand"),attrs([term(cons("Subtraction"))])),prod([lit("<BinaryOp"),lit("operator=\\\"=\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</BinaryOp>")],sort("Operand"),attrs([term(cons("Equal"))])),prod([lit("<BinaryOp"),lit("operator=\\\"&lt;&gt;\\\">"),lit("<operands>"),sort("Operand"),sort("Operand"),lit("</operands>"),lit("</BinaryOp>")],sort("Operand"),attrs([term(cons("Different"))])),prod([sort("IdExpression")],sort("Operand"),attrs([term(cons("IdExpressionOp"))])),prod([lit("<Last>"),lit("<variable>"),lit("<ConstVarRef"),lit("name=\\\""),sort("PragmaId"),lit("\\\"/>"),lit("</variable>"),lit("</Last>")],sort("Operand"),attrs([term(cons("LastVariable"))])),prod([lit("<ConstValue"),lit("value=\\\""),sort("Value"),lit("\\\"/>")],sort("Operand"),attrs([term(cons("ConstValue"))])),prod([lit("<CallExpression>"),sort("CallExpressionOperator"),sort("CallParameters"),lit("</CallExpression>")],sort("Operand"),attrs([term(cons("CallExpression"))])),prod([lit("<CaseOp"),lit("name=\\\""),sort("PragmaId"),lit("\\\">"),sort("Switch"),sort("Cases"),lit("</CaseOp>")],sort("Operand"),attrs([term(cons("CaseOp"))])),prod([lit("<IfThenElseOp"),lit("name=\\\""),sort("PragmaId"),lit("\\\">"),sort("If"),sort("Then"),sort("Else"),lit("</IfThenElseOp>")],sort("Operand"),attrs([term(cons("IfThenElseOp"))])),prod([lit("<operator>"),lit("<OpCall"),lit("name=\\\""),sort("INT"),lit("\\\">"),lit("<operator>"),lit("<OperatorRef"),lit("name=\\\""),sort("PragmaId"),lit("\\\"/>"),lit("</operator>"),lit("</OpCall>"),lit("</operator>")],sort("CallExpressionOperator"),attrs([term(cons("CallExpressionOperator"))])),prod([lit("<callParameters>"),iter-star(sort("IdExpression")),lit("</callParameters>")],sort("CallParameters"),attrs([term(cons("CallParameters"))])),prod([lit("<switch>"),sort("IdExpression"),lit("</switch>")],sort("Switch"),attrs([term(cons("Switch"))])),prod([lit("<cases>"),iter-star(sort("Case")),lit("</cases>")],sort("Cases"),attrs([term(cons("Cases"))])),prod([lit("<Case"),lit("pattern=\\\""),sort("PragmaId"),lit("\\\">"),lit("<flow>"),sort("IdExpression"),lit("</flow>"),lit("</Case>")],sort("Case"),attrs([term(cons("Case"))])),prod([lit("<IdExpression>"),lit("<path>"),lit("<ConstVarRef"),lit("name=\\\""),sort("PragmaId"),lit("\\\"/>"),lit("</path>"),lit("</IdExpression>")],sort("IdExpression"),attrs([term(cons("IdExpression"))])),prod([lit("<if>"),sort("IdExpression"),lit("</if>")],sort("If"),attrs([term(cons("If"))])),prod([lit("<then>"),sort("ListExpression"),lit("</then>")],sort("Then"),attrs([term(cons("Then"))])),prod([lit("<else>"),sort("ListExpression"),lit("</else>")],sort("Else"),attrs([term(cons("Else"))])),prod([lit("<ListExpression>"),lit("<items>"),sort("IdExpression"),lit("</items>"),lit("</ListExpression>")],sort("ListExpression"),attrs([term(cons("ListExpression"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Boolean"),attrs([term(cons("COMPLETION-Boolean"))])),prod([sort("CONTENTCOMPLETE")],sort("Event"),attrs([term(cons("COMPLETION-Event"))])),prod([sort("CONTENTCOMPLETE")],sort("Operand"),attrs([term(cons("COMPLETION-Operand"))])),prod([sort("CONTENTCOMPLETE")],sort("CallExpressionOperator"),attrs([term(cons("COMPLETION-CallExpressionOperator"))])),prod([sort("CONTENTCOMPLETE")],sort("CallParameters"),attrs([term(cons("COMPLETION-CallParameters"))])),prod([sort("CONTENTCOMPLETE")],sort("Switch"),attrs([term(cons("COMPLETION-Switch"))])),prod([sort("CONTENTCOMPLETE")],sort("Cases"),attrs([term(cons("COMPLETION-Cases"))])),prod([sort("CONTENTCOMPLETE")],sort("Case"),attrs([term(cons("COMPLETION-Case"))])),prod([sort("CONTENTCOMPLETE")],sort("IdExpression"),attrs([term(cons("COMPLETION-IdExpression"))])),prod([sort("CONTENTCOMPLETE")],sort("If"),attrs([term(cons("COMPLETION-If"))])),prod([sort("CONTENTCOMPLETE")],sort("Then"),attrs([term(cons("COMPLETION-Then"))])),prod([sort("CONTENTCOMPLETE")],sort("Else"),attrs([term(cons("COMPLETION-Else"))])),prod([sort("CONTENTCOMPLETE")],sort("ListExpression"),attrs([term(cons("COMPLETION-ListExpression"))]))])))]),module(unparameterized("Equation"),[imports([module(unparameterized("Common")),module(unparameterized("Operand"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<Equation>"),sort("Lefts"),sort("Right"),sort("Pragma"),lit("</Equation>")],sort("Equation"),attrs([term(cons("Equation"))])),prod([lit("<lefts>"),lit("<VariableRef"),lit("name=\\\""),sort("PragmaId"),lit("\\\"/>"),lit("</lefts>")],sort("Lefts"),attrs([term(cons("Lefts"))])),prod([lit("<right>"),sort("Operand"),lit("</right>")],sort("Right"),attrs([term(cons("Right"))])),prod([lit("<pragmas>"),lit("<ed:Equation"),lit("oid=\\\"!ed/Expr/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma"))])),prod([lit("<pragmas>"),lit("<ed:Equation"),lit("oid=\\\"!ed/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma1"))])),prod([lit("<pragmas>"),lit("<ed:Equation"),lit("oid=\\\"!ed/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("/"),sort("INT"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma2"))])),prod([lit("<pragmas>"),lit("<ed:Variable"),lit("oid=\\\"!ed/tOverridden/IF/2\\\"/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma3"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Equation"),attrs([term(cons("COMPLETION-Equation"))])),prod([sort("CONTENTCOMPLETE")],sort("Lefts"),attrs([term(cons("COMPLETION-Lefts"))])),prod([sort("CONTENTCOMPLETE")],sort("Right"),attrs([term(cons("COMPLETION-Right"))])),prod([sort("CONTENTCOMPLETE")],sort("Pragma"),attrs([term(cons("COMPLETION-Pragma"))]))])))]),module(unparameterized("Variable"),[imports([module(unparameterized("Common")),module(unparameterized("NamedType"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<Variable"),lit("name=\\\""),sort("MVAR"),lit("\\\">"),sort("Type"),iter-star(sort("Last")),sort("Pragma"),lit("</Variable>")],sort("Variable"),attrs([term(cons("MonitoredVariable"))])),prod([lit("<Variable"),lit("name=\\\""),sort("Time"),lit("\\\">"),sort("Type"),iter-star(sort("Last")),sort("Pragma"),lit("</Variable>")],sort("Variable"),attrs([term(cons("MonitoredVariable2"))])),prod([lit("<Variable"),lit("name=\\\""),sort("CVAR"),lit("\\\">"),sort("Type"),iter-star(sort("Last")),sort("Pragma"),lit("</Variable>")],sort("Variable"),attrs([term(cons("ControlledVariable"))])),prod([lit("<Variable"),lit("name=\\\""),sort("TVAR"),lit("\\\">"),sort("Type"),iter-star(sort("Last")),sort("Pragma"),lit("</Variable>")],sort("Variable"),attrs([term(cons("TermVariable"))])),prod([lit("<Variable"),lit("name=\\\""),sort("DUR"),lit("\\\">"),sort("Type"),iter-star(sort("Last")),sort("Pragma"),lit("</Variable>")],sort("Variable"),attrs([term(cons("TermVariable2")),prefer])),prod([lit("<Variable"),lit("name=\\\""),sort("MCVAR"),lit("\\\">"),sort("Type"),iter-star(sort("Last")),sort("Pragma"),lit("</Variable>")],sort("Variable"),attrs([term(cons("ModeClassVariable"))])),prod([lit("<Variable"),lit("name=\\\""),sort("PragmaId"),lit("\\\">"),sort("Type"),iter-star(sort("Last")),sort("Pragma"),lit("</Variable>")],sort("Variable"),attrs([term(cons("GenericVariable")),avoid])),prod([lit("<type>"),sort("NamedType"),lit("</type>")],sort("Type"),attrs([term(cons("Type"))])),prod([lit("<last>"),lit("<ConstValue"),lit("value=\\\""),sort("Value"),lit("\\\"/>"),lit("</last>")],sort("Last"),attrs([term(cons("LastInt"))])),prod([lit("<last>"),lit("<IdExpression>"),lit("<path>"),lit("<ConstVarRef"),lit("name=\\\""),sort("PragmaId"),lit("\\\"/>"),lit("</path>"),lit("</IdExpression>"),lit("</last>")],sort("Last"),attrs([term(cons("LastIdExpression"))])),prod([lit("<last>"),lit("<UnaryOp"),lit("operator=\\\"-\\\">"),lit("<operand>"),lit("<ConstValue"),lit("value=\\\""),sort("Value"),lit("\\\"/>"),lit("</operand>"),lit("</UnaryOp>"),lit("</last>")],sort("Last"),attrs([term(cons("LastConstruct"))])),prod([lit("<pragmas>"),lit("<ed:Variable"),lit("oid=\\\"!ed/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma1"))])),prod([lit("<pragmas>"),lit("<ed:Variable"),lit("oid=\\\"!ed/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma2"))])),prod([lit("<pragmas>"),lit("<ed:Variable"),lit("oid=\\\"!ed/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("/"),sort("INT"),lit("\\\"/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma3"))])),prod([lit("<pragmas>"),lit("<ed:Variable"),lit("oid=\\\"!ed/"),sort("PragmaId"),lit("/"),sort("PragmaId"),lit("\\\""),lit("/>"),lit("</pragmas>")],sort("Pragma"),attrs([term(cons("Pragma4")),avoid]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Variable"),attrs([term(cons("COMPLETION-Variable"))])),prod([sort("CONTENTCOMPLETE")],sort("Type"),attrs([term(cons("COMPLETION-Type"))])),prod([sort("CONTENTCOMPLETE")],sort("Last"),attrs([term(cons("COMPLETION-Last"))])),prod([sort("CONTENTCOMPLETE")],sort("Pragma"),attrs([term(cons("COMPLETION-Pragma"))]))])))]),module(unparameterized("Operator"),[imports([module(unparameterized("Common")),module(unparameterized("Variable")),module(unparameterized("Equation")),module(unparameterized("Assumption")),module(unparameterized("Assertion"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<Operator"),lit("kind=\\\""),sort("OPKIND"),lit("\\\""),lit("name=\\\""),sort("MVAR"),lit("\\\">"),sort("Inputs"),sort("Outputs"),sort("Locals"),sort("Data"),sort("Pragmas"),lit("</Operator>")],sort("Operator"),attrs([term(cons("Monitored"))])),prod([lit("<Operator"),lit("kind=\\\""),sort("OPKIND"),lit("\\\""),lit("name=\\\""),sort("CVAR"),lit("\\\">"),sort("Inputs"),sort("Outputs"),sort("Locals"),sort("Data"),sort("Pragmas"),lit("</Operator>")],sort("Operator"),attrs([term(cons("Controlled"))])),prod([lit("<Operator"),lit("kind=\\\""),sort("OPKIND"),lit("\\\""),lit("name=\\\""),sort("TVAR"),lit("\\\">"),sort("Inputs"),sort("Outputs"),sort("Locals"),sort("Data"),sort("Pragmas"),lit("</Operator>")],sort("Operator"),attrs([term(cons("Term"))])),prod([lit("<Operator"),lit("kind=\\\""),sort("OPKIND"),lit("\\\""),lit("name=\\\""),sort("DUR"),lit("\\\">"),sort("Inputs"),sort("Outputs"),sort("Locals"),sort("Data"),sort("Pragmas"),lit("</Operator>")],sort("Operator"),attrs([term(cons("Term2"))])),prod([lit("<Operator"),lit("kind=\\\""),sort("OPKIND"),lit("\\\""),lit("name=\\\""),sort("MCVAR"),lit("\\\">"),sort("Inputs"),sort("Outputs"),sort("Locals"),sort("Data"),sort("Pragmas"),lit("</Operator>")],sort("Operator"),attrs([term(cons("ModeClass"))])),prod([lit("<Operator"),lit("kind=\\\""),sort("OPKIND"),lit("\\\""),lit("name=\\\""),sort("PragmaId"),lit("\\\">"),sort("Inputs"),sort("Outputs"),sort("Locals"),sort("Data"),sort("Pragmas"),lit("</Operator>")],sort("Operator"),attrs([term(cons("MainOperator")),avoid])),prod([lit("<inputs>"),iter-star(sort("Variable")),lit("</inputs>")],sort("Inputs"),attrs([term(cons("Inputs"))])),prod([lit("<outputs>"),iter-star(sort("Variable")),lit("</outputs>")],sort("Outputs"),attrs([term(cons("Outputs"))])),prod([lit("<locals>"),iter-star(sort("Variable")),lit("</locals>")],sort("Locals"),attrs([term(cons("Locals"))])),prod([lit("<data>"),iter-star(sort("Equation")),iter-star(sort("AssumptionOrAssertion")),lit("</data>")],sort("Data"),attrs([term(cons("Data"))])),prod([sort("Assumption")],sort("AssumptionOrAssertion"),attrs([term(cons("AssumptionOperator"))])),prod([sort("Assertion")],sort("AssumptionOrAssertion"),attrs([term(cons("AssertionOperator"))])),prod([lit("<pragmas>"),sort("EdOperator"),lit("</pragmas>")],sort("Pragmas"),attrs([term(cons("Pragmas"))])),prod([lit("<ed:Operator"),lit("oid=\\\"!ed/MainOper/"),sort("PragmaId"),lit("\\\""),lit("xmlns=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\">"),sort("Diagrams"),lit("</ed:Operator>")],sort("EdOperator"),attrs([term(cons("EdOperator"))])),prod([lit("<ed:Operator"),lit("oid=\\\"!ed/"),sort("PragmaId"),lit("\\\">"),sort("Diagrams"),lit("</ed:Operator>")],sort("EdOperator"),attrs([term(cons("EdOperator2"))])),prod([lit("<diagrams>"),sort("TextDiagram"),lit("</diagrams>")],sort("Diagrams"),attrs([term(cons("Diagrams"))])),prod([lit("<TextDiagram"),lit("name=\\\""),sort("PragmaId"),lit("\\\""),lit("landscape=\\\"true\\\""),lit("format=\\\"A4"),lit("("),lit("210"),lit("297"),lit(")"),lit("\\\""),lit("oid=\\\"!ed/Pragma/"),sort("PragmaId"),lit("\\\">"),sort("PresentationElements"),lit("</TextDiagram>")],sort("TextDiagram"),attrs([term(cons("TextDiagram"))])),prod([lit("<TextDiagram"),lit("name=\\\""),sort("PragmaId"),lit("\\\""),lit("landscape=\\\"true\\\""),lit("format=\\\"A4"),lit("("),lit("210"),lit("297"),lit(")"),lit("\\\""),lit("oid=\\\"!ed/TextDiagram/"),sort("PragmaId"),lit("\\\">"),sort("PresentationElements"),lit("</TextDiagram>")],sort("TextDiagram"),attrs([term(cons("TextDiagram2"))])),prod([lit("<presentationElements>"),iter-star(sort("FlowTE")),lit("</presentationElements>")],sort("PresentationElements"),attrs([term(cons("PresentationElements"))])),prod([lit("<FlowTE"),lit("presentable=\\\""),sort("PresentableId"),lit("\\\"/>")],sort("FlowTE"),attrs([term(cons("FlowTE"))])),prod([lit("<FlowTE"),lit("presentable=\\\""),sort("PresentableId"),lit("\\\""),lit("/>")],sort("FlowTE"),attrs([term(cons("FlowTE2")),avoid]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Operator"),attrs([term(cons("COMPLETION-Operator"))])),prod([sort("CONTENTCOMPLETE")],sort("Inputs"),attrs([term(cons("COMPLETION-Inputs"))])),prod([sort("CONTENTCOMPLETE")],sort("Outputs"),attrs([term(cons("COMPLETION-Outputs"))])),prod([sort("CONTENTCOMPLETE")],sort("Locals"),attrs([term(cons("COMPLETION-Locals"))])),prod([sort("CONTENTCOMPLETE")],sort("Data"),attrs([term(cons("COMPLETION-Data"))])),prod([sort("CONTENTCOMPLETE")],sort("AssumptionOrAssertion"),attrs([term(cons("COMPLETION-AssumptionOrAssertion"))])),prod([sort("CONTENTCOMPLETE")],sort("Pragmas"),attrs([term(cons("COMPLETION-Pragmas"))])),prod([sort("CONTENTCOMPLETE")],sort("EdOperator"),attrs([term(cons("COMPLETION-EdOperator"))])),prod([sort("CONTENTCOMPLETE")],sort("Diagrams"),attrs([term(cons("COMPLETION-Diagrams"))])),prod([sort("CONTENTCOMPLETE")],sort("TextDiagram"),attrs([term(cons("COMPLETION-TextDiagram"))])),prod([sort("CONTENTCOMPLETE")],sort("PresentationElements"),attrs([term(cons("COMPLETION-PresentationElements"))])),prod([sort("CONTENTCOMPLETE")],sort("FlowTE"),attrs([term(cons("COMPLETION-FlowTE"))]))])))]),module(unparameterized("Constant"),[imports([module(unparameterized("Common")),module(unparameterized("NamedType"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<Constant"),lit("name=\\\""),sort("ID"),lit("\\\">"),lit("<type>"),sort("NamedType"),lit("</type>"),lit("<value>"),lit("<ConstValue"),lit("value=\\\""),sort("Value"),lit("\\\"/>"),lit("</value>"),lit("<pragmas>"),lit("<ed:Constant"),lit("oid=\\\"!ed/Constant/"),sort("ID"),lit("\\\"/>"),lit("</pragmas>"),lit("</Constant>")],sort("Constant"),attrs([term(cons("Constant"))])),prod([lit("<Constant"),lit("name=\\\""),sort("ID"),lit("\\\">"),lit("<type>"),sort("NamedType"),lit("</type>"),lit("<value>"),lit("<UnaryOp"),lit("operator=\\\"-\\\">"),lit("<operand>"),lit("<ConstValue"),lit("value=\\\""),sort("Value"),lit("\\\"/>"),lit("</operand>"),lit("</UnaryOp>"),lit("</value>"),lit("<pragmas>"),lit("<ed:Constant"),lit("oid=\\\"!ed/Constant/"),sort("ID"),lit("\\\"/>"),lit("</pragmas>"),lit("</Constant>")],sort("Constant"),attrs([term(cons("Constant2"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Constant"),attrs([term(cons("COMPLETION-Constant"))]))])))]),module(unparameterized("NamedType"),[imports([module(unparameterized("Common"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<NamedType>"),lit("<type>"),lit("<TypeRef"),lit("name=\\\"int\\\""),lit("/>"),lit("</type>"),lit("</NamedType>")],sort("NamedType"),attrs([term(cons("Int"))])),prod([lit("<NamedType>"),lit("<type>"),lit("<TypeRef"),lit("name=\\\"bool\\\""),lit("/>"),lit("</type>"),lit("</NamedType>")],sort("NamedType"),attrs([term(cons("Bool"))])),prod([lit("<NamedType>"),lit("<type>"),lit("<TypeRef"),lit("name=\\\"real\\\""),lit("/>"),lit("</type>"),lit("</NamedType>")],sort("NamedType"),attrs([term(cons("Real"))])),prod([lit("<NamedType>"),lit("<type>"),lit("<TypeRef"),lit("name=\\\""),sort("PragmaId"),lit("\\\""),sort("IgnoreSpace"),lit("/>"),lit("</type>"),lit("</NamedType>")],sort("NamedType"),attrs([term(cons("CustomType")),avoid])),prod([lit("<Enum>"),lit("<values>"),iter-star(sort("EnumValue")),lit("</values>"),lit("</Enum>")],sort("NamedType"),attrs([term(cons("Enum"))])),prod([lit("<Value"),lit("name=\\\""),sort("PragmaId"),lit("\\\">"),lit("<pragmas>"),lit("<ed:Value"),lit("oid=\\\"!ed/enumValue/"),sort("PragmaId"),lit("\\\""),lit("/>"),lit("</pragmas>"),lit("</Value>")],sort("EnumValue"),attrs([term(cons("EnumValue"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("NamedType"),attrs([term(cons("COMPLETION-NamedType"))])),prod([sort("CONTENTCOMPLETE")],sort("EnumValue"),attrs([term(cons("COMPLETION-EnumValue"))]))])))]),module(unparameterized("Type"),[imports([module(unparameterized("Common")),module(unparameterized("NamedType"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<Type"),lit("name=\\\""),sort("PragmaId"),lit("\\\">"),lit("<definition>"),sort("NamedType"),lit("</definition>"),lit("<pragmas>"),lit("<ed:Type"),lit("oid=\\\"!ed/type/"),sort("PragmaId"),lit("\\\""),lit("/>"),lit("</pragmas>"),lit("</Type>")],sort("Type"),attrs([term(cons("Type"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Type"),attrs([term(cons("COMPLETION-Type"))]))])))]),module(unparameterized("Package"),[imports([module(unparameterized("Common")),module(unparameterized("Type")),module(unparameterized("Constant")),module(unparameterized("Operator")),module(unparameterized("Assumption")),module(unparameterized("Assertion"))])],[exports(conc-grammars(context-free-syntax([prod([lit("<?xml"),lit("version=\\\"1.0\\\""),lit("encoding=\\\"UTF-8\\\"?>"),lit("<File"),lit("xmlns=\\\"http://www.esterel-technologies.com/ns/scade/3\\\""),lit("xmlns:ed=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\""),lit("xmlns:kcg=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/codegen/1\\\">"),lit("<declarations>"),lit("<Package"),lit("name=\\\""),sort("PragmaId"),lit("\\\">"),sort("Declarations"),sort("Pragmas"),lit("</Package>"),lit("</declarations>"),lit("</File>")],sort("Package"),attrs([term(cons("Package"))])),prod([lit("<declarations>"),iter-star(sort("Type")),iter-star(sort("Constant")),iter-star(sort("Operator")),lit("</declarations>")],sort("Declarations"),attrs([term(cons("Declarations"))])),prod([lit("<pragmas>"),lit("<ed:Package"),lit("oid=\\\"!ed/package/"),sort("PragmaId"),lit("\\\""),lit("xmlns=\\\"http://www.esterel-technologies.com/ns/scade/pragmas/editor/3\\\">"),lit("<diagrams>"),lit("<TreeDiagram"),lit("landscape=\\\"true\\\""),lit("format=\\\"A4"),lit("("),lit("210"),lit("297"),lit(")"),lit("\\\""),lit("oid=\\\"!ed/package/constants/"),sort("PragmaId"),lit("\\\""),lit("blockKind=\\\"constants\\\""),lit("/>"),lit("<TreeDiagram"),lit("landscape=\\\"true\\\""),lit("format=\\\"A4"),lit("("),lit("210"),lit("297"),lit(")"),lit("\\\""),lit("oid=\\\"!ed/package/types/"),sort("PragmaId"),lit("\\\""),lit("blockKind=\\\"types\\\""),lit("/>"),lit("<TreeDiagram"),lit("landscape=\\\"true\\\""),lit("format=\\\"A4"),lit("("),lit("210"),lit("297"),lit(")"),lit("\\\""),lit("oid=\\\"!ed/package/sensors/"),sort("PragmaId"),lit("\\\""),lit("blockKind=\\\"sensors\\\"/>"),lit("</diagrams>"),lit("</ed:Package>"),lit("</pragmas>")],sort("Pragmas"),attrs([term(cons("Pragmas"))]))]),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Package"),attrs([term(cons("COMPLETION-Package"))])),prod([sort("CONTENTCOMPLETE")],sort("Declarations"),attrs([term(cons("COMPLETION-Declarations"))])),prod([sort("CONTENTCOMPLETE")],sort("Pragmas"),attrs([term(cons("COMPLETION-Pragmas"))]))])))]),module(unparameterized("Common"),[],[exports(conc-grammars(conc-grammars(lexical-syntax([prod([char-class(simple-charclass(present(conc(range(short("a"),short("z")),range(short("A"),short("Z")))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),range(short("0"),short("9"))))))))],sort("ID"),attrs([])),prod([lit("m"),char-class(simple-charclass(present(range(short("A"),short("Z"))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),range(short("0"),short("9"))))))))],sort("MVAR"),attrs([])),prod([lit("time")],sort("Time"),attrs([])),prod([lit("dur_tDesiredSpeed_true_time_1")],sort("DUR"),attrs([])),prod([lit("c"),char-class(simple-charclass(present(conc(range(short("A"),short("Z")),short("\\_"))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))],sort("CVAR"),attrs([])),prod([lit("mc"),char-class(simple-charclass(present(conc(range(short("A"),short("Z")),short("\\_"))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),range(short("0"),short("9"))))))))],sort("MCVAR"),attrs([])),prod([lit("t"),char-class(simple-charclass(present(conc(range(short("A"),short("Z")),short("\\_"))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),range(short("0"),short("9"))))))))],sort("TVAR"),attrs([])),prod([alt(sort("MVAR"),alt(sort("CVAR"),alt(sort("MCVAR"),alt(sort("TVAR"),alt(sort("Time"),sort("DUR"))))))],sort("OPNAME"),attrs([])),prod([alt(lit("node"),alt(lit("function"),lit("assume")))],sort("OPKIND"),attrs([])),prod([opt(lit("-")),iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("INT"),attrs([])),prod([iter-star(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("Number"),attrs([])),prod([iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),short("\\'")))))))],sort("STRING"),attrs([])),prod([alt(lit("true"),lit("false"))],sort("Booleano"),attrs([])),prod([iter-star(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(short("\\."),short("\\-")))))))],sort("Float"),attrs([])),prod([alt(sort("INT"),sort("Booleano"))],sort("TYPE"),attrs([])),prod([char-class(comp(simple-charclass(present(conc(short("\\\""),short("\\n"))))))],sort("StringChar"),attrs([])),prod([lit("\\\\\\\"")],sort("StringChar"),attrs([])),prod([sort("BackSlashChar")],sort("StringChar"),attrs([])),prod([lit("\\\\")],sort("BackSlashChar"),attrs([])),prod([char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\n"),short("\\r")))))))],layout,attrs([])),prod([char-class(simple-charclass(present(short("\\*"))))],sort("CommentChar"),attrs([])),prod([lit("/*"),iter-star(sort("InsideComment")),lit("*/")],layout,attrs([])),prod([char-class(comp(simple-charclass(present(short("\\*")))))],sort("InsideComment"),attrs([])),prod([sort("CommentChar")],sort("InsideComment"),attrs([])),prod([lit("//"),iter-star(char-class(comp(simple-charclass(present(conc(short("\\n"),short("\\r"))))))),sort("NewLineEOF")],layout,attrs([])),prod([char-class(simple-charclass(present(conc(short("\\n"),short("\\r")))))],sort("NewLineEOF"),attrs([])),prod([sort("EOF")],sort("NewLineEOF"),attrs([])),prod([char-class(simple-charclass(present(conc(range(short("a"),short("z")),range(short("A"),short("Z")))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),conc(short("\\_"),conc(short("\\:"),conc(short("\\."),short("\\'")))))))))))],sort("PragmaId"),attrs([])),prod([iter-star(char-class(simple-charclass(present(short("\\ ")))))],sort("IgnoreSpace"),attrs([])),prod([lit("!"),char-class(simple-charclass(present(conc(range(short("a"),short("z")),range(short("A"),short("Z")))))),iter-star(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),conc(short("\\_"),short("\\/")))))))))],sort("PresentableId"),attrs([])),prod([alt(sort("INT"),alt(sort("STRING"),alt(sort("Booleano"),sort("Float"))))],sort("Value"),attrs([])),prod([lit("&"),char-class(simple-charclass(present(conc(range(short("a"),short("z")),range(short("A"),short("Z")))))),lit(";"),lit("=")],sort("BinaryName"),attrs([])),prod([],sort("EOF"),attrs([]))]),lexical-restrictions([follow([sort("CommentChar")],single(char-class(simple-charclass(present(short("\\/")))))),follow([sort("INT")],single(char-class(simple-charclass(present(range(short("0"),short("9"))))))),follow([sort("ID")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([sort("EOF")],single(char-class(comp(simple-charclass(absent))))),follow([sort("BackSlashChar")],single(char-class(simple-charclass(present(short("\\\""))))))])),context-free-restrictions([follow([opt(layout)],single(char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\n"),short("\\r"))))))))),follow([opt(layout)],single(seq(simple-charclass(present(short("\\/"))),single(char-class(simple-charclass(present(short("\\/")))))))),follow([opt(layout)],single(seq(simple-charclass(present(short("\\/"))),single(char-class(simple-charclass(present(short("\\*"))))))))])))]),module(unparameterized("Entity"),[imports([module(unparameterized("Common")),module(unparameterized("Package")),module(unparameterized("Java"))])],[exports(conc-grammars(conc-grammars(context-free-start-symbols([sort("Start")]),context-free-syntax([prod([sort("Package")],sort("Start"),attrs([term(cons("Main"))]))])),context-free-syntax([prod([sort("CONTENTCOMPLETE")],sort("Start"),attrs([term(cons("COMPLETION-Start"))]))])))])])